// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto2";

import "cisco.proto";

message policy_stats {
    option (cisco_msg).schema_path = "RootOper.QOS.Interface.Output.Statistics";

    optional string interface_name = 1 [(cisco_field).path_element="RootOper.QOS.Interface(InterfaceName)"];
    optional string policy_name = 50 [(cisco_field).name="PolicyName"];
    optional string state = 51 [(cisco_field).name="State"];
    optional string state_description = 52 [(cisco_field).name="StateDescription"];
    repeated class_stats class_stats = 53 [(cisco_field).name="class_stats"];
    optional uint32 satid = 54 [(cisco_field).name="Satid"];
}

message policy_param_uint32_st_ {
    optional uint32 value = 1 [(cisco_field).name="value"];
    optional string unit = 2 [(cisco_field).name="unit"];
}

message gen_stats_st {
    optional uint64 transmit_packets = 1 [(cisco_field).name="TransmitPackets"];
    optional uint64 transmit_bytes = 2 [(cisco_field).name="TransmitBytes"];
    optional uint64 total_drop_packets = 3 [(cisco_field).name="TotalDropPackets"];
    optional uint64 total_drop_bytes = 4 [(cisco_field).name="TotalDropBytes"];
    optional uint32 total_drop_rate = 5 [(cisco_field).name="TotalDropRate"];
    optional uint32 match_data_rate = 6 [(cisco_field).name="MatchDataRate"];
    optional uint32 total_transmit_rate = 7 [(cisco_field).name="TotalTransmitRate"];
    optional uint64 pre_policy_matched_packets = 8 [(cisco_field).name="PrePolicyMatchedPackets"];
    optional uint64 pre_policy_matched_bytes = 9 [(cisco_field).name="PrePolicyMatchedBytes"];
}

message plc_color_class_stats_st {
    optional uint64 conform_class_conform_packets = 1 [(cisco_field).name="ConformClassConformPackets"];
    optional uint64 conform_class_conform_bytes = 2 [(cisco_field).name="ConformClassConformBytes"];
    optional uint32 conform_class_conform_rate = 3 [(cisco_field).name="ConformClassConformRate"];
    optional uint64 conform_class_exceed_packets = 4 [(cisco_field).name="ConformClassExceedPackets"];
    optional uint64 conform_class_exceed_bytes = 5 [(cisco_field).name="ConformClassExceedBytes"];
    optional uint32 conform_class_exceed_rate = 6 [(cisco_field).name="ConformClassExceedRate"];
    optional uint64 conform_class_violate_packets = 7 [(cisco_field).name="ConformClassViolatePackets"];
    optional uint64 conform_class_violate_bytes = 8 [(cisco_field).name="ConformClassViolateBytes"];
    optional uint32 conform_class_violate_rate = 9 [(cisco_field).name="ConformClassViolateRate"];
    optional uint64 exceed_class_exceed_packets = 10 [(cisco_field).name="ExceedClassExceedPackets"];
    optional uint64 exceed_class_exceed_bytes = 11 [(cisco_field).name="ExceedClassExceedBytes"];
    optional uint32 exceed_class_exceed_rate = 12 [(cisco_field).name="ExceedClassExceedRate"];
    optional uint64 exceed_class_violate_packets = 13 [(cisco_field).name="ExceedClassViolatePackets"];
    optional uint64 exceed_class_violate_bytes = 14 [(cisco_field).name="ExceedClassViolateBytes"];
    optional uint32 exceed_class_violate_rate = 15 [(cisco_field).name="ExceedClassViolateRate"];
    optional uint64 violate_class_violate_packets = 16 [(cisco_field).name="ViolateClassViolatePackets"];
    optional uint64 violate_class_violate_bytes = 17 [(cisco_field).name="ViolateClassViolateBytes"];
    optional uint32 violate_class_violate_rate = 18 [(cisco_field).name="ViolateClassViolateRate"];
}

message plc_stats_st {
    optional uint64 drop_packets = 1 [(cisco_field).name="DropPackets"];
    optional uint64 drop_bytes = 2 [(cisco_field).name="DropBytes"];
    optional uint64 conform_packets = 3 [(cisco_field).name="ConformPackets"];
    optional uint64 conform_bytes = 4 [(cisco_field).name="ConformBytes"];
    optional uint64 exceed_packets = 5 [(cisco_field).name="ExceedPackets"];
    optional uint64 exceed_bytes = 6 [(cisco_field).name="ExceedBytes"];
    optional uint64 violate_packets = 7 [(cisco_field).name="ViolatePackets"];
    optional uint64 violate_bytes = 8 [(cisco_field).name="ViolateBytes"];
    optional uint64 parent_drop_packets = 9 [(cisco_field).name="ParentDropPackets"];
    optional uint64 parent_drop_bytes = 10 [(cisco_field).name="ParentDropBytes"];
    optional uint32 conform_rate = 11 [(cisco_field).name="ConformRate"];
    optional uint32 exceed_rate = 12 [(cisco_field).name="ExceedRate"];
    optional uint32 violate_rate = 13 [(cisco_field).name="ViolateRate"];
    optional plc_color_class_stats_st color_class_stats = 14 [(cisco_field).name="ColorClassStats"];
}

message cac_stats_st {
    optional uint64 drop_packets = 1 [(cisco_field).name="DropPackets"];
    optional uint64 drop_bytes = 2 [(cisco_field).name="DropBytes"];
    optional uint32 drop_rates = 3 [(cisco_field).name="DropRates"];
    optional uint64 admitpackets = 4 [(cisco_field).name="Admitpackets"];
    optional uint64 admit_bytes = 5 [(cisco_field).name="AdmitBytes"];
    optional uint32 admit_rates = 6 [(cisco_field).name="AdmitRates"];
}

message iphc_stats_st {
    optional uint64 non_tcp_total_out_packets = 1 [(cisco_field).name="NonTCP_TotalOutPackets"];
    optional uint64 non_tcp_total_out_bytes = 2 [(cisco_field).name="NonTCP_TotalOutBytes"];
    optional uint64 non_tcp_bytes_saved = 3 [(cisco_field).name="NonTCP_BytesSaved"];
    optional uint64 non_tcp_compressed_packets_out = 4 [(cisco_field).name="NonTcp_CompressedPacketsOut"];
    optional uint32 non_tcp_bytes_sent_rate = 5 [(cisco_field).name="NonTCP_BytesSentRate"];
    optional uint64 non_tcp_full_header_packets_out = 6 [(cisco_field).name="NonTCP_FullHeaderPacketsOut"];
    optional uint64 tcp_total_out_packets = 7 [(cisco_field).name="TCP_TotalOutPackets"];
    optional uint64 tcp_total_out_bytes = 8 [(cisco_field).name="TCP_TotalOutBytes"];
    optional uint64 tcp_bytes_saved = 9 [(cisco_field).name="TCP_BytesSaved"];
    optional uint64 tcp_compressed_packets_out = 10 [(cisco_field).name="TCP_CompressedPacketsOut"];
    optional uint32 tcp_bytes_sent_rate = 11 [(cisco_field).name="TCP_BytesSentRate"];
    optional uint64 tcp_full_header_packets_out = 12 [(cisco_field).name="TCP_FullHeaderPacketsOut"];
}

message q_stats_st {
    optional uint32 queue_id = 1 [(cisco_field).name="QueueID"];
    optional uint64 tail_drop_packets = 2 [(cisco_field).name="TailDropPackets"];
    optional uint64 tail_drop_bytes = 3 [(cisco_field).name="TailDropBytes"];
    optional uint64 atm_clp0_drop_packets = 4 [(cisco_field).name="ATM_CLP0DropPackets"];
    optional uint64 atm_clp0_drop_bytes = 5 [(cisco_field).name="ATM_CLP0DropBytes"];
    optional uint64 atm_clp1_drop_packets = 6 [(cisco_field).name="ATM_CLP1DropPackets"];
    optional uint64 atm_clp1_drop_bytes = 7 [(cisco_field).name="ATM_CLP1DropBytes"];
    repeated policy_param_uint32_st_ queue_instance_length = 8 [(cisco_field).name="QueueInstanceLength"];
    repeated policy_param_uint32_st_ queue_average_length = 9 [(cisco_field).name="QueueAverageLength"];
    repeated policy_param_uint32_st_ queue_max_length = 10 [(cisco_field).name="QueueMaxLength"];
    optional uint32 queue_drop_threshold = 11 [(cisco_field).name="QueueDropThreshold"];
    optional bool forced_wred_stats_display = 12 [(cisco_field).name="ForcedWREDStatsDisplay"];
    optional uint64 random_drop_packets = 13 [(cisco_field).name="RandomDropPackets"];
    optional uint64 random_drop_bytes = 14 [(cisco_field).name="RandomDropBytes"];
    optional uint64 max_threshold_packets = 15 [(cisco_field).name="MaxThresholdPackets"];
    optional uint64 max_threshold_bytes = 16 [(cisco_field).name="MaxThresholdBytes"];
    optional uint64 conform_packets = 17 [(cisco_field).name="ConformPackets"];
    optional uint64 conform_bytes = 18 [(cisco_field).name="ConformBytes"];
    optional uint64 exceed_packets = 19 [(cisco_field).name="ExceedPackets"];
    optional uint64 exceed_bytes = 20 [(cisco_field).name="ExceedBytes"];
    optional uint32 conform_rate = 21 [(cisco_field).name="ConformRate"];
    optional uint32 exceed_rate = 22 [(cisco_field).name="ExceedRate"];
}

message wred_type_value {
    optional string wred_type = 1 [(cisco_field).name="WREDType"];
    optional uint32 value = 2 [(cisco_field).name="value"];
}

message red_profile_stats {
    optional string profile_title = 1 [(cisco_field).name="ProfileTitle"];
    repeated wred_type_value red_label = 2 [(cisco_field).name="REDLabel"];
    optional uint64 red_transmit_packets = 3 [(cisco_field).name="REDTransmitPackets"];
    optional uint64 red_transmit_bytes = 4 [(cisco_field).name="REDTransmitBytes"];
    optional uint64 random_drop_packets = 5 [(cisco_field).name="RandomDropPackets"];
    optional uint64 random_drop_bytes = 6 [(cisco_field).name="RandomDropBytes"];
    optional uint64 max_threshold_packets = 7 [(cisco_field).name="MaxThresholdPackets"];
    optional uint64 max_threshold_bytes = 8 [(cisco_field).name="MaxThresholdBytes"];
    optional uint64 red_ecn_marked_packets = 9 [(cisco_field).name="RED_ECNMarkedPackets"];
    optional uint64 red_ecn_marked_bytes = 10 [(cisco_field).name="RED_ECNMarkedBytes"];
}

message class_stats {
    optional uint64 counter_validity_bitmask = 1 [(cisco_field).name="CounterValidityBitmask"];
    optional string class_name = 2 [(cisco_field).name="ClassName"];
    optional uint32 shared_queue_id = 3 [(cisco_field).name="SharedQueueID"];
    optional string queue_descr = 4 [(cisco_field).name="QueueDescr"];
    optional string cac_state = 5 [(cisco_field).name="CACState"];
    optional gen_stats_st general_stats = 6 [(cisco_field).name="GeneralStats"];
    repeated q_stats_st queue_stats_array = 7 [(cisco_field).name="QueueStatsArray"];
    repeated plc_stats_st police_stats_array = 8 [(cisco_field).name="PoliceStatsArray"];
    repeated red_profile_stats wred_stats_array = 9 [(cisco_field).name="WREDStatsArray"];
    optional iphc_stats_st iphc_stats = 10 [(cisco_field).name="IphcStats"];
    optional policy_stats child_policy = 11 [(cisco_field).name="ChildPolicy"];
    optional cac_stats_st cac_stats = 12 [(cisco_field).name="CACStats"];
}

// The following metadata must not be deleted or modified:
option (cisco_file).metadata="{\"bag\": \"policy_stats\", \"v_maj\": 110, \"version\": 1.0, \"bytecode\": \"$63={NodeName}P42x%S{PolicyName}65s{State}[policy_state_en]e{StateDescription}128s{class_stats}a($64){Satid}D;$5={value}D{unit}[policy_param_unit_type_]e;$55={TransmitPackets}H{TransmitBytes}H{TotalDropPackets}H{TotalDropBytes}H{TotalDropRate}D{MatchDataRate}D{TotalTransmitRate}D{PrePolicyMatchedPackets}H{PrePolicyMatchedBytes}H;$56={ConformClassConformPackets}H{ConformClassConformBytes}H{ConformClassConformRate}D{ConformClassExceedPackets}H{ConformClassExceedBytes}H{ConformClassExceedRate}D{ConformClassViolatePackets}H{ConformClassViolateBytes}H{ConformClassViolateRate}D{ExceedClassExceedPackets}H{ExceedClassExceedBytes}H{ExceedClassExceedRate}D{ExceedClassViolatePackets}H{ExceedClassViolateBytes}H{ExceedClassViolateRate}D{ViolateClassViolatePackets}H{ViolateClassViolateBytes}H{ViolateClassViolateRate}D;$57={DropPackets}H{DropBytes}H{ConformPackets}H{ConformBytes}H{ExceedPackets}H{ExceedBytes}H{ViolatePackets}H{ViolateBytes}H{ParentDropPackets}H{ParentDropBytes}H{ConformRate}D{ExceedRate}D{ViolateRate}D{ColorClassStats}p($56);$58={DropPackets}H{DropBytes}H{DropRates}D{Admitpackets}H{AdmitBytes}H{AdmitRates}D;$59={NonTCP_TotalOutPackets}H{NonTCP_TotalOutBytes}H{NonTCP_BytesSaved}H{NonTcp_CompressedPacketsOut}H{NonTCP_BytesSentRate}D{NonTCP_FullHeaderPacketsOut}H{TCP_TotalOutPackets}H{TCP_TotalOutBytes}H{TCP_BytesSaved}H{TCP_CompressedPacketsOut}H{TCP_BytesSentRate}D{TCP_FullHeaderPacketsOut}H;$60={QueueID}D{TailDropPackets}H{TailDropBytes}H{atm_clp0_drop_pkts}PH{atm_clp0_drop_bytes}PH{atm_clp1_drop_pkts}PH{atm_clp1_drop_bytes}PH{ATM_CLP0DropPackets}p(H){ATM_CLP0DropBytes}p(H){ATM_CLP1DropPackets}p(H){ATM_CLP1DropBytes}p(H){QueueInstanceLength}a($5){QueueAverageLength}a($5){QueueMaxLength}a($5){QueueDropThreshold}D{ForcedWREDStatsDisplay}b{RandomDropPackets}H{RandomDropBytes}H{MaxThresholdPackets}H{MaxThresholdBytes}H{ConformPackets}H{ConformBytes}H{ExceedPackets}H{ExceedBytes}H{ConformRate}D{ExceedRate}D;$61={WREDType}[wred_type_en_]e{value}C;$62={ProfileTitle}300s{REDLabel}a($61){REDTransmitPackets}H{REDTransmitBytes}H{RandomDropPackets}H{RandomDropBytes}H{MaxThresholdPackets}H{MaxThresholdBytes}H{RED_ECNMarkedPackets}H{RED_ECNMarkedBytes}H;$64={CounterValidityBitmask}H{ClassName}65s{system_added_default_class}PC{SharedQueueID}p(D){QueueDescr}256s{CACState}[cac_state_en]e{GeneralStats}$55{QueueStatsArray}a($60){PoliceStatsArray}a($57){WREDStatsArray}a($62){IphcStats}p($59){ChildPolicy}p($63){CACStats}p($58);\", \"schema_names\": [[\"RootOper.QOS.Interface(InterfaceName)\", \"\"]], \"subtypes\": {\"64\": \"class_stats\", \"5\": \"policy_param_uint32_st_\", \"55\": \"gen_stats_st\", \"56\": \"plc_color_class_stats_st\", \"57\": \"plc_stats_st\", \"58\": \"cac_stats_st\", \"59\": \"iphc_stats_st\", \"60\": \"q_stats_st\", \"61\": \"wred_type_value\", \"62\": \"red_profile_stats\"}, \"enums\": {\"policy_state_en\": {\"0\": \"Active\", \"1\": \"Suspended\"}, \"wred_type_en_\": {\"0\": \"WRED_COS_CMD\", \"1\": \"WRED_DSCP_CMD\", \"2\": \"WRED_PRECEDENCE_CMD\", \"3\": \"WRED_DISCARD_CLASS_CMD\", \"4\": \"WRED_MPLS_EXP_CMD\", \"5\": \"RED_WITH_USER_MIN_MAX\", \"6\": \"RED_WITH_DEFAULT_MIN_MAX\", \"7\": \"WRED_DEI_CMD\", \"8\": \"WRED_ECN_CMD\", \"9\": \"WRED_INVALID_CMD\"}, \"policy_param_unit_type_\": {\"0\": \"POLICY_PARAM_UNIT_INVALID\", \"1\": \"POLICY_PARAM_UNIT_BYTES\", \"2\": \"POLICY_PARAM_UNIT_KBYTES\", \"3\": \"POLICY_PARAM_UNIT_MBYTES\", \"4\": \"POLICY_PARAM_UNIT_GBYTES\", \"5\": \"POLICY_PARAM_UNIT_BITSPS\", \"6\": \"POLICY_PARAM_UNIT_KBITSPS\", \"7\": \"POLICY_PARAM_UNIT_MBITSPS\", \"8\": \"POLICY_PARAM_UNIT_GBITSPS\", \"9\": \"POLICY_PARAM_UNIT_CELLSPS\", \"10\": \"POLICY_PARAM_UNIT_PACKETSPS\", \"11\": \"POLICY_PARAM_UNIT_US\", \"12\": \"POLICY_PARAM_UNIT_MS\", \"13\": \"POLICY_PARAM_UNIT_SECONDS\", \"14\": \"POLICY_PARAM_UNIT_PACKETS\", \"15\": \"POLICY_PARAM_UNIT_CELLS\", \"16\": \"POLICY_PARAM_UNIT_PERCENT\", \"17\": \"POLICY_PARAM_UNIT_PERTHOUSAND\", \"18\": \"POLICY_PARAM_UNIT_PERMILLION\", \"19\": \"POLICY_PARAM_UNIT_HZ\", \"20\": \"POLICY_PARAM_UNIT_KHZ\", \"21\": \"POLICY_PARAM_UNIT_MHZ\", \"22\": \"POLICY_PARAM_UNIT_RATIO\", \"23\": \"POLICY_PARAM_UNIT_MAX\"}, \"cac_state_en\": {\"0\": \"Unknown\", \"1\": \"ADMIT\", \"2\": \"REDIRECT\", \"3\": \"UBRL\"}}, \"schema_path\": \"RootOper.QOS.Interface.Output.Statistics\", \"v_min\": 0}";
