// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto2";

import "cisco.proto";

message mpls_te_p2mp_tunnel_bag {
    option (cisco_msg).schema_path = "RootOper.MPLS_TE.P2P_P2MPTunnel.TunnelHead";

    optional string tunnel_name = 1 [(cisco_field).path_element="RootOper.MPLS_TE.P2P_P2MPTunnel.TunnelHead(TunnelName)"];
    optional bool role_standby = 50 [(cisco_field).name="RoleStandby"];
    optional uint32 tunnel_interface_name = 51 [(cisco_field).name="TunnelInterfaceName"];
    optional mpls_te_p2mp_tun_cfg_bag config = 52 [(cisco_field).name="Config"];
    optional string admin_state = 53 [(cisco_field).name="AdminState"];
    optional string operational_state = 54 [(cisco_field).name="OperationalState"];
    optional uint32 operational_state_changes = 55 [(cisco_field).name="OperationalStateChanges"];
    optional string signaled_name = 56 [(cisco_field).name="SignaledName"];
    optional string fail_reason = 57 [(cisco_field).name="FailReason"];
    optional uint32 destination_up_count = 58 [(cisco_field).name="DestinationUpCount"];
    optional uint32 destination_disabled_count = 59 [(cisco_field).name="DestinationDisabledCount"];
    optional uint32 destination_down_count = 60 [(cisco_field).name="DestinationDownCount"];
    repeated mpls_te_p2mp_dest destinations = 61 [(cisco_field).name="Destinations"];
    optional mpls_te_p2mp_lsp tunnel_current_lsp = 62 [(cisco_field).name="TunnelCurrentLSP"];
    optional uint32 re_opt_hold_down_timer_remaining = 69 [(cisco_field).name="ReOptHoldDownTimerRemaining"];
    optional uint32 bandwidth_requested = 70 [(cisco_field).name="BandwidthRequested"];
    optional string bandwidth_type = 71 [(cisco_field).name="BandwidthType"];
    optional uint32 current_lsp_bandwidth_requested = 72 [(cisco_field).name="CurrentLSPBandwidthRequested"];
    optional string current_lsp_bandwidth_requested_type = 73 [(cisco_field).name="CurrentLSPBandwidthRequestedType"];
    optional uint32 standby_lsp_bandwidth_requested = 74 [(cisco_field).name="StandbyLSPBandwidthRequested"];
    optional string standby_lsp_bandwidth_requested_type = 75 [(cisco_field).name="StandbyLSPBandwidthRequestedType"];
    optional uint32 reopt_lsp_bandwidth_requested = 76 [(cisco_field).name="ReoptLSPBandwidthRequested"];
    optional string reopt_lsp_bandwidth_requested_type = 77 [(cisco_field).name="ReoptLSPBandwidthRequestedType"];
    optional uint32 standby_reopt_lsp_bandwidth_requested = 78 [(cisco_field).name="StandbyReoptLSPBandwidthRequested"];
    optional string standby_reopt_lsp_bandwidth_requested_type = 79 [(cisco_field).name="StandbyReoptLSPBandwidthRequestedType"];
    optional bool is_node_protected = 80 [(cisco_field).name="IsNodeProtected"];
    optional bool is_bandwidth_protect = 81 [(cisco_field).name="IsBandwidthProtect"];
    optional bool tunnel_recovering = 82 [(cisco_field).name="TunnelRecovering"];
    optional bool reroute_pending = 83 [(cisco_field).name="ReroutePending"];
    optional bool affinity_failure_reopt_disabled = 84 [(cisco_field).name="AffinityFailureReoptDisabled"];
    optional uint32 affinity_failure_reopt_time_remained = 85 [(cisco_field).name="AffinityFailureReoptTimeRemained"];
    optional uint32 affinity_failure_delayed_tear_time_remained = 86 [(cisco_field).name="AffinityFailureDelayedTearTimeRemained"];
    optional uint32 invalidation_time_remained = 87 [(cisco_field).name="InvalidationTimeRemained"];
    optional bool drop_mode = 88 [(cisco_field).name="DropMode"];
    optional bool auto_route = 89 [(cisco_field).name="AutoRoute"];
    optional bool forwarding_adjacency = 90 [(cisco_field).name="ForwardingAdjacency"];
    optional uint32 load_share_factor = 91 [(cisco_field).name="LoadShareFactor"];
    optional string load_share_type = 92 [(cisco_field).name="LoadShareType"];
    optional uint32 create_time = 93 [(cisco_field).name="CreateTime"];
    optional uint32 uptime = 94 [(cisco_field).name="Uptime"];
    optional string metric_type = 95 [(cisco_field).name="MetricType"];
    optional uint32 tiebreaker_type = 96 [(cisco_field).name="TiebreakerType"];
    optional string tiebreaker_qualifier = 97 [(cisco_field).name="TiebreakerQualifier"];
    optional string metric_qualifier = 98 [(cisco_field).name="MetricQualifier"];
    optional bool is_hop_limit_ignore = 99 [(cisco_field).name="IsHopLimitIgnore"];
    optional string hop_limit_ignored_reason = 100 [(cisco_field).name="HopLimitIgnoredReason"];
    optional string outbound_frr_state = 101 [(cisco_field).name="OutboundFRRState"];
    optional string area_id = 102 [(cisco_field).name="AreaID"];
    optional mpls_te_p2p_info_bag p2_p_info = 103 [(cisco_field).name="P2PInfo"];
    optional string pce_fail_reason = 104 [(cisco_field).name="PCEFailReason"];
    optional uint32 snmp_index = 105 [(cisco_field).name="SNMPIndex"];
    optional mpls_te_tunnels_history_bag history = 106 [(cisco_field).name="History"];
    optional mpls_te_pp_info path_protection = 107 [(cisco_field).name="PathProtection"];
    optional bool is_inter_area_tunnel = 108 [(cisco_field).name="IsInterAreaTunnel"];
    optional mpls_te_autobackup_info auto_backup = 109 [(cisco_field).name="AutoBackup"];
    optional bool is_auto_backup = 110 [(cisco_field).name="IsAutoBackup"];
    optional mpls_te_automesh_info auto_mesh = 111 [(cisco_field).name="AutoMesh"];
    optional bool is_auto_pcc = 112 [(cisco_field).name="IsAutoPCC"];
    optional mpls_te_autopcc_info auto_pcc = 113 [(cisco_field).name="AutoPCC"];
    optional bool is_pce_delegated = 114 [(cisco_field).name="IsPCEDelegated"];
    optional mpls_te_pce_delegation_info pce_delegation = 115 [(cisco_field).name="PCEDelegation"];
    optional string tunnel_attribute_set_name = 116 [(cisco_field).name="TunnelAttributeSetName"];
    optional string tunnel_attribute_set_type = 117 [(cisco_field).name="TunnelAttributeSetType"];
    optional mpls_te_soft_preemption_tunnel_info soft_preemption = 118 [(cisco_field).name="SoftPreemption"];
    optional hasi_m_object_ctx master_context = 119 [(cisco_field).name="MasterContext"];
    optional hasi_s_object_ctx slave_context = 120 [(cisco_field).name="SlaveContext"];
    optional mpls_te_mgmt_wdm_uni_tunnel_info wdm_uni_tunnel = 121 [(cisco_field).name="WDM_UNITunnel"];
    optional mpls_te_transport_tunnel_info transport_tunnel_info = 122 [(cisco_field).name="TransportTunnelInfo"];
    optional mpls_te_tunnel_bfd_info bfd_info = 123 [(cisco_field).name="BFDInfo"];
    optional mpls_te_tunnel_otn_bidir_info otn_bidir = 124 [(cisco_field).name="OTNBidir"];
    optional mpls_te_tunnel_bidir_info bidir = 125 [(cisco_field).name="Bidir"];
    optional string xro_attribute_set_name = 126 [(cisco_field).name="XROAttributeSetName"];
    optional mpls_te_attribute_set xro_attribute_set = 127 [(cisco_field).name="XROAttributeSet"];
    optional te_vif_convergence_info te_tunnel_convergence = 128 [(cisco_field).name="TETunnelConvergence"];
    optional te_service_info service_info = 129 [(cisco_field).name="ServiceInfo"];
    optional bool is_passive = 130 [(cisco_field).name="IsPassive"];
    optional string passive_tunnel_name = 131 [(cisco_field).name="PassiveTunnelName"];
    optional mpls_te_tunnel_flex_info flex_info = 132 [(cisco_field).name="FlexInfo"];
    optional bool binding_label_exists = 133 [(cisco_field).name="BindingLabelExists"];
    optional uint32 binding_label = 134 [(cisco_field).name="BindingLabel"];
    optional uint32 last_hop_ifindex = 135 [(cisco_field).name="LastHopIfindex"];
}

message rsvp_ng_api_stats_entry_bag {
    optional uint64 count = 1 [(cisco_field).name="Count"];
}

message rsvp_ng_api_stats_bag {
    optional string ctx_event_type = 1 [(cisco_field).name="CTXEventType"];
    optional string ctrl_event_type = 2 [(cisco_field).name="CtrlEventType"];
    optional rsvp_ng_api_stats_entry_bag scheduled = 3 [(cisco_field).name="Scheduled"];
    optional rsvp_ng_api_stats_entry_bag tx = 4 [(cisco_field).name="Tx"];
    optional rsvp_ng_api_stats_entry_bag rx = 5 [(cisco_field).name="Rx"];
    optional rsvp_ng_api_stats_entry_bag drop_tx = 6 [(cisco_field).name="DropTx"];
    optional rsvp_ng_api_stats_entry_bag drop_rx = 7 [(cisco_field).name="DropRx"];
    optional rsvp_ng_api_stats_entry_bag postponed_tx = 8 [(cisco_field).name="PostponedTx"];
}

message rsvp_ng_api_ctx_event_bag {
    optional string type = 1 [(cisco_field).name="Type"];
    optional uint64 producer_summary_replay_id = 2 [(cisco_field).name="ProducerSummaryReplayID"];
    optional bool is_sent = 3 [(cisco_field).name="IsSent"];
    optional uint32 age = 4 [(cisco_field).name="Age"];
    optional string filter_reason = 5 [(cisco_field).name="FilterReason"];
}

message rsvp_ng_api_ctx_history {
    optional uint32 timestamp = 1 [(cisco_field).name="Timestamp"];
    optional string event_type = 2 [(cisco_field).name="EventType"];
    repeated uint32 event_data = 3 [(cisco_field).name="EventData"];
}

message rsvp_ng_api_ctx_bag {
    optional uint64 producer_summary_replay_id = 1 [(cisco_field).name="ProducerSummaryReplayID"];
    optional uint32 producer_summary_replay_base_id = 2 [(cisco_field).name="ProducerSummaryReplayBaseID"];
    optional uint64 consumer_summary_replay_id = 3 [(cisco_field).name="ConsumerSummaryReplayID"];
    optional uint32 consumer_summary_replay_base_id = 4 [(cisco_field).name="ConsumerSummaryReplayBaseID"];
    optional uint32 flags = 5 [(cisco_field).name="Flags"];
    optional string origin = 6 [(cisco_field).name="Origin"];
    repeated rsvp_ng_api_stats_bag statistics = 7 [(cisco_field).name="Statistics"];
    repeated rsvp_ng_api_ctx_event_bag events = 8 [(cisco_field).name="Events"];
    repeated rsvp_ng_api_ctx_history history = 9 [(cisco_field).name="history"];
    optional uint64 slave_producer_summary_replay_id = 10 [(cisco_field).name="SlaveProducerSummaryReplayID"];
    optional uint64 slave_consumer_summary_replay_id = 11 [(cisco_field).name="SlaveConsumerSummaryReplayID"];
}

message rsvp_mgmt_ero_ipv4_subobj {
    optional bool is_strict_route = 1 [(cisco_field).name="IsStrictRoute"];
    optional bytes ero_address = 2 [(cisco_field).name="EROAddress"];
    optional uint32 prefix_length = 3 [(cisco_field).name="PrefixLength"];
}

message rsvp_mgmt_ero_unnum_subobj {
    optional bool is_strict_route = 1 [(cisco_field).name="IsStrictRoute"];
    optional uint32 ero_interface_id = 2 [(cisco_field).name="EROInterfaceID"];
    optional bytes ero_router_id = 3 [(cisco_field).name="ERORouterID"];
}

message rsvp_mgmt_ero_subobj {
    optional string ero_type = 1 [(cisco_field).name="EROType"];
    optional rsvp_mgmt_ero_ipv4_subobj ipv4_ero_sub_object = 2 [(cisco_field).name="IPV4EROSubObject"];
    optional rsvp_mgmt_ero_unnum_subobj unnumbered_ero_sub_object = 3 [(cisco_field).name="UnnumberedEROSubObject"];
}

message rsvp_mgmt_rro_ipv4_subobj_flags {
    optional bool is_protection_available = 1 [(cisco_field).name="IsProtectionAvailable"];
    optional bool is_protection_in_use = 2 [(cisco_field).name="IsProtectionInUse"];
    optional bool is_bandwidth_protected = 3 [(cisco_field).name="IsBandwidthProtected"];
    optional bool is_node_protection_available = 4 [(cisco_field).name="IsNodeProtectionAvailable"];
    optional bool is_node_id = 5 [(cisco_field).name="IsNodeID"];
}

message rsvp_mgmt_rro_label_subobj_flags {
    optional bool is_global_label = 1 [(cisco_field).name="IsGlobalLabel"];
}

message rsvp_mgmt_rro_unnumbered_subobj_flags {
    optional bool is_protection_available = 1 [(cisco_field).name="IsProtectionAvailable"];
    optional bool is_protection_in_use = 2 [(cisco_field).name="IsProtectionInUse"];
    optional bool is_bandwidth_protected = 3 [(cisco_field).name="IsBandwidthProtected"];
    optional bool is_node_protection_available = 4 [(cisco_field).name="IsNodeProtectionAvailable"];
    optional bool is_node_id = 5 [(cisco_field).name="IsNodeID"];
}

message rsvp_mgmt_rro_ipv4_subobj {
    optional rsvp_mgmt_rro_ipv4_subobj_flags flags = 1 [(cisco_field).name="Flags"];
    optional bytes rro_address = 2 [(cisco_field).name="RROAddress"];
}

message rsvp_mgmt_rro_label_subobj {
    optional rsvp_mgmt_rro_label_subobj_flags flags = 1 [(cisco_field).name="Flags"];
    optional uint32 label = 2 [(cisco_field).name="Label"];
    optional bool is_label_variable_length = 3 [(cisco_field).name="IsLabelVariableLength"];
    repeated uint32 variable_length_label = 4 [(cisco_field).name="VariableLengthLabel"];
}

message rsvp_mgmt_rro_unnumbered_subobj {
    optional rsvp_mgmt_rro_unnumbered_subobj_flags flags = 1 [(cisco_field).name="Flags"];
    optional bytes interface_address = 2 [(cisco_field).name="InterfaceAddress"];
    optional uint32 interface_id = 3 [(cisco_field).name="InterfaceID"];
}

message rsvp_mgmt_rro_srlg_subobj {
    repeated uint32 srl_gs = 1 [(cisco_field).name="SRLGs"];
}

message rsvp_mgmt_rro_subobj {
    optional string rro_type = 1 [(cisco_field).name="RROType"];
    optional rsvp_mgmt_rro_ipv4_subobj ipv4_rro_sub_object = 2 [(cisco_field).name="IPV4RROSubObject"];
    optional rsvp_mgmt_rro_label_subobj label_rro_sub_object = 3 [(cisco_field).name="LabelRROSubObject"];
    optional rsvp_mgmt_rro_unnumbered_subobj unnumbered_rro_sub_object = 4 [(cisco_field).name="UnnumberedRROSubObject"];
    optional rsvp_mgmt_rro_srlg_subobj srlg_rro_sub_object = 5 [(cisco_field).name="SRLG_RROSubObject"];
}

message te_s2l_fec_t {
    optional uint32 s2_l_fec_subgroup_id = 1 [(cisco_field).name="S2L_FECSubgroupID"];
    optional uint32 s2_l_fec_lsp_id = 2 [(cisco_field).name="S2L_FEC_LSP_ID"];
    optional uint32 s2_l_fec_tunnel_id = 3 [(cisco_field).name="S2L_FECTunnelID"];
    optional bytes s2_l_fec_extended_tunnel_id = 4 [(cisco_field).name="S2L_FECExtendedTunnelID"];
    optional bytes s2_l_fec_source = 5 [(cisco_field).name="S2L_FECSource"];
    optional bytes s2_l_fec_dest = 6 [(cisco_field).name="S2L_FECDest"];
    optional uint32 s2_l_fec_p2_mp_id = 7 [(cisco_field).name="S2L_FEC_P2MP_ID"];
    optional bytes s2_l_fec_subgroup_originator = 8 [(cisco_field).name="S2L_FECSubgroupOriginator"];
    optional string s2_l_fec_c_type = 9 [(cisco_field).name="S2L_FEC_CType"];
    optional uint32 s2_l_fec_vrf = 10 [(cisco_field).name="S2L_FEC_VRF"];
}

message te_addr_type_ipv4_unnum {
    optional bytes router_id = 1 [(cisco_field).name="RouterID"];
    optional uint32 interface_index = 2 [(cisco_field).name="InterfaceIndex"];
}

message addr {
    optional string type = 1 [(cisco_field).name="Type"];
    optional bytes ipv4_address = 2 [(cisco_field).name="IPv4Address"];
    optional te_addr_type_ipv4_unnum ipv4_unnumbered_address = 3 [(cisco_field).name="IPv4UnnumberedAddress"];
}

message te_addr_t_ {
    optional addr te_addr = 1 [(cisco_field).name="TEAddr"];
}

message mpls_te_tunnel_egress_static_uni_info {
    optional te_addr_t_ egress_port = 1 [(cisco_field).name="EgressPort"];
    optional string local_termination = 2 [(cisco_field).name="LocalTermination"];
    optional string remote_uni_type = 3 [(cisco_field).name="RemoteUniType"];
    optional te_addr_t_ term_egress_port = 4 [(cisco_field).name="TermEgressPort"];
}

message te_lsp_fec_ctype_data_t {
    optional string fec_c_type = 1 [(cisco_field).name="FEC_CType"];
    optional bytes p2_p_lsp_destination = 2 [(cisco_field).name="P2P_LSPDestination"];
    optional uint32 fec_destination_p2_mp_id = 3 [(cisco_field).name="FECDestinationP2MP_ID"];
}

message te_lsp_fec_t {
    optional uint32 fec_lsp_id = 1 [(cisco_field).name="FEC_LSP_ID"];
    optional uint32 fec_tunnel_id = 2 [(cisco_field).name="FECTunnelID"];
    optional bytes fec_extended_tunnel_id = 3 [(cisco_field).name="FECExtendedTunnelID"];
    optional bytes fec_source = 4 [(cisco_field).name="FECSource"];
    optional te_lsp_fec_ctype_data_t fec_destination_info = 5 [(cisco_field).name="FECDestinationInfo"];
    optional uint32 fec_vrf = 6 [(cisco_field).name="FEC_VRF"];
}

message affinity_name_bag {
    optional uint32 constraint_type = 1 [(cisco_field).name="ConstraintType"];
    optional uint32 constraint_value = 2 [(cisco_field).name="ConstraintValue"];
    optional uint32 forward_ref_value = 3 [(cisco_field).name="ForwardRefValue"];
    repeated uint32 constraint_extended_value = 4 [(cisco_field).name="ConstraintExtendedValue"];
    repeated uint32 extended_forward_ref_value = 5 [(cisco_field).name="ExtendedForwardRefValue"];
}

message mpls_te_tunnels_affinity_info {
    optional uint32 affinity_bits = 1 [(cisco_field).name="AffinityBits"];
    optional uint32 affinity_mask = 2 [(cisco_field).name="AffinityMask"];
    repeated affinity_name_bag named_affinities = 3 [(cisco_field).name="NamedAffinities"];
}

message mpls_srlg_info {
    optional uint32 shared_risk_group = 1 [(cisco_field).name="SharedRiskGroup"];
    optional string srlg_name = 2 [(cisco_field).name="SRLGName"];
}

message mpls_te_bfd_lsp_counters {
    optional uint32 session_create_events = 1 [(cisco_field).name="SessionCreateEvents"];
    optional uint32 session_up_events = 2 [(cisco_field).name="SessionUpEvents"];
    optional uint32 session_creation_failed_events = 3 [(cisco_field).name="SessionCreationFailedEvents"];
    optional uint32 session_down_events = 4 [(cisco_field).name="SessionDownEvents"];
    optional uint32 session_admin_down_events = 5 [(cisco_field).name="SessionAdminDownEvents"];
    optional uint32 session_gracefully_delete_events = 6 [(cisco_field).name="SessionGracefullyDeleteEvents"];
    optional uint32 session_non_gracefully_delete_events = 7 [(cisco_field).name="SessionNonGracefullyDeleteEvents"];
    optional uint32 session_create_timeout_events = 8 [(cisco_field).name="SessionCreateTimeoutEvents"];
    optional uint32 session_replay_events = 9 [(cisco_field).name="SessionReplayEvents"];
}

message te_xro_subobj_ipv4 {
    optional bytes address = 1 [(cisco_field).name="Address"];
    optional uint32 prefix_len = 2 [(cisco_field).name="PrefixLen"];
    optional string attribute = 3 [(cisco_field).name="Attribute"];
    optional string exclusion_type = 4 [(cisco_field).name="ExclusionType"];
}

message te_xro_subobj_ipv6 {
    optional bytes address = 1 [(cisco_field).name="Address"];
    optional uint32 prefix_len = 2 [(cisco_field).name="PrefixLen"];
    optional string attribute = 3 [(cisco_field).name="Attribute"];
    optional string exclusion_type = 4 [(cisco_field).name="ExclusionType"];
}

message te_xro_subobj_unnum {
    optional bytes te_router_id = 1 [(cisco_field).name="TERouterID"];
    optional uint32 interface_id = 2 [(cisco_field).name="InterfaceID"];
    optional string attribute = 3 [(cisco_field).name="Attribute"];
    optional string exclusion_type = 4 [(cisco_field).name="ExclusionType"];
}

message te_xro_subobj_as {
    optional uint32 as_number = 1 [(cisco_field).name="ASNumber"];
}

message te_xro_subobj_srlg {
    optional uint32 srlg_id = 1 [(cisco_field).name="SRLG_ID"];
    optional string exclusion_type = 2 [(cisco_field).name="ExclusionType"];
}

message te_xro_subobj_p2p_lsp {
    optional te_lsp_fec_t fec = 1 [(cisco_field).name="FEC"];
    optional bool ignore_lsp_id = 2 [(cisco_field).name="IgnoreLSP_ID"];
    optional bool processing_node_exception = 3 [(cisco_field).name="ProcessingNodeException"];
    optional bool penultimate_node_exception = 4 [(cisco_field).name="PenultimateNodeException"];
    optional bool destination_node_exception = 5 [(cisco_field).name="DestinationNodeException"];
    optional string exclusion_type = 6 [(cisco_field).name="ExclusionType"];
}

message te_xro_subobj {
    optional string type = 1 [(cisco_field).name="Type"];
    optional te_xro_subobj_ipv4 ipv4_subobject = 2 [(cisco_field).name="IPv4Subobject"];
    optional te_xro_subobj_ipv6 ipv6_subobject = 3 [(cisco_field).name="IPv6Subobject"];
    optional te_xro_subobj_unnum unnumbered_subobject = 4 [(cisco_field).name="UnnumberedSubobject"];
    optional te_xro_subobj_as as_subobject = 5 [(cisco_field).name="ASSubobject"];
    optional te_xro_subobj_srlg srlg_subobject = 6 [(cisco_field).name="SRLGSubobject"];
    optional te_xro_subobj_p2p_lsp lsp_subobject = 7 [(cisco_field).name="LSPSubobject"];
}

message te_xro {
    repeated te_xro_subobj xro_subobjects = 1 [(cisco_field).name="XROSubobjects"];
}

message hasi_id_event {
    optional uint64 local_id = 1 [(cisco_field).name="LocalID"];
    optional uint64 remore_id = 2 [(cisco_field).name="RemoreID"];
    optional uint32 time = 3 [(cisco_field).name="Time"];
    optional uint64 count = 4 [(cisco_field).name="Count"];
}

message hasi_s_obj_id_events {
    optional hasi_id_event create = 1 [(cisco_field).name="Create"];
    optional hasi_id_event updates = 2 [(cisco_field).name="Updates"];
    optional hasi_id_event application_syncs = 3 [(cisco_field).name="ApplicationSyncs"];
    optional hasi_id_event application_naks = 4 [(cisco_field).name="ApplicationNaks"];
    optional hasi_id_event summary_replay_syncs = 5 [(cisco_field).name="SummaryReplaySyncs"];
    optional hasi_id_event summary_replay_naks = 6 [(cisco_field).name="SummaryReplayNaks"];
    optional hasi_id_event cache_nak_retries = 7 [(cisco_field).name="CacheNakRetries"];
}

message hasi_s_object_ctx {
    optional uint64 object_sync_id = 1 [(cisco_field).name="ObjectSyncID"];
    optional uint32 object_type = 2 [(cisco_field).name="ObjectType"];
    optional hasi_s_obj_id_events object_id_events = 3 [(cisco_field).name="ObjectIdEvents"];
}

message hasi_m_id_events {
    optional hasi_id_event application_syncs = 1 [(cisco_field).name="ApplicationSyncs"];
    optional hasi_id_event implicit_deletes = 2 [(cisco_field).name="ImplicitDeletes"];
    optional hasi_id_event application_naks = 3 [(cisco_field).name="ApplicationNaks"];
    optional hasi_id_event summary_replay_syncs = 4 [(cisco_field).name="SummaryReplaySyncs"];
    optional hasi_id_event summary_replay_naks = 5 [(cisco_field).name="SummaryReplayNaks"];
}

message hasi_m_object_slave_info {
    optional uint32 slave_id = 1 [(cisco_field).name="SlaveId"];
    optional hasi_m_id_events id_events = 2 [(cisco_field).name="IdEvents"];
}

message hasi_m_object_ctx {
    optional uint64 object_sync_id = 1 [(cisco_field).name="ObjectSyncID"];
    optional uint32 object_type = 2 [(cisco_field).name="ObjectType"];
    optional uint32 queue = 3 [(cisco_field).name="Queue"];
    optional uint64 create_id = 4 [(cisco_field).name="CreateID"];
    optional uint32 create_time = 5 [(cisco_field).name="CreateTime"];
    optional uint32 update_time = 6 [(cisco_field).name="UpdateTime"];
    optional uint32 delete_time = 7 [(cisco_field).name="DeleteTime"];
    optional uint32 delete_ctx_lenght = 8 [(cisco_field).name="DeleteCtxLenght"];
    repeated hasi_m_object_slave_info slave_information = 9 [(cisco_field).name="SlaveInformation"];
    optional bool has_history = 10 [(cisco_field).name="HasHistory"];
    optional hasi_s_obj_id_events pre_active_history = 11 [(cisco_field).name="PreActiveHistory"];
}

message te_serv_p2mp_auto_tun {
    optional uint32 context = 1 [(cisco_field).name="Context"];
    optional string client = 2 [(cisco_field).name="Client"];
    optional bytes source = 3 [(cisco_field).name="Source"];
    optional string attribute_set_name = 4 [(cisco_field).name="AttributeSetName"];
    optional bool attribute_set_resloved = 5 [(cisco_field).name="AttributeSetResloved"];
    repeated uint32 egress_information = 6 [(cisco_field).name="EgressInformation"];
    optional uint32 state = 7 [(cisco_field).name="State"];
    optional uint32 result = 8 [(cisco_field).name="Result"];
    optional uint64 updated = 9 [(cisco_field).name="Updated"];
    optional bool needs_replay = 10 [(cisco_field).name="NeedsReplay"];
}

message te_serv_p2p_auto_tun {
    optional uint32 context = 1 [(cisco_field).name="Context"];
    optional string protocol_tyoe = 2 [(cisco_field).name="ProtocolTyoe"];
    optional string client_instance_name = 3 [(cisco_field).name="ClientInstanceName"];
    optional bytes next_hop = 4 [(cisco_field).name="NextHop"];
    optional string explicit_path = 5 [(cisco_field).name="ExplicitPath"];
    optional string attribute_set_name = 6 [(cisco_field).name="AttributeSetName"];
    optional bool attribute_set_resolved = 7 [(cisco_field).name="AttributeSetResolved"];
    optional uint64 updated = 8 [(cisco_field).name="Updated"];
    optional bool needs_replay = 9 [(cisco_field).name="NeedsReplay"];
    optional bool ipv6_caps_requested = 10 [(cisco_field).name="Ipv6CapsRequested"];
    optional bool ipv6_caps_enabled = 11 [(cisco_field).name="Ipv6CapsEnabled"];
}

message te_serv_p2mp_einfo {
    optional string client = 1 [(cisco_field).name="Client"];
    optional uint32 state = 2 [(cisco_field).name="State"];
    optional uint32 result = 3 [(cisco_field).name="Result"];
    repeated uint32 egress_information = 4 [(cisco_field).name="EgressInformation"];
    optional uint64 updated = 5 [(cisco_field).name="Updated"];
    optional bool needs_replay = 6 [(cisco_field).name="NeedsReplay"];
}

message mpls_te_p2mp_fsm_event_counts {
    repeated uint32 counts = 1 [(cisco_field).name="Counts"];
}

message mpls_te_p2mp_fsm_event_stat {
    optional uint32 event_time = 1 [(cisco_field).name="EventTime"];
    optional string previous_state = 2 [(cisco_field).name="PreviousState"];
    optional string next_state = 3 [(cisco_field).name="NextState"];
    optional string event_id = 4 [(cisco_field).name="EventID"];
}

message mpls_te_p2mp_fsm_info {
    optional string s2_l_fsm_state = 1 [(cisco_field).name="S2L_FSMState"];
    optional uint32 s2_l_flags = 2 [(cisco_field).name="S2LFlags"];
    optional string deletion_cause = 3 [(cisco_field).name="DeletionCause"];
    optional string deletion_subcause = 4 [(cisco_field).name="DeletionSubcause"];
    optional uint32 injected_events = 5 [(cisco_field).name="InjectedEvents"];
    repeated mpls_te_p2mp_fsm_event_stat event_statistics = 6 [(cisco_field).name="EventStatistics"];
    optional mpls_te_p2mp_fsm_event_counts event_counts = 7 [(cisco_field).name="EventCounts"];
    optional bool path_to_be_received = 8 [(cisco_field).name="PathToBeReceived"];
    optional bool reservation_to_be_received = 9 [(cisco_field).name="ReservationToBeReceived"];
    optional bool label_to_be_received = 10 [(cisco_field).name="LabelToBeReceived"];
    optional bool rewrite_to_be_received = 11 [(cisco_field).name="RewriteToBeReceived"];
    optional bool sync_id_from_rsvp_to_be_received = 12 [(cisco_field).name="sync_id_from_rsvp_to_be_received"];
    optional bool sync_id_from_master_to_be_received = 13 [(cisco_field).name="sync_id_from_master_to_be_received"];
    optional bool frr_active_pending = 14 [(cisco_field).name="frr_active_pending"];
    optional bool config_consistent = 15 [(cisco_field).name="config_consistent"];
    optional bool missing_vif = 16 [(cisco_field).name="missing_vif"];
    optional bool signame_diff = 17 [(cisco_field).name="signame_diff"];
    optional bool frr_diff = 18 [(cisco_field).name="frr_diff"];
    optional bool frr_np_diff = 19 [(cisco_field).name="frr_np_diff"];
    optional bool frr_bwp_diff = 20 [(cisco_field).name="frr_bwp_diff"];
    optional bool record_route_diff = 21 [(cisco_field).name="record_route_diff"];
    optional bool soft_preemption_diff = 22 [(cisco_field).name="soft_preemption_diff"];
}

message te_serv_p2mp_einfos {
    repeated te_serv_p2mp_einfo service_infos = 1 [(cisco_field).name="ServiceInfos"];
}

message te_service_info {
    optional string service_type = 1 [(cisco_field).name="ServiceType"];
    optional te_serv_p2mp_einfos vif_egress_info = 2 [(cisco_field).name="VIFEgressInfo"];
    optional te_serv_p2mp_einfos s2_l_egress_info = 3 [(cisco_field).name="S2LEgressInfo"];
    optional te_serv_p2mp_auto_tun vif_auto_tunnel_info = 4 [(cisco_field).name="VIFAutoTunnelInfo"];
    optional te_serv_p2p_auto_tun vif_auto_tunnel_p2_p_info = 5 [(cisco_field).name="VIFAutoTunnelP2PInfo"];
}

message te_odu_flex_cbr_info {
    optional uint32 bit_rate = 1 [(cisco_field).name="BitRate"];
    optional uint32 tolerance = 2 [(cisco_field).name="Tolerance"];
}

message te_odu_flex_gfp_f_res_info {
    optional uint32 bit_rate = 1 [(cisco_field).name="BitRate"];
}

message te_odu_flex_gfp_f_non_res_info {
    optional uint32 bit_rate = 1 [(cisco_field).name="BitRate"];
}

message te_odu_v3_bw {
    optional string odu_level = 1 [(cisco_field).name="ODULevel"];
    optional te_odu_flex_cbr_info odu_flex_cbr = 2 [(cisco_field).name="ODUFlexCBR"];
    optional te_odu_flex_gfp_f_res_info odu_flex_gfp_f_res = 3 [(cisco_field).name="ODUFlexGFP_FRes"];
    optional te_odu_flex_gfp_f_non_res_info odu_flex_gfp_f_non_res = 4 [(cisco_field).name="ODUFlexGFP_FNonRes"];
}

message mpls_te_logging_attributes {
    optional bool lsp_state = 1 [(cisco_field).name="LSPState"];
    optional bool s2_l_state = 2 [(cisco_field).name="S2LState"];
    optional bool lsp_re_route = 3 [(cisco_field).name="LSPReRoute"];
    optional bool lsp_re_opt = 4 [(cisco_field).name="LSPReOpt"];
    optional bool lsp_insufficient_bw = 5 [(cisco_field).name="LSPInsufficientBW"];
    optional bool lsp_bandwidth_change = 6 [(cisco_field).name="LSPBandwidthChange"];
    optional bool lsp_pcalc_failure_logging_enabled = 7 [(cisco_field).name="LSP_PCALCFailureLoggingEnabled"];
    optional bool all_logging_enabled = 8 [(cisco_field).name="AllLoggingEnabled"];
}

message mpls_te_attribute_set_auto_mesh {
    optional uint32 configured_bandwidth = 1 [(cisco_field).name="ConfiguredBandwidth"];
    optional uint32 dste_class_type = 2 [(cisco_field).name="DSTEClassType"];
    optional bool is_bandwidth_configured = 3 [(cisco_field).name="IsBandwidthConfigured"];
    optional uint32 setup_priority = 4 [(cisco_field).name="SetupPriority"];
    optional uint32 hold_priority = 5 [(cisco_field).name="HoldPriority"];
    optional bool is_priority_configured = 6 [(cisco_field).name="IsPriorityConfigured"];
    optional uint32 policy_class = 7 [(cisco_field).name="PolicyClass"];
    repeated uint32 policy_classes = 8 [(cisco_field).name="PolicyClasses"];
    optional bool is_policyclass_configured = 9 [(cisco_field).name="IsPolicyclassConfigured"];
    optional uint32 forward_class = 10 [(cisco_field).name="ForwardClass"];
    optional mpls_te_tunnels_affinity_info affinity = 11 [(cisco_field).name="Affinity"];
    optional bool is_affinity_configured = 12 [(cisco_field).name="IsAffinityConfigured"];
    optional bool fast_reroute = 13 [(cisco_field).name="FastReroute"];
    optional bool frr_node_protection = 14 [(cisco_field).name="FRRNodeProtection"];
    optional bool frr_bandwidth_protection = 15 [(cisco_field).name="FRRBandwidthProtection"];
    optional bool record_route = 16 [(cisco_field).name="RecordRoute"];
    optional bool auto_bandwidth_collect = 17 [(cisco_field).name="AutoBandwidthCollect"];
    optional bool auto_route_announce = 18 [(cisco_field).name="AutoRouteAnnounce"];
    optional bool soft_preemption_configured = 19 [(cisco_field).name="SoftPreemptionConfigured"];
    optional mpls_te_logging_attributes logging = 20 [(cisco_field).name="Logging"];
    optional uint32 bandwidth = 21 [(cisco_field).name="bandwidth"];
    optional uint32 load_share = 22 [(cisco_field).name="LoadShare"];
    optional bool is_interface_bw_configured = 23 [(cisco_field).name="IsInterfaceBWConfigured"];
    repeated uint32 mesh_group_id = 24 [(cisco_field).name="MeshGroupID"];
    repeated uint32 tunnel_id = 25 [(cisco_field).name="TunnelID"];
}

message mpls_te_protected_if_name_str {
    optional string protected_interface = 1 [(cisco_field).name="ProtectedInterface"];
}

message mpls_te_attribute_set_sig_name {
    optional string name = 1 [(cisco_field).name="Name"];
    optional string source_type = 2 [(cisco_field).name="SourceType"];
    optional string protected_interface_type = 3 [(cisco_field).name="ProtectedInterfaceType"];
    optional bool is_mp_addresses = 4 [(cisco_field).name="IsMPAddresses"];
}

message mpls_te_attribute_set_auto_backup {
    optional bool is_signalled_name_configured = 1 [(cisco_field).name="IsSignalledNameConfigured"];
    optional mpls_te_attribute_set_sig_name signalled_name = 2 [(cisco_field).name="SignalledName"];
    optional uint32 setup_priority = 3 [(cisco_field).name="SetupPriority"];
    optional uint32 hold_priority = 4 [(cisco_field).name="HoldPriority"];
    optional bool is_priority_configured = 5 [(cisco_field).name="IsPriorityConfigured"];
    optional uint32 policy_class = 6 [(cisco_field).name="PolicyClass"];
    repeated uint32 policy_classes = 7 [(cisco_field).name="PolicyClasses"];
    optional bool is_policyclass_configured = 8 [(cisco_field).name="IsPolicyclassConfigured"];
    optional mpls_te_tunnels_affinity_info affinity = 9 [(cisco_field).name="Affinity"];
    optional bool is_affinity_configured = 10 [(cisco_field).name="IsAffinityConfigured"];
    optional bool record_route = 11 [(cisco_field).name="RecordRoute"];
    optional mpls_te_logging_attributes logging = 12 [(cisco_field).name="Logging"];
    repeated mpls_te_protected_if_name_str protected_interfaces = 13 [(cisco_field).name="ProtectedInterfaces"];
    repeated uint32 tunnel_id = 14 [(cisco_field).name="TunnelID"];
}

message mpls_te_attribute_set_version {
    optional string attribute_type = 1 [(cisco_field).name="AttributeType"];
    optional uint32 generation = 2 [(cisco_field).name="Generation"];
    optional bool is_default = 3 [(cisco_field).name="IsDefault"];
}

message mpls_te_attribute_set_path_option {
    optional uint32 configured_bandwidth = 1 [(cisco_field).name="ConfiguredBandwidth"];
    optional uint32 cost_limit = 2 [(cisco_field).name="CostLimit"];
    optional uint32 dste_class_type = 3 [(cisco_field).name="DSTEClassType"];
    optional string bandwidth_type = 4 [(cisco_field).name="BandwidthType"];
    optional bool is_bandwidth_configured = 5 [(cisco_field).name="IsBandwidthConfigured"];
    optional bool is_cost_limit_configured = 6 [(cisco_field).name="IsCostLimitConfigured"];
    optional mpls_te_tunnels_affinity_info affinity = 7 [(cisco_field).name="Affinity"];
    optional bool is_affinity_configured = 8 [(cisco_field).name="IsAffinityConfigured"];
    repeated uint32 tunnel_id = 9 [(cisco_field).name="TunnelID"];
    optional uint32 generation = 10 [(cisco_field).name="Generation"];
    repeated mpls_te_attribute_set_version version_info = 11 [(cisco_field).name="VersionInfo"];
    optional uint32 path_invalidation_timeout = 12 [(cisco_field).name="PathInvalidationTimeout"];
    optional uint32 path_invalidation_action = 13 [(cisco_field).name="PathInvalidationAction"];
    optional bool is_path_invalidation_timeout_configured = 14 [(cisco_field).name="IsPathInvalidationTimeoutConfigured"];
    optional bool is_path_invalidation_action_configured = 15 [(cisco_field).name="IsPathInvalidationActionConfigured"];
    optional string exclude_list_name = 16 [(cisco_field).name="ExcludeListName"];
    optional bool is_exclude_list_name_configured = 17 [(cisco_field).name="IsExcludeListNameConfigured"];
}

message mpls_te_attribute_set_xro {
    optional te_xro xro = 1 [(cisco_field).name="XRO"];
}

message mpls_te_attribute_set_p2mp_te {
    optional bool fast_reroute = 1 [(cisco_field).name="FastReroute"];
    optional bool frr_bandwidth_protection = 2 [(cisco_field).name="FRRBandwidthProtection"];
    optional uint32 setup_priority = 3 [(cisco_field).name="SetupPriority"];
    optional uint32 hold_priority = 4 [(cisco_field).name="HoldPriority"];
    optional bool is_priority_configured = 5 [(cisco_field).name="IsPriorityConfigured"];
    optional uint32 configured_bandwidth = 6 [(cisco_field).name="ConfiguredBandwidth"];
    optional uint32 dste_class_type = 7 [(cisco_field).name="DSTEClassType"];
    optional bool is_bandwidth_configured = 8 [(cisco_field).name="IsBandwidthConfigured"];
    repeated uint32 tunnel_id = 9 [(cisco_field).name="TunnelID"];
    optional mpls_te_tunnels_affinity_info affinity = 10 [(cisco_field).name="Affinity"];
    optional bool is_affinity_configured = 11 [(cisco_field).name="IsAffinityConfigured"];
}

message mpls_te_attribute_set_aps_pp {
    optional string snc_mode = 1 [(cisco_field).name="SNCMode"];
    optional uint32 tcm_id = 2 [(cisco_field).name="TCMId"];
    optional string protection_type = 3 [(cisco_field).name="ProtectionType"];
    optional string protection_mode = 4 [(cisco_field).name="ProtectionMode"];
    optional uint32 wait_to_restore_time = 5 [(cisco_field).name="WaitToRestoreTime"];
    optional uint32 hold_off_time = 6 [(cisco_field).name="HoldOffTime"];
    optional string path_prot_profile_type = 7 [(cisco_field).name="PathProtProfileType"];
}

message mpls_te_attribute_set_sr_prepend_entry {
    optional string type = 1 [(cisco_field).name="Type"];
    optional uint32 index = 2 [(cisco_field).name="Index"];
    optional uint32 next_label = 3 [(cisco_field).name="NextLabel"];
}

message mpls_te_attribute_set_sr_prepend_list {
    repeated mpls_te_attribute_set_sr_prepend_entry prepend_entries = 1 [(cisco_field).name="PrependEntries"];
}

message mpls_te_attribute_set_p2p_te {
    repeated uint32 tunnel_id = 1 [(cisco_field).name="TunnelID"];
    optional mpls_te_tunnels_affinity_info affinity = 2 [(cisco_field).name="Affinity"];
    optional bool is_affinity_configured = 3 [(cisco_field).name="IsAffinityConfigured"];
    optional string path_selection_segment_routing_adjacency_protection = 4 [(cisco_field).name="PathSelectionSegmentRoutingAdjacencyProtection"];
    optional bool is_path_selection_segment_routing_adjacency_protection_configured = 5 [(cisco_field).name="IsPathSelectionSegmentRoutingAdjacencyProtectionConfigured"];
    optional uint32 path_invalidation_timeout = 6 [(cisco_field).name="PathInvalidationTimeout"];
    optional string path_selection_invalidation_action = 7 [(cisco_field).name="PathSelectionInvalidationAction"];
    optional bool is_path_invalidation_timeout_configured = 8 [(cisco_field).name="IsPathInvalidationTimeoutConfigured"];
    optional bool is_path_invalidation_action_configured = 9 [(cisco_field).name="IsPathInvalidationActionConfigured"];
    optional string path_selection_metric = 10 [(cisco_field).name="PathSelectionMetric"];
    optional bool is_path_selection_metric_configured = 11 [(cisco_field).name="IsPathSelectionMetricConfigured"];
    optional uint32 path_selection_segment_routing_margin = 12 [(cisco_field).name="PathSelectionSegmentRoutingMargin"];
    optional bool is_path_selection_segment_routing_margin_relative = 13 [(cisco_field).name="IsPathSelectionSegmentRoutingMarginRelative"];
    optional bool is_path_selection_segment_routing_margin_configured = 14 [(cisco_field).name="IsPathSelectionSegmentRoutingMarginConfigured"];
    optional uint32 path_selection_segment_routing_segment_limit = 15 [(cisco_field).name="PathSelectionSegmentRoutingSegmentLimit"];
    optional bool is_path_selection_segment_routing_segment_limit_configured = 16 [(cisco_field).name="IsPathSelectionSegmentRoutingSegmentLimitConfigured"];
    optional bool is_path_select_configured = 17 [(cisco_field).name="IsPathSelectConfigured"];
    optional mpls_te_logging_attributes logging = 18 [(cisco_field).name="Logging"];
    optional mpls_te_attribute_set_sr_prepend_list prepend_list = 19 [(cisco_field).name="PrependList"];
    optional bool is_prepend_list_configured = 20 [(cisco_field).name="IsPrependListConfigured"];
}

message mpls_te_attribute_set_union {
    optional string tunnel_attribute_set_type = 1 [(cisco_field).name="TunnelAttributeSetType"];
    optional mpls_te_attribute_set_path_option attribute_set_path_option = 2 [(cisco_field).name="AttributeSetPathOption"];
    optional mpls_te_attribute_set_auto_backup attribute_set_autobackup = 3 [(cisco_field).name="AttributeSetAutobackup"];
    optional mpls_te_attribute_set_auto_mesh attribute_set_automesh = 4 [(cisco_field).name="AttributeSetAutomesh"];
    optional mpls_te_attribute_set_xro attribute_set_xro = 5 [(cisco_field).name="AttributeSetXRO"];
    optional mpls_te_attribute_set_p2mp_te attribute_set_p2_mpte = 6 [(cisco_field).name="AttributeSetP2MPTE"];
    optional mpls_te_attribute_set_aps_pp attribute_set_aps_pp = 7 [(cisco_field).name="AttributeSetAPS_PP"];
    optional mpls_te_attribute_set_p2p_te attribute_set_p2_p_te = 8 [(cisco_field).name="AttributeSetP2P_TE"];
}

message mpls_te_attribute_set {
    optional string tunnel_attribute_set_name = 1 [(cisco_field).name="TunnelAttributeSetName"];
    optional uint32 tunnel_attribute_set_name_crc32 = 2 [(cisco_field).name="TunnelAttributeSetNameCRC32"];
    optional mpls_te_attribute_set_union attribute_set_union = 3 [(cisco_field).name="AttributeSetUnion"];
}

message mpls_te_mgmt_wdm_fixed_grid_label {
    optional bool label_set = 1 [(cisco_field).name="LabelSet"];
    optional string grid = 2 [(cisco_field).name="Grid"];
    optional string channel_spacing = 3 [(cisco_field).name="ChannelSpacing"];
    optional uint32 identifier = 4 [(cisco_field).name="Identifier"];
    optional sint32 channel = 5 [(cisco_field).name="Channel"];
}

message mpls_te_mgmt_g709_otn_fixed_size_label {
    optional uint32 tpn = 1 [(cisco_field).name="TPN"];
    optional uint32 bit_map_length = 2 [(cisco_field).name="BitMapLength"];
    repeated uint32 bit_map = 3 [(cisco_field).name="BitMap"];
}

message mpls_te_mgmt_gmpls_label {
    optional string label_type = 1 [(cisco_field).name="LabelType"];
    optional mpls_te_mgmt_wdm_fixed_grid_label wdm = 2 [(cisco_field).name="WDM"];
    optional mpls_te_mgmt_g709_otn_fixed_size_label otn = 3 [(cisco_field).name="OTN"];
}

message mpls_te_mgmt_gmpls_labels {
    optional mpls_te_mgmt_gmpls_label path_ingress_label = 1 [(cisco_field).name="PathIngressLabel"];
    optional mpls_te_mgmt_gmpls_label path_egress_label = 2 [(cisco_field).name="PathEgressLabel"];
    optional mpls_te_mgmt_gmpls_label resv_ingress_label = 3 [(cisco_field).name="ResvIngressLabel"];
    optional mpls_te_mgmt_gmpls_label resv_egress_label = 4 [(cisco_field).name="ResvEgressLabel"];
}

message mpls_te_mgmt_wdm_uni_tunnel_info {
    optional string tunnel_state = 1 [(cisco_field).name="TunnelState"];
    optional string tunnel_role = 2 [(cisco_field).name="TunnelRole"];
    optional uint32 tunnel_id = 3 [(cisco_field).name="TunnelID"];
    optional uint32 lsp_id = 4 [(cisco_field).name="LSP_ID"];
    optional bytes local_optical_router_id = 5 [(cisco_field).name="LocalOpticalRouterID"];
    optional bytes remote_optical_router_id = 6 [(cisco_field).name="RemoteOpticalRouterID"];
    optional string controlled_interface = 7 [(cisco_field).name="ControlledInterface"];
    optional bytes source_address = 8 [(cisco_field).name="SourceAddress"];
    optional bytes destination_address = 9 [(cisco_field).name="DestinationAddress"];
    optional bytes extended_tunnel_id = 10 [(cisco_field).name="ExtendedTunnelID"];
    optional string label_origin = 11 [(cisco_field).name="LabelOrigin"];
    optional bool srlg_discovery = 12 [(cisco_field).name="SRLGDiscovery"];
}

message mpls_te_tunnel_otn_info {
    optional te_odu_v3_bw bandwidth_cfg = 1 [(cisco_field).name="BandwidthCfg"];
}

message mpls_te_s2l_otn_info {
    optional string incoming_controller = 1 [(cisco_field).name="IncomingController"];
    optional string incoming_controller_state = 2 [(cisco_field).name="IncomingControllerState"];
    optional string incoming_sub_controller = 3 [(cisco_field).name="IncomingSubController"];
    optional string incoming_sub_controller_state = 4 [(cisco_field).name="IncomingSubControllerState"];
    optional string outgoing_controller = 5 [(cisco_field).name="OutgoingController"];
    optional string outgoing_controller_state = 6 [(cisco_field).name="OutgoingControllerState"];
    optional string outgoing_sub_controller = 7 [(cisco_field).name="OutgoingSubController"];
    optional string outgoing_sub_controller_state = 8 [(cisco_field).name="OutgoingSubControllerState"];
    optional te_odu_v3_bw bandwidth = 9 [(cisco_field).name="Bandwidth"];
    optional mpls_te_mgmt_gmpls_labels labels = 10 [(cisco_field).name="Labels"];
    optional uint32 cross_connect_id = 11 [(cisco_field).name="CrossConnectID"];
    optional bool is_connected = 12 [(cisco_field).name="IsConnected"];
    optional uint32 uptime = 13 [(cisco_field).name="Uptime"];
    optional uint32 outgoing_controller_ifhandle = 14 [(cisco_field).name="OutgoingControllerIfhandle"];
    optional uint32 outgoing_sub_controller_ifhandle = 15 [(cisco_field).name="OutgoingSubControllerIfhandle"];
    optional uint32 incoming_controller_ifhandle = 16 [(cisco_field).name="IncomingControllerIfhandle"];
    optional uint32 incoming_sub_controller_ifhandle = 17 [(cisco_field).name="IncomingSubControllerIfhandle"];
    optional uint32 gpid = 18 [(cisco_field).name="GPID"];
}

message te_pvt_prot_obj_t {
    optional bool s_bit = 1 [(cisco_field).name="sBit"];
    optional bool p_bit = 2 [(cisco_field).name="pBit"];
    optional bool n_bit = 3 [(cisco_field).name="nBit"];
    optional bool o_bit = 4 [(cisco_field).name="oBit"];
    optional string protect_type = 5 [(cisco_field).name="ProtectType"];
    optional bool is_wtr_present = 6 [(cisco_field).name="IsWTRPresent"];
    optional uint32 wtr_timeout = 7 [(cisco_field).name="WTRTimeout"];
    optional bool is_ho_present = 8 [(cisco_field).name="IsHOPresent"];
    optional uint32 ho_timeout = 9 [(cisco_field).name="HOTimeout"];
    optional bool is_snc_mode_present = 10 [(cisco_field).name="IsSNCModePresent"];
    optional string snc_mode = 11 [(cisco_field).name="snc_mode"];
    optional uint32 tcm_id = 12 [(cisco_field).name="tcm_id"];
    optional string path_prot_profile_type = 13 [(cisco_field).name="path_prot_profile_type"];
}

message mpls_te_s2l_aps_info {
    optional te_pvt_prot_obj_t protection_info = 1 [(cisco_field).name="ProtectionInfo"];
}

message mpls_te_otn_s2l_info {
    optional mpls_te_s2l_otn_info otn = 1 [(cisco_field).name="Otn"];
    optional mpls_te_s2l_aps_info aps = 2 [(cisco_field).name="Aps"];
}

message mpls_te_tunnel_static_uni_info {
    optional string client_port = 1 [(cisco_field).name="ClientPort"];
    optional uint32 client_if_handle = 2 [(cisco_field).name="ClientIfHandle"];
    optional string client_odu_name = 3 [(cisco_field).name="ClientOduName"];
    optional uint32 client_odu_if_handle = 4 [(cisco_field).name="ClientOduIfHandle"];
    optional uint32 cross_connect_id = 5 [(cisco_field).name="CrossConnectID"];
    optional bool is_connected = 6 [(cisco_field).name="IsConnected"];
    optional uint32 uptime = 7 [(cisco_field).name="Uptime"];
    optional string local_termination = 8 [(cisco_field).name="LocalTermination"];
    optional string static_uni_type = 9 [(cisco_field).name="StaticUniType"];
    optional string term_client_port = 10 [(cisco_field).name="TermClientPort"];
    optional uint32 term_client_if_handle = 11 [(cisco_field).name="TermClientIfHandle"];
}

message mpls_te_transport_tunnel_info {
    optional mpls_te_tunnel_otn_info otn = 1 [(cisco_field).name="OTN"];
    optional mpls_te_tunnel_static_uni_info static_uni = 2 [(cisco_field).name="StaticUni"];
    optional mpls_te_tunnel_egress_static_uni_info egress_static_uni = 3 [(cisco_field).name="EgressStaticUni"];
}

message mpls_te_tunnel_aps_info {
    optional mpls_te_attribute_set_aps_pp protection_profile = 1 [(cisco_field).name="ProtectionProfile"];
    optional string active_lsp = 2 [(cisco_field).name="ActiveLSP"];
    optional string diversity_type = 3 [(cisco_field).name="DiversityType"];
}

message mpls_te_tunnel_restoration_info {
    optional string revert_option = 1 [(cisco_field).name="RevertOption"];
    optional string diverse_lsp = 2 [(cisco_field).name="DiverseLSP"];
    optional string diversity_type = 3 [(cisco_field).name="DiversityType"];
}

message mpls_te_tunnel_otn_bidir_info {
    optional mpls_te_tunnel_aps_info aps = 1 [(cisco_field).name="Aps"];
    optional mpls_te_tunnel_restoration_info restoration = 2 [(cisco_field).name="Restoration"];
}

message te_s2l_sr_path_hop {
    optional string sid_type = 1 [(cisco_field).name="SIDType"];
    optional bool has_ip_addresses = 2 [(cisco_field).name="HasIPAddresses"];
    optional bytes local_addr = 3 [(cisco_field).name="LocalAddr"];
    optional bytes remote_addr = 4 [(cisco_field).name="RemoteAddr"];
    optional bool has_mpls_label = 5 [(cisco_field).name="HasMPLSLabel"];
    optional uint32 mpls_label_value = 6 [(cisco_field).name="MPLSLabelValue"];
    optional bool has_entropy_label = 7 [(cisco_field).name="HasEntropyLabel"];
}

message te_pp_sw_log_entry_bag {
    optional uint32 path_protection_switchover_event_index = 1 [(cisco_field).name="PathProtectionSwitchoverEventIndex"];
    optional uint32 path_protection_tunnel_id = 2 [(cisco_field).name="PathProtectionTunnelID"];
    optional uint32 from_lsp_id = 3 [(cisco_field).name="FromLSP_ID"];
    optional uint32 to_lsp_id = 4 [(cisco_field).name="ToLSP_ID"];
    optional uint32 date_of_error_detection = 5 [(cisco_field).name="DateOfErrorDetection"];
    optional uint32 date_of_error_detection_millisec = 6 [(cisco_field).name="DateOfErrorDetectionMillisec"];
    optional uint32 switchover_duration_millisec = 7 [(cisco_field).name="SwitchoverDurationMillisec"];
    optional string path_protection_switchover_reason = 8 [(cisco_field).name="PathProtectionSwitchoverReason"];
}

message mpls_te_p2mp_pcalc_error {
    optional string error_message = 1 [(cisco_field).name="ErrorMessage"];
    optional string lsp_mode = 2 [(cisco_field).name="LSPMode"];
    optional uint32 log_time = 3 [(cisco_field).name="LogTime"];
}

message mpls_te_p2mp_sig_error {
    optional uint32 error_node = 1 [(cisco_field).name="ErrorNode"];
    optional uint32 error = 2 [(cisco_field).name="Error"];
    optional uint32 sub_code = 3 [(cisco_field).name="SubCode"];
    optional string lsp_mode = 4 [(cisco_field).name="LSPMode"];
    optional uint32 log_time = 5 [(cisco_field).name="LogTime"];
    optional uint32 signalling_lsp_id = 6 [(cisco_field).name="SignallingLSP_ID"];
    optional string error_message = 7 [(cisco_field).name="ErrorMessage"];
    optional bool reverse_lsp = 8 [(cisco_field).name="ReverseLSP"];
}

message mpls_te_p2mp_path_option {
    optional uint32 option_index = 1 [(cisco_field).name="OptionIndex"];
    optional string path_option_type = 2 [(cisco_field).name="PathOptionType"];
    optional string explicit_path_name = 3 [(cisco_field).name="ExplicitPathName"];
    optional uint32 explicit_path_id = 4 [(cisco_field).name="ExplicitPathID"];
    optional uint32 holddown_duration = 5 [(cisco_field).name="HolddownDuration"];
    optional bytes pce_address = 6 [(cisco_field).name="PCEAddress"];
    optional string path_option_area_id = 7 [(cisco_field).name="PathOptionAreaID"];
    optional bool is_strict_explicit_path = 8 [(cisco_field).name="IsStrictExplicitPath"];
    optional bool is_helddown = 9 [(cisco_field).name="IsHelddown"];
    optional bool is_lockdown = 10 [(cisco_field).name="IsLockdown"];
    optional bool is_verbatim = 11 [(cisco_field).name="IsVerbatim"];
    optional bool is_disabled = 12 [(cisco_field).name="IsDisabled"];
    optional bool has_attribute_set = 13 [(cisco_field).name="HasAttributeSet"];
    optional mpls_te_attribute_set attribute_set = 14 [(cisco_field).name="AttributeSet"];
    optional bool attribute_set_found = 15 [(cisco_field).name="AttributeSetFound"];
    repeated mpls_te_p2mp_pcalc_error path_calculation_error = 16 [(cisco_field).name="PathCalculationError"];
    repeated mpls_te_p2mp_pcalc_error remerge_error = 17 [(cisco_field).name="RemergeError"];
    repeated mpls_te_p2mp_sig_error signalling_error = 18 [(cisco_field).name="SignallingError"];
    optional bool has_xro_attribute_set = 19 [(cisco_field).name="HasXROAttributeSet"];
    optional bool xro_attribute_set_found = 20 [(cisco_field).name="XROAttributeSetFound"];
    optional mpls_te_attribute_set xro_attribute_set = 21 [(cisco_field).name="XROAttributeSet"];
    optional bool is_segment_routing = 22 [(cisco_field).name="IsSegmentRouting"];
    optional uint32 protected_by_path_option_index = 23 [(cisco_field).name="ProtectedByPathOptionIndex"];
    optional uint32 restored_from_path_option_index = 24 [(cisco_field).name="RestoredFromPathOptionIndex"];
}

message mpls_te_iep_hop_bag {
    optional uint32 hop_index = 1 [(cisco_field).name="HopIndex"];
    optional string iep_hop_type = 2 [(cisco_field).name="IEPHopType"];
    optional bytes iep_hop_address = 3 [(cisco_field).name="IEPHopAddress"];
}

message mpls_te_iep_bag {
    optional uint32 path_option_id = 1 [(cisco_field).name="PathOptionID"];
    repeated mpls_te_iep_hop_bag iep_hop_list = 2 [(cisco_field).name="IEPHopList"];
}

message mpls_te_tunnels_autobw_status {
    optional bool is_auto_bandwidth_enabled = 1 [(cisco_field).name="IsAutoBandwidthEnabled"];
    optional uint32 reactivation_time = 2 [(cisco_field).name="ReactivationTime"];
}

message mpls_te_tunnels_autobw_config {
    optional bool is_auto_bandwidth_collect_only = 1 [(cisco_field).name="IsAutoBandwidthCollectOnly"];
    optional uint32 minimum_bandwidth = 2 [(cisco_field).name="MinimumBandwidth"];
    optional uint32 maximum_bandwidth = 3 [(cisco_field).name="MaximumBandwidth"];
    optional uint32 application_frequency = 4 [(cisco_field).name="ApplicationFrequency"];
    optional uint32 collection_frequency = 5 [(cisco_field).name="CollectionFrequency"];
    optional uint32 adjustment_threshold_percent = 6 [(cisco_field).name="AdjustmentThresholdPercent"];
    optional uint32 adjustment_threshold_value = 7 [(cisco_field).name="AdjustmentThresholdValue"];
    optional uint32 overflow_threshold_percent = 8 [(cisco_field).name="OverflowThresholdPercent"];
    optional uint32 overflow_threshold_value = 9 [(cisco_field).name="OverflowThresholdValue"];
    optional uint32 overflow_threshold_limit = 10 [(cisco_field).name="OverflowThresholdLimit"];
    optional uint32 underflow_threshold_percent = 11 [(cisco_field).name="UnderflowThresholdPercent"];
    optional uint32 underflow_threshold_value = 12 [(cisco_field).name="UnderflowThresholdValue"];
    optional uint32 underflow_threshold_limit = 13 [(cisco_field).name="UnderflowThresholdLimit"];
}

message mpls_te_tunnels_autobw_oper {
    optional uint32 last_bandwidth_applied = 1 [(cisco_field).name="LastBandwidthApplied"];
    optional string bandwidth_pool_type = 2 [(cisco_field).name="BandwidthPoolType"];
    optional uint32 bandwidth_applications = 3 [(cisco_field).name="BandwidthApplications"];
    optional string last_application_trigger = 4 [(cisco_field).name="LastApplicationTrigger"];
    optional uint32 application_jitter = 5 [(cisco_field).name="ApplicationJitter"];
    optional uint32 time_left_application = 6 [(cisco_field).name="TimeLeftApplication"];
    optional uint32 samples_collected = 7 [(cisco_field).name="SamplesCollected"];
    optional uint32 time_left_collection = 8 [(cisco_field).name="TimeLeftCollection"];
    optional uint32 highest_bandwidth = 9 [(cisco_field).name="HighestBandwidth"];
    optional uint32 underflow_highest_bandwidth = 10 [(cisco_field).name="UnderflowHighestBandwidth"];
    optional uint32 threshold_overflows = 11 [(cisco_field).name="ThresholdOverflows"];
    optional uint32 overflow_early_bw_applications = 12 [(cisco_field).name="OverflowEarlyBWApplications"];
    optional uint32 threshold_underflows = 13 [(cisco_field).name="ThresholdUnderflows"];
    optional uint32 underflow_early_bw_applications = 14 [(cisco_field).name="UnderflowEarlyBWApplications"];
    optional uint32 collect_only_requested_bandwidth = 15 [(cisco_field).name="CollectOnlyRequestedBandwidth"];
    optional string application_reject_reason = 16 [(cisco_field).name="ApplicationRejectReason"];
}

message mpls_te_tunnels_tunnel_last_reopt_fail_info {
    optional string re_opt_last_fail_reason = 1 [(cisco_field).name="ReOptLastFailReason"];
    optional bytes re_opt_failed_destination = 2 [(cisco_field).name="ReOptFailedDestination"];
    optional uint32 re_opt_failed_timestamp = 3 [(cisco_field).name="ReOptFailedTimestamp"];
}

message mpls_te_tunnels_history_current_connected {
    optional uint32 current_lsp_uptime = 1 [(cisco_field).name="CurrentLSPUptime"];
    optional uint32 current_uptime = 2 [(cisco_field).name="CurrentUptime"];
}

message mpls_te_tunnels_history_current {
    optional mpls_te_tunnels_history_current_connected connected_uptimes = 1 [(cisco_field).name="ConnectedUptimes"];
    optional uint32 current_setup_timer = 2 [(cisco_field).name="CurrentSetupTimer"];
    optional string selection_reason = 3 [(cisco_field).name="SelectionReason"];
    optional string current_setup_last_error = 4 [(cisco_field).name="CurrentSetupLastError"];
}

message mpls_te_tunnels_history_reopt {
    optional uint32 reoptimized_setup_uptime = 1 [(cisco_field).name="ReoptimizedSetupUptime"];
    optional uint32 reoptimized_setup_timer = 2 [(cisco_field).name="ReoptimizedSetupTimer"];
    optional string reoptimized_setup_last_error = 3 [(cisco_field).name="ReoptimizedSetupLastError"];
}

message mpls_te_tunnels_history_path_protect {
    optional uint32 protecting_setup_uptime = 1 [(cisco_field).name="ProtectingSetupUptime"];
    optional uint32 protecting_setup_timer = 2 [(cisco_field).name="ProtectingSetupTimer"];
    optional string protecting_setup_last_error = 3 [(cisco_field).name="ProtectingSetupLastError"];
}

message mpls_te_tunnels_history_previous {
    optional string previous_path_option = 1 [(cisco_field).name="PreviousPathOption"];
    optional uint32 previous_tunnel_instance = 2 [(cisco_field).name="PreviousTunnelInstance"];
    optional string previous_fail_reason = 3 [(cisco_field).name="PreviousFailReason"];
    optional string previous_setup_last_error = 4 [(cisco_field).name="PreviousSetupLastError"];
}

message mpls_te_tunnels_history_previous_protect {
    optional string previous_protect_path_option = 1 [(cisco_field).name="PreviousProtectPathOption"];
    optional uint32 previous_protect_tunnel_instance = 2 [(cisco_field).name="PreviousProtectTunnelInstance"];
    optional string previous_protect_fail_reason = 3 [(cisco_field).name="PreviousProtectFailReason"];
    optional string previous_protect_setup_last_error = 4 [(cisco_field).name="PreviousProtectSetupLastError"];
}

message mpls_te_tunnels_history_other_setup {
    optional uint32 path_option_index = 1 [(cisco_field).name="PathOptionIndex"];
    optional string other_setup_error = 2 [(cisco_field).name="OtherSetupError"];
}

message mpls_te_tunnels_history_standby_setup {
    optional uint32 standby_lsp_uptime = 1 [(cisco_field).name="StandbyLSPUptime"];
    optional uint32 standby_setup_timer = 2 [(cisco_field).name="StandbySetupTimer"];
}

message mpls_te_tunnels_history_bag {
    optional mpls_te_tunnels_history_current current_setup = 1 [(cisco_field).name="CurrentSetup"];
    optional mpls_te_tunnels_history_reopt reopt_setup = 2 [(cisco_field).name="ReoptSetup"];
    optional mpls_te_tunnels_history_path_protect gmpls_path_protect_setup = 3 [(cisco_field).name="GMPLSPathProtectSetup"];
    optional mpls_te_tunnels_history_previous previous_setup = 4 [(cisco_field).name="PreviousSetup"];
    optional mpls_te_tunnels_history_previous_protect previous_gmpls_path_protect_setup = 5 [(cisco_field).name="PreviousGMPLSPathProtectSetup"];
    optional mpls_te_tunnels_history_other_setup gmpls_other_setup = 6 [(cisco_field).name="GMPLSOtherSetup"];
    optional mpls_te_tunnels_history_other_setup gmpls_other_protect_setup = 7 [(cisco_field).name="GMPLSOtherProtectSetup"];
    optional mpls_te_tunnels_history_standby_setup standby_setup = 8 [(cisco_field).name="StandbySetup"];
    optional mpls_te_tunnels_history_reopt standby_reopt_setup = 9 [(cisco_field).name="StandbyReoptSetup"];
    optional mpls_te_tunnels_tunnel_last_reopt_fail_info last_re_opt_fail = 10 [(cisco_field).name="LastReOptFail"];
    optional mpls_te_tunnels_tunnel_last_reopt_fail_info last_stdby_re_opt_fail = 11 [(cisco_field).name="LastStdbyReOptFail"];
}

message mpls_te_tunnels_reverse_ero_error_bag {
    optional uint32 reverse_lsp_id = 1 [(cisco_field).name="ReverseLSP_ID"];
    optional bool path_reject_reason_bw = 2 [(cisco_field).name="PathRejectReasonBW"];
    optional bool path_reject_reason_affinity = 3 [(cisco_field).name="PathRejectReasonAffinity"];
    optional bool path_reject_reason_ip_addr = 4 [(cisco_field).name="PathRejectReasonIPAddr"];
    optional bool path_reject_reason_reverse_link = 5 [(cisco_field).name="PathRejectReasonReverseLink"];
    optional bool path_reject_reason_ixcd = 6 [(cisco_field).name="PathRejectReasonIXCD"];
    optional bool path_reject_reason_holddown = 7 [(cisco_field).name="PathRejectReasonHolddown"];
    optional bool path_reject_reason_exclude_node = 8 [(cisco_field).name="PathRejectReasonExcludeNode"];
    optional bool path_reject_reason_exclude_link = 9 [(cisco_field).name="PathRejectReasonExcludeLink"];
    optional bool path_reject_reason_exclude_srlg = 10 [(cisco_field).name="PathRejectReasonExcludeSRLG"];
    optional bool path_reject_reason_hop_limit = 11 [(cisco_field).name="PathRejectReasonHopLimit"];
    optional bool path_reject_reason_node_ol_unknown = 12 [(cisco_field).name="PathRejectReasonNodeOLUnknown"];
    optional bool path_reject_reason_node_ol_head = 13 [(cisco_field).name="PathRejectReasonNodeOLHead"];
    optional bool path_reject_reason_node_ol_mid = 14 [(cisco_field).name="PathRejectReasonNodeOLMid"];
    optional bool path_reject_reason_node_ol_tail = 15 [(cisco_field).name="PathRejectReasonNodeOLTail"];
    optional bool path_reject_reason_reverse_bw = 16 [(cisco_field).name="PathRejectReasonReverseBW"];
    optional bool path_reject_reason_node_unreachable = 17 [(cisco_field).name="PathRejectReasonNodeUnreachable"];
    optional uint32 path_option_index = 18 [(cisco_field).name="PathOptionIndex"];
    optional string path_option_type = 19 [(cisco_field).name="PathOptionType"];
    repeated mpls_te_p2mp_pcalc_error path_calculation_error = 20 [(cisco_field).name="PathCalculationError"];
    optional string ero_reject_reason = 21 [(cisco_field).name="ERORejectReason"];
}

message mpls_te_interarea_reopt_info {
    optional uint32 sent_path_queries = 1 [(cisco_field).name="SentPathQueries"];
    optional uint32 time_since_last_query_sent = 2 [(cisco_field).name="TimeSinceLastQuerySent"];
    optional uint32 received_preferred_path_errors = 3 [(cisco_field).name="ReceivedPreferredPathErrors"];
    optional uint32 time_since_last_preferred_path_error = 4 [(cisco_field).name="TimeSinceLastPreferredPathError"];
    optional uint32 received_preferred_tree_errors = 5 [(cisco_field).name="ReceivedPreferredTreeErrors"];
    optional uint32 time_since_last_preferred_tree_error = 6 [(cisco_field).name="TimeSinceLastPreferredTreeError"];
    optional bytes preferred_path_error_node = 7 [(cisco_field).name="PreferredPathErrorNode"];
    optional bytes preferred_tree_error_node = 8 [(cisco_field).name="PreferredTreeErrorNode"];
}

message te_mgmt_g709_otn_tspec {
    optional uint32 signal_type = 1 [(cisco_field).name="SignalType"];
    optional uint32 nmc_or_tolerance = 2 [(cisco_field).name="NMCOrTolerance"];
    optional uint32 nvc = 3 [(cisco_field).name="NVC"];
    optional uint32 multiplier = 4 [(cisco_field).name="Multiplier"];
    optional uint32 bit_rate = 5 [(cisco_field).name="BitRate"];
}

message te_mgmt_generic_tspec {
    optional string t_spec_type = 1 [(cisco_field).name="TSpecType"];
    optional te_mgmt_g709_otn_tspec otnt_spec = 2 [(cisco_field).name="OTNTSpec"];
}

message te_mgmt_g709_otn_fspec {
    optional uint32 signal_type = 1 [(cisco_field).name="SignalType"];
    optional uint32 nmc_or_tolerance = 2 [(cisco_field).name="NMCOrTolerance"];
    optional uint32 nvc = 3 [(cisco_field).name="NVC"];
    optional uint32 multiplier = 4 [(cisco_field).name="Multiplier"];
    optional uint32 bit_rate = 5 [(cisco_field).name="BitRate"];
}

message te_mgmt_generic_fspec {
    optional string f_spec_type = 1 [(cisco_field).name="FSpecType"];
    optional te_mgmt_g709_otn_fspec otnf_spec = 2 [(cisco_field).name="OTNFSpec"];
}

message bandwidth_spec_bag {
    optional uint64 average_rate = 1 [(cisco_field).name="AverageRate"];
    optional uint64 maximum_burst = 2 [(cisco_field).name="MaximumBurst"];
    optional uint64 peak_rate = 3 [(cisco_field).name="PeakRate"];
}

message te_lsp_convergence_info {
    optional uint64 path_in = 1 [(cisco_field).name="PathIn"];
    optional uint64 path_out = 2 [(cisco_field).name="PathOut"];
    optional uint64 resv_in = 3 [(cisco_field).name="ResvIn"];
    optional uint64 resv_out = 4 [(cisco_field).name="ResvOut"];
    optional uint64 label_rewrite = 5 [(cisco_field).name="LabelRewrite"];
    optional uint64 tunnel_rewrite = 6 [(cisco_field).name="TunnelRewrite"];
}

message mpls_te_soft_preemption_head_counters {
    optional uint32 soft_preemption_events = 1 [(cisco_field).name="SoftPreemptionEvents"];
    optional uint32 reopt_completed_ls_ps = 2 [(cisco_field).name="ReoptCompletedLSPs"];
    optional uint32 torn_down_ls_ps = 3 [(cisco_field).name="TornDownLSPs"];
    optional uint32 path_protection_switchover_ls_ps = 4 [(cisco_field).name="PathProtectionSwitchoverLSPs"];
    optional uint32 frr_triggered_ls_ps = 5 [(cisco_field).name="FRRTriggeredLSPs"];
    optional uint32 time_in_preemption_pending_min = 6 [(cisco_field).name="TimeInPreemptionPendingMin"];
    optional uint32 time_in_preemption_pending_max = 7 [(cisco_field).name="TimeInPreemptionPendingMax"];
    optional uint32 time_in_preemption_pending_avg = 8 [(cisco_field).name="TimeInPreemptionPendingAvg"];
}

message mpls_te_soft_preemption_path_error {
    optional uint32 timestamp = 1 [(cisco_field).name="Timestamp"];
    optional bytes preempting_link_address = 2 [(cisco_field).name="PreemptingLinkAddress"];
}

message mpls_te_soft_preemption_tunnel_info {
    optional string status = 1 [(cisco_field).name="Status"];
    repeated mpls_te_soft_preemption_path_error soft_preemption_path_errors = 2 [(cisco_field).name="SoftPreemptionPathErrors"];
    optional uint32 time_in_preemption_pending = 3 [(cisco_field).name="TimeInPreemptionPending"];
    optional string preemption_pending_resolution = 4 [(cisco_field).name="PreemptionPendingResolution"];
    optional mpls_te_soft_preemption_head_counters soft_preemption_counters = 5 [(cisco_field).name="SoftPreemptionCounters"];
}

message mpls_te_soft_preemption_lsp_info {
    optional string status = 1 [(cisco_field).name="Status"];
    optional uint32 soft_preemption_timestamp = 2 [(cisco_field).name="SoftPreemptionTimestamp"];
    optional string soft_preemption_link = 3 [(cisco_field).name="SoftPreemptionLink"];
    optional bytes preempting_link_address = 4 [(cisco_field).name="PreemptingLinkAddress"];
    optional uint32 time_to_hard_preemption = 5 [(cisco_field).name="TimeToHardPreemption"];
    optional bool fr_rrewrite = 6 [(cisco_field).name="FRRrewrite"];
    optional string fr_rrewrite_tunnel_name = 7 [(cisco_field).name="FRRrewriteTunnelName"];
}

message tunnel_hop_info {
    optional bytes hop_address = 1 [(cisco_field).name="HopAddress"];
    optional uint32 hop_affinity = 2 [(cisco_field).name="HopAffinity"];
    repeated uint32 hop_extended_affinity = 3 [(cisco_field).name="HopExtendedAffinity"];
}

message te_vif_convergence_info {
    optional bool is_convergence_in_progress = 1 [(cisco_field).name="IsConvergenceInProgress"];
    optional uint64 frr_trigger_time = 2 [(cisco_field).name="FRRTriggerTime"];
    optional uint64 pcalc_complete_time = 3 [(cisco_field).name="PCALCCompleteTime"];
    optional uint64 convergence_complete_time = 4 [(cisco_field).name="ConvergenceCompleteTime"];
    optional te_lsp_convergence_info convergence_lsp = 5 [(cisco_field).name="ConvergenceLSP"];
}

message mpls_te_tunnel_bfd_config_info {
    optional bool bfd_fast_detecting_enabled = 1 [(cisco_field).name="BFDFastDetectingEnabled"];
    optional uint32 min_interval = 2 [(cisco_field).name="MinInterval"];
    optional bool min_interval_default = 3 [(cisco_field).name="MinIntervalDefault"];
    optional uint32 multiplier = 4 [(cisco_field).name="Multiplier"];
    optional bool multiplier_default = 5 [(cisco_field).name="MultiplierDefault"];
    optional uint32 bring_up_timeout = 6 [(cisco_field).name="BringUpTimeout"];
    optional bool bring_up_timeout_default = 7 [(cisco_field).name="BringUpTimeoutDefault"];
    optional uint32 dampening_initial_wait = 8 [(cisco_field).name="DampeningInitialWait"];
    optional bool dampening_initial_wait_default = 9 [(cisco_field).name="DampeningInitialWaitDefault"];
    optional uint32 dampening_max_wait = 10 [(cisco_field).name="DampeningMaxWait"];
    optional bool dampening_max_wait_default = 11 [(cisco_field).name="DampeningMaxWaitDefault"];
    optional uint32 dampening_secondary_wait = 12 [(cisco_field).name="DampeningSecondaryWait"];
    optional bool dampening_secondary_wait_default = 13 [(cisco_field).name="DampeningSecondaryWaitDefault"];
    optional bool periodic_lsp_ping_disabled = 14 [(cisco_field).name="PeriodicLSPPingDisabled"];
    optional uint32 periodic_lsp_ping_interval = 15 [(cisco_field).name="PeriodicLSPPingInterval"];
    optional bool periodic_lsp_ping_interval_default = 16 [(cisco_field).name="PeriodicLSPPingIntervalDefault"];
    optional string bfd_session_down_action = 17 [(cisco_field).name="BFDSessionDownAction"];
    optional uint32 bfd_session_down_reopt_timeout = 18 [(cisco_field).name="BFDSessionDownReoptTimeout"];
    optional string bfd_encap_mode = 19 [(cisco_field).name="BFDEncapMode"];
}

message mpls_te_tunnel_bidir_config_info {
    optional uint32 association_type = 1 [(cisco_field).name="AssociationType"];
    optional uint32 association_id = 2 [(cisco_field).name="AssociationID"];
    optional bytes association_source = 3 [(cisco_field).name="AssociationSource"];
    optional uint32 association_global_id = 4 [(cisco_field).name="AssociationGlobalID"];
    optional bool association_corouted = 5 [(cisco_field).name="AssociationCorouted"];
}

message mpls_te_p2mp_dest {
    optional bytes destination_address = 1 [(cisco_field).name="DestinationAddress"];
    repeated mpls_te_p2mp_path_option path_options = 2 [(cisco_field).name="PathOptions"];
    optional string destination_state = 3 [(cisco_field).name="DestinationState"];
    optional uint32 active_path_option_index = 4 [(cisco_field).name="ActivePathOptionIndex"];
    optional bool path_option_exhausted = 5 [(cisco_field).name="PathOptionExhausted"];
    optional uint32 uptime = 6 [(cisco_field).name="Uptime"];
    optional uint32 path_change_time = 7 [(cisco_field).name="PathChangeTime"];
    optional uint32 total_uptime = 8 [(cisco_field).name="TotalUptime"];
    optional bool s2_l_exist = 9 [(cisco_field).name="S2LExist"];
    optional string destination_deletion_cause = 10 [(cisco_field).name="DestinationDeletionCause"];
    optional string destination_deletion_sub_cause = 11 [(cisco_field).name="DestinationDeletionSubCause"];
    optional uint32 destination_deletion_timestamp = 12 [(cisco_field).name="DestinationDeletionTimestamp"];
    optional bool is_inter_area = 13 [(cisco_field).name="IsInterArea"];
    optional mpls_te_interarea_reopt_info inter_area_reoptimization = 14 [(cisco_field).name="InterAreaReoptimization"];
}

message mpls_te_bfd_session_info {
    optional string state = 1 [(cisco_field).name="State"];
    optional uint32 state_change_time = 2 [(cisco_field).name="StateChangeTime"];
}

message mpls_te_bfd_deletion_history {
    optional uint32 lsp_id = 1 [(cisco_field).name="LspID"];
    optional uint32 deletion_time = 2 [(cisco_field).name="DeletionTime"];
    optional string deletion_reason = 3 [(cisco_field).name="DeletionReason"];
    optional uint32 deletion_diagnostic_code = 4 [(cisco_field).name="DeletionDiagnosticCode"];
}

message mpls_te_head_bfd_info {
    optional uint32 creation_time = 1 [(cisco_field).name="CreationTime"];
    optional mpls_te_bfd_session_info session_info = 2 [(cisco_field).name="SessionInfo"];
    optional mpls_te_bfd_deletion_history deletion_history = 3 [(cisco_field).name="DeletionHistory"];
}

message mpls_te_tail_bfd_info {
    optional mpls_te_bfd_session_info session_info = 1 [(cisco_field).name="SessionInfo"];
    optional uint32 failure_diagnostic_code = 2 [(cisco_field).name="FailureDiagnosticCode"];
    optional string failure_reason = 3 [(cisco_field).name="FailureReason"];
    optional uint32 local_discriminator = 4 [(cisco_field).name="LocalDiscriminator"];
    optional uint32 remote_discriminator = 5 [(cisco_field).name="RemoteDiscriminator"];
    optional uint32 min_interval = 6 [(cisco_field).name="MinInterval"];
    optional bool min_interval_default = 7 [(cisco_field).name="MinIntervalDefault"];
    optional uint32 multiplier = 8 [(cisco_field).name="Multiplier"];
    optional bool multiplier_default = 9 [(cisco_field).name="MultiplierDefault"];
}

message mpls_te_s2l_association_object {
    optional uint32 s2_l_association_type = 1 [(cisco_field).name="S2LAssociationType"];
    optional string s2_l_association_tie_role = 2 [(cisco_field).name="S2LAssociationTieRole"];
    optional uint32 s2_l_association_id = 3 [(cisco_field).name="S2LAssociationID"];
    optional bytes s2_l_association_source = 4 [(cisco_field).name="S2LAssociationSource"];
    optional uint32 s2_l_global_source = 5 [(cisco_field).name="S2LGlobalSource"];
    repeated uint32 s2_l_extended_id = 6 [(cisco_field).name="S2LExtendedID"];
}

message mpls_te_s2l_protection_object {
    optional bool s2_l_secondary = 1 [(cisco_field).name="S2LSecondary"];
    optional bool s2_l_protecting = 2 [(cisco_field).name="S2LProtecting"];
    optional bool s2_l_notification = 3 [(cisco_field).name="S2LNotification"];
    optional bool s2_l_operational = 4 [(cisco_field).name="S2LOperational"];
    optional bool enhanced = 5 [(cisco_field).name="Enhanced"];
    optional bool ded1_plus1 = 6 [(cisco_field).name="Ded1Plus1"];
    optional bool ded1_to1 = 7 [(cisco_field).name="Ded1To1"];
    optional bool shared = 8 [(cisco_field).name="Shared"];
    optional bool link_unprotected = 9 [(cisco_field).name="LinkUnprotected"];
    optional bool extra_traffic = 10 [(cisco_field).name="ExtraTraffic"];
    optional bool any = 11 [(cisco_field).name="Any"];
    optional bool rerouting = 12 [(cisco_field).name="Rerouting"];
    optional bool rerouting_no_et = 13 [(cisco_field).name="ReroutingNoET"];
    optional bool one_to_n_protection_et = 14 [(cisco_field).name="OneToNProtectionET"];
    optional bool one_plus_one_uni = 15 [(cisco_field).name="OnePlusOneUni"];
    optional bool one_plus_one_bi = 16 [(cisco_field).name="OnePlusOneBi"];
    optional bool lsp_unprotected = 17 [(cisco_field).name="LSPUnprotected"];
}

message flex_lockout_t {
    optional bool is_lockout = 1 [(cisco_field).name="IsLockout"];
    optional string origination = 2 [(cisco_field).name="Origination"];
    optional uint32 lockout_timestamp = 3 [(cisco_field).name="LockoutTimestamp"];
}

message mpls_te_s2l_flex_info {
    optional bool entry_exists = 1 [(cisco_field).name="EntryExists"];
    optional uint32 in_label = 2 [(cisco_field).name="InLabel"];
    optional bool bfd_created = 3 [(cisco_field).name="BfdCreated"];
    optional bool bfd_up = 4 [(cisco_field).name="BfdUp"];
    optional bool oam_created = 5 [(cisco_field).name="OamCreated"];
    optional te_s2l_fec_t flex_fec = 6 [(cisco_field).name="FlexFEC"];
    optional bytes bfd_next_hop = 7 [(cisco_field).name="BfdNextHop"];
    optional uint32 bfd_tun_ifh = 8 [(cisco_field).name="BfdTunIfh"];
    optional uint32 bfd_out_ifh = 9 [(cisco_field).name="BfdOutIfh"];
    optional uint32 bfd_int_label = 10 [(cisco_field).name="BfdIntLabel"];
    optional uint32 bfd_egress_label = 11 [(cisco_field).name="BfdEgressLabel"];
    optional bool fault_ldi_lockout = 12 [(cisco_field).name="FaultLdiLockout"];
    optional bool fault_ldi = 13 [(cisco_field).name="FaultLdi"];
    optional bool fault_lkr = 14 [(cisco_field).name="FaultLkr"];
    optional bool fault_ais = 15 [(cisco_field).name="FaultAis"];
    optional uint32 fault_time = 16 [(cisco_field).name="FaultTime"];
    optional flex_lockout_t lockout = 17 [(cisco_field).name="Lockout"];
}

message te_s2l_srlg_collect_info {
    optional string srlg_collect_type = 1 [(cisco_field).name="SRLGCollectType"];
    repeated uint32 discovered_srl_gs = 2 [(cisco_field).name="DiscoveredSRLGs"];
}

message mpls_te_p2mp_s2l {
    optional te_s2l_fec_t s2_l_fec = 1 [(cisco_field).name="S2L_FEC"];
    optional mpls_te_p2mp_path_option active_path_option = 2 [(cisco_field).name="ActivePathOption"];
    repeated mpls_srlg_info shared_risk_link_groups = 3 [(cisco_field).name="SharedRiskLinkGroups"];
    optional string pcalc_area = 4 [(cisco_field).name="PCALCArea"];
    optional bool is_expanded_ero = 5 [(cisco_field).name="IsExpandedERO"];
    optional uint32 path_reeval_query_mid = 6 [(cisco_field).name="PathReevalQueryMid"];
    optional uint32 time_since_last_query_received_mid = 7 [(cisco_field).name="TimeSinceLastQueryReceivedMid"];
    optional uint32 time_since_last_preferred_path_exists_send_mid = 8 [(cisco_field).name="TimeSinceLastPreferredPathExistsSendMid"];
    optional uint32 time_since_last_preferred_tree_exists_send_mid = 9 [(cisco_field).name="TimeSinceLastPreferredTreeExistsSendMid"];
    optional string expanded_ero_area_id = 10 [(cisco_field).name="ExpandedEROAreaID"];
    optional uint32 expanded_ero_affinity_bits = 11 [(cisco_field).name="ExpandedEROAffinityBits"];
    optional uint32 expanded_ero_affinity_mask = 12 [(cisco_field).name="ExpandedEROAffinityMask"];
    optional string expanded_ero_metric_type = 13 [(cisco_field).name="ExpandedEROMetricType"];
    optional uint32 expanded_ero_metric = 14 [(cisco_field).name="ExpandedEROMetric"];
    optional bool is_expand_timer_running = 15 [(cisco_field).name="IsExpandTimerRunning"];
    optional uint32 expand_timer_duration = 16 [(cisco_field).name="ExpandTimerDuration"];
    optional uint32 expand_timer_remain = 17 [(cisco_field).name="ExpandTimerRemain"];
    optional bytes abr_auto_discovered = 18 [(cisco_field).name="ABRAutoDiscovered"];
    optional bool is_frr_enabled = 19 [(cisco_field).name="IsFRREnabled"];
    optional bool is_node_protected = 20 [(cisco_field).name="IsNodeProtected"];
    optional bool is_bandwidth_protect = 21 [(cisco_field).name="IsBandwidthProtect"];
    optional bool path_rro_enabled = 22 [(cisco_field).name="PathRROEnabled"];
    repeated rsvp_mgmt_ero_subobj out_ero = 23 [(cisco_field).name="OutERO"];
    repeated rsvp_mgmt_ero_subobj in_ero = 24 [(cisco_field).name="InERO"];
    optional te_xro out_xro = 25 [(cisco_field).name="OutXRO"];
    optional te_xro in_xro = 26 [(cisco_field).name="InXRO"];
    repeated rsvp_mgmt_rro_subobj path_rro = 27 [(cisco_field).name="PathRRO"];
    repeated rsvp_mgmt_rro_subobj resv_rro = 28 [(cisco_field).name="ResvRRO"];
    repeated tunnel_hop_info path_affinity_array = 29 [(cisco_field).name="PathAffinityArray"];
    optional bandwidth_spec_bag t_spec = 30 [(cisco_field).name="TSpec"];
    optional te_mgmt_generic_tspec generic_t_spec = 31 [(cisco_field).name="GenericTSpec"];
    optional bandwidth_spec_bag f_spec = 32 [(cisco_field).name="FSpec"];
    optional te_mgmt_generic_fspec generic_f_spec = 33 [(cisco_field).name="GenericFSpec"];
    optional uint64 weight = 34 [(cisco_field).name="Weight"];
    optional uint64 reverse_weight = 35 [(cisco_field).name="ReverseWeight"];
    optional uint32 uptime = 36 [(cisco_field).name="Uptime"];
    optional string egress_interface = 37 [(cisco_field).name="EgressInterface"];
    optional string egress_interface_state = 38 [(cisco_field).name="EgressInterfaceState"];
    optional string egress_interface_brief = 39 [(cisco_field).name="EgressInterfaceBrief"];
    optional string ingress_interface = 40 [(cisco_field).name="IngressInterface"];
    optional string ingress_interface_state = 41 [(cisco_field).name="IngressInterfaceState"];
    optional string ingress_interface_brief = 42 [(cisco_field).name="IngressInterfaceBrief"];
    optional uint32 egress_interface_handle = 43 [(cisco_field).name="EgressInterfaceHandle"];
    optional uint32 ingress_interface_handle = 44 [(cisco_field).name="IngressInterfaceHandle"];
    optional uint32 s2_l_local_label = 45 [(cisco_field).name="S2LLocalLabel"];
    optional uint32 s2_l_out_label = 46 [(cisco_field).name="S2LOutLabel"];
    optional string outbound_frr_state = 47 [(cisco_field).name="OutboundFRRState"];
    optional string frr_out_tunnel_interface = 48 [(cisco_field).name="FRROutTunnelInterface"];
    optional string role = 49 [(cisco_field).name="Role"];
    optional string signalling_status = 50 [(cisco_field).name="SignallingStatus"];
    optional bytes local_router_id = 51 [(cisco_field).name="LocalRouterID"];
    optional bytes upstream_router_id = 52 [(cisco_field).name="UpstreamRouterID"];
    optional bytes downstream_router_id = 53 [(cisco_field).name="DownstreamRouterID"];
    optional bytes next_hop_address = 54 [(cisco_field).name="NextHopAddress"];
    optional te_addr_t_ next_hop_address_generic = 55 [(cisco_field).name="NextHopAddressGeneric"];
    optional bytes previous_hop_address = 56 [(cisco_field).name="PreviousHopAddress"];
    optional te_addr_t_ previous_hop_address_generic = 57 [(cisco_field).name="PreviousHopAddressGeneric"];
    optional bytes incoming_address = 58 [(cisco_field).name="IncomingAddress"];
    optional te_addr_t_ incoming_address_generic = 59 [(cisco_field).name="IncomingAddressGeneric"];
    optional mpls_te_p2mp_fsm_info fsm = 60 [(cisco_field).name="FSM"];
    optional uint32 backup_tunnel_interface = 61 [(cisco_field).name="BackupTunnelInterface"];
    optional uint32 node_hop_count = 62 [(cisco_field).name="NodeHopCount"];
    optional te_lsp_convergence_info s2_l_convergence = 63 [(cisco_field).name="S2LConvergence"];
    optional mpls_te_soft_preemption_lsp_info soft_preemption = 64 [(cisco_field).name="SoftPreemption"];
    optional hasi_m_object_ctx master_context = 65 [(cisco_field).name="MasterContext"];
    optional hasi_s_object_ctx slave_context = 66 [(cisco_field).name="SlaveContext"];
    optional rsvp_ng_api_ctx_bag rsvp_api_ctx = 67 [(cisco_field).name="RSVPApiCtx"];
    optional bool is_optical = 68 [(cisco_field).name="IsOptical"];
    optional mpls_te_mgmt_gmpls_labels gmpls_labels = 69 [(cisco_field).name="GMPLSLabels"];
    optional te_service_info service_info = 70 [(cisco_field).name="ServiceInfo"];
    optional mpls_te_otn_s2l_info otn_s2_l = 71 [(cisco_field).name="OTN_S2L"];
    optional mpls_te_head_bfd_info head_end_bfd_info = 72 [(cisco_field).name="HeadEndBFDInfo"];
    optional mpls_te_tail_bfd_info tail_end_bfd_info = 73 [(cisco_field).name="TailEndBFDInfo"];
    optional te_s2l_srlg_collect_info srlg_collection = 74 [(cisco_field).name="SRLGCollection"];
    optional mpls_te_s2l_association_object association = 75 [(cisco_field).name="Association"];
    optional mpls_te_s2l_protection_object protection = 76 [(cisco_field).name="Protection"];
    optional bool s2_l_reverse_ero_obj_present = 77 [(cisco_field).name="S2LReverseEROObjPresent"];
    repeated rsvp_mgmt_ero_subobj reverse_ero_in = 78 [(cisco_field).name="ReverseEROIn"];
    optional bool reverse_lsp_present = 79 [(cisco_field).name="ReverseLSPPresent"];
    optional bool reverse_lsp_connected = 80 [(cisco_field).name="ReverseLSPConnected"];
    optional te_lsp_fec_t reverse_lsp_fec = 81 [(cisco_field).name="ReverseLSP_FEC"];
    optional string reverse_lsp_name = 82 [(cisco_field).name="ReverseLSPName"];
    optional bool s2_l_reverse_t_spec_obj_present = 83 [(cisco_field).name="S2LReverseTSpecObjPresent"];
    optional bandwidth_spec_bag reverse_t_spec = 84 [(cisco_field).name="ReverseTSpec"];
    repeated uint32 s2_l_reverse_lsp_sub_objs = 85 [(cisco_field).name="S2LReverseLspSubObjs"];
    optional mpls_te_s2l_flex_info flex_info = 86 [(cisco_field).name="FlexInfo"];
    repeated te_s2l_sr_path_hop s2_l_segment_routing_path = 87 [(cisco_field).name="S2LSegmentRoutingPath"];
    optional bool srdb_check_enabled = 88 [(cisco_field).name="SRDBCheckEnabled"];
}

message mpls_te_p2mp_lsp {
    optional string signaled_name = 1 [(cisco_field).name="SignaledName"];
    optional bool is_frr_failed = 2 [(cisco_field).name="IsFRRFailed"];
    optional uint32 frr_active_reason = 3 [(cisco_field).name="FRRActiveReason"];
    optional uint32 lsp_bandwidth = 4 [(cisco_field).name="LSPBandwidth"];
    optional uint32 lsp_setup_priority = 5 [(cisco_field).name="LSPSetupPriority"];
    optional uint32 lsp_hold_priority = 6 [(cisco_field).name="LSPHoldPriority"];
    optional string lsp_bandwidth_type = 7 [(cisco_field).name="LSPBandwidthType"];
    optional bool dste_class_match = 8 [(cisco_field).name="DSTEClassMatch"];
    optional uint32 dste_class_index = 9 [(cisco_field).name="DSTEClassIndex"];
    optional te_lsp_fec_t lsp_fec = 10 [(cisco_field).name="LSP_FEC"];
    optional string type = 11 [(cisco_field).name="Type"];
    repeated mpls_te_p2mp_s2l s2_l_list = 12 [(cisco_field).name="S2LList"];
    optional uint32 uptime = 13 [(cisco_field).name="Uptime"];
    optional uint32 s2_ls_up = 14 [(cisco_field).name="S2LsUp"];
    optional uint32 s2_ls_proceeding = 15 [(cisco_field).name="S2LsProceeding"];
    optional uint32 s2_ls_down = 16 [(cisco_field).name="S2LsDown"];
    optional string reoptimize_reason = 17 [(cisco_field).name="ReoptimizeReason"];
    optional string reoptimize_trigger = 18 [(cisco_field).name="ReoptimizeTrigger"];
    optional uint32 timer_left = 19 [(cisco_field).name="TimerLeft"];
    optional bool is_passive = 20 [(cisco_field).name="IsPassive"];
}

message mpls_te_p2p_info_bag {
    optional mpls_te_tunnels_autobw_status auto_bandwidth_status = 1 [(cisco_field).name="AutoBandwidthStatus"];
    optional mpls_te_tunnels_autobw_config auto_bandwidth_config = 2 [(cisco_field).name="AutoBandwidthConfig"];
    optional mpls_te_tunnels_autobw_oper auto_bandwidth_oper = 3 [(cisco_field).name="AutoBandwidthOper"];
    optional bool is_bidirectional = 4 [(cisco_field).name="IsBidirectional"];
}

message mpls_te_p2mp_tun_cfg_bag {
    optional string tunnel_name = 1 [(cisco_field).name="TunnelName"];
    optional uint32 tunnel_id = 2 [(cisco_field).name="TunnelID"];
    optional bool is_p2_mp = 3 [(cisco_field).name="IsP2MP"];
    optional string signaled_name = 4 [(cisco_field).name="SignaledName"];
    optional uint32 configured_bandwidth = 5 [(cisco_field).name="ConfiguredBandwidth"];
    optional uint32 interface_configured_bandwidth = 6 [(cisco_field).name="InterfaceConfiguredBandwidth"];
    optional string bandwidth_type = 7 [(cisco_field).name="BandwidthType"];
    optional uint32 setup_priority = 8 [(cisco_field).name="SetupPriority"];
    optional uint32 hold_priority = 9 [(cisco_field).name="HoldPriority"];
    optional uint32 policy_class = 10 [(cisco_field).name="PolicyClass"];
    repeated uint32 policy_classes = 11 [(cisco_field).name="PolicyClasses"];
    optional uint32 forward_class = 12 [(cisco_field).name="ForwardClass"];
    optional mpls_te_tunnels_affinity_info affinity = 13 [(cisco_field).name="Affinity"];
    optional uint32 backup_bandwidth = 14 [(cisco_field).name="BackupBandwidth"];
    optional uint32 backup_bandwidth_flags = 15 [(cisco_field).name="BackupBandwidthFlags"];
    optional uint32 config_load_share = 16 [(cisco_field).name="ConfigLoadShare"];
    optional uint32 payload_type = 17 [(cisco_field).name="PayloadType"];
    optional bool is_in_config = 18 [(cisco_field).name="IsInConfig"];
    optional bool explicit_null_imposition = 19 [(cisco_field).name="ExplicitNullImposition"];
    optional bool fast_reroute = 20 [(cisco_field).name="FastReroute"];
    optional bool is_backup_tunnel = 21 [(cisco_field).name="IsBackupTunnel"];
    optional bool record_route = 22 [(cisco_field).name="RecordRoute"];
    optional bool srlg_discovery = 23 [(cisco_field).name="SRLGDiscovery"];
    optional bool path_protection_enabled = 24 [(cisco_field).name="PathProtectionEnabled"];
    optional uint32 hop_limit = 25 [(cisco_field).name="HopLimit"];
    optional uint32 cost_limit = 26 [(cisco_field).name="CostLimit"];
    optional uint32 cost_limit_global = 27 [(cisco_field).name="CostLimitGlobal"];
    optional uint32 path_invalidation_timeout_source = 28 [(cisco_field).name="PathInvalidationTimeoutSource"];
    optional uint32 path_invalidation_timeout = 29 [(cisco_field).name="PathInvalidationTimeout"];
    optional uint32 path_invalidation_action_source = 30 [(cisco_field).name="PathInvalidationActionSource"];
    optional uint32 path_invalidation_action = 31 [(cisco_field).name="PathInvalidationAction"];
    optional bool soft_preempt = 32 [(cisco_field).name="SoftPreempt"];
    optional mpls_te_tunnel_bidir_config_info bidirectional_config = 33 [(cisco_field).name="BidirectionalConfig"];
    optional mpls_te_tunnel_bfd_config_info bfd_config = 34 [(cisco_field).name="BFDConfig"];
    optional bool disable_affinity_failure_reopt = 35 [(cisco_field).name="DisableAffinityFailureReopt"];
    optional uint32 affinity_failure_reopt_timer = 36 [(cisco_field).name="AffinityFailureReoptTimer"];
    optional string segment_routing_path_selection = 37 [(cisco_field).name="SegmentRoutingPathSelection"];
}

message mpls_te_pp_info {
    optional uint32 time_of_switchover_sec = 1 [(cisco_field).name="TimeOfSwitchoverSec"];
    optional uint32 switchover_total = 2 [(cisco_field).name="SwitchoverTotal"];
    optional uint32 switchover_ready = 3 [(cisco_field).name="SwitchoverReady"];
    optional uint32 standby_reoptimized_number = 4 [(cisco_field).name="StandbyReoptimizedNumber"];
    optional uint32 switchover_reason = 5 [(cisco_field).name="SwitchoverReason"];
    optional string diversity_type = 6 [(cisco_field).name="DiversityType"];
    optional bool is_path_protect_configured = 7 [(cisco_field).name="IsPathProtectConfigured"];
    optional uint32 path_protection_protected_by_id = 8 [(cisco_field).name="PathProtectionProtectedByID"];
    optional bool valid_path_protection_path_option_exists = 9 [(cisco_field).name="ValidPathProtectionPathOptionExists"];
    optional bool is_path_protect_switch_over_underway = 10 [(cisco_field).name="IsPathProtectSwitchOverUnderway"];
    optional te_pp_sw_log_entry_bag switchover = 11 [(cisco_field).name="Switchover"];
    optional uint32 reoptimization_time_remaining = 12 [(cisco_field).name="ReoptimizationTimeRemaining"];
}

message mpls_te_wsrlg_value_bag {
    optional uint32 srlg = 1 [(cisco_field).name="SRLG"];
    optional string srlg_name = 2 [(cisco_field).name="SRLGName"];
    optional uint32 admin_weight = 3 [(cisco_field).name="AdminWeight"];
}

message mpls_te_wsrlg_hop_bag {
    optional bytes from_address = 1 [(cisco_field).name="FromAddress"];
    optional bytes to_address = 2 [(cisco_field).name="ToAddress"];
    optional uint64 aggregate_admin_weight = 3 [(cisco_field).name="AggregateAdminWeight"];
    repeated uint32 common_srlg = 4 [(cisco_field).name="CommonSRLG"];
}

message mpls_te_wsrlg_info_bag {
    repeated mpls_te_wsrlg_value_bag protected_interface_srlg = 1 [(cisco_field).name="ProtectedInterfaceSRLG"];
    repeated mpls_te_wsrlg_hop_bag weighted_srlg_hops = 2 [(cisco_field).name="WeightedSRLGHops"];
}

message mpls_te_autobackup_info {
    optional uint32 protected_ls_ps = 1 [(cisco_field).name="ProtectedLSPs"];
    optional uint32 protected_s2_ls = 2 [(cisco_field).name="ProtectedS2Ls"];
    optional uint32 sharing_families = 3 [(cisco_field).name="SharingFamilies"];
    optional string ab_protection_type = 4 [(cisco_field).name="ABProtectionType"];
    optional bool is_using_srlg = 5 [(cisco_field).name="IsUsingSRLG"];
    optional string srlg_prot_type = 6 [(cisco_field).name="SRLGProtType"];
    optional string ab_protected_interface = 7 [(cisco_field).name="ABProtectedInterface"];
    optional mpls_te_wsrlg_info_bag weighted_srlg_info = 8 [(cisco_field).name="WeightedSRLGInfo"];
    optional bytes protected_address = 9 [(cisco_field).name="ProtectedAddress"];
    optional string tunnel_attribute_set_name = 10 [(cisco_field).name="TunnelAttributeSetName"];
    repeated mpls_te_iep_bag iep_list = 11 [(cisco_field).name="IEPList"];
    optional bool is_unused_removal_timer_running = 12 [(cisco_field).name="IsUnusedRemovalTimerRunning"];
    optional uint32 unused_removal_remaining_time = 13 [(cisco_field).name="UnusedRemovalRemainingTime"];
}

message mpls_te_automesh_info {
    optional uint32 mesh_group_id = 1 [(cisco_field).name="MeshGroupID"];
    optional string tunnel_destination_list_name = 2 [(cisco_field).name="TunnelDestinationListName"];
    optional bool is_tunnel_unused_timer_running = 3 [(cisco_field).name="IsTunnelUnusedTimerRunning"];
    optional uint32 remaining_unused_time = 4 [(cisco_field).name="RemainingUnusedTime"];
    optional string mesh_group_type = 5 [(cisco_field).name="MeshGroupType"];
}

message mpls_te_autopcc_info {
    optional bytes owner_address = 1 [(cisco_field).name="OwnerAddress"];
    optional bytes creator_address = 2 [(cisco_field).name="CreatorAddress"];
    optional bool has_creator_id = 3 [(cisco_field).name="HasCreatorID"];
    optional string creator_id = 4 [(cisco_field).name="CreatorID"];
    optional uint32 plspid = 5 [(cisco_field).name="PLSPID"];
    optional string symbolic_name = 6 [(cisco_field).name="SymbolicName"];
    optional bool operationally_up = 7 [(cisco_field).name="OperationallyUp"];
}

message mpls_te_pce_delegation_info {
    optional uint32 plsp_id = 1 [(cisco_field).name="PLSP_ID"];
    optional string symbolic_name = 2 [(cisco_field).name="SymbolicName"];
    optional bytes owner_address = 3 [(cisco_field).name="OwnerAddress"];
    optional bool operationally_up = 4 [(cisco_field).name="OperationallyUp"];
}

message mpls_te_path_option_dampening_info {
    optional uint32 option_index = 1 [(cisco_field).name="OptionIndex"];
    optional uint32 hold_down_time = 2 [(cisco_field).name="HoldDownTime"];
    optional uint32 remained_time = 3 [(cisco_field).name="RemainedTime"];
    optional uint32 backoff_count = 4 [(cisco_field).name="BackoffCount"];
}

message mpls_te_tunnel_bfd_info {
    optional bool bfd_session_up = 1 [(cisco_field).name="BFDSessionUp"];
    optional uint32 session_up_time = 2 [(cisco_field).name="SessionUpTime"];
    optional uint32 failure_diagnostic_code = 3 [(cisco_field).name="FailureDiagnosticCode"];
    optional string failure_reason = 4 [(cisco_field).name="FailureReason"];
    optional uint32 minimum_session_up_interval = 5 [(cisco_field).name="MinimumSessionUpInterval"];
    optional uint32 maximum_session_up_interval = 6 [(cisco_field).name="MaximumSessionUpInterval"];
    optional mpls_te_bfd_lsp_counters event_counters = 7 [(cisco_field).name="EventCounters"];
    repeated mpls_te_path_option_dampening_info dampening_info = 8 [(cisco_field).name="DampeningInfo"];
}

message mpls_te_tunnel_bidir_info {
    optional uint32 reverse_bandwidth = 1 [(cisco_field).name="ReverseBandwidth"];
    optional uint32 reverse_bandwidth_standby = 2 [(cisco_field).name="ReverseBandwidthStandby"];
    optional mpls_te_tunnels_reverse_ero_error_bag reverse_ero_error_current = 3 [(cisco_field).name="ReverseEROErrorCurrent"];
    optional mpls_te_tunnels_reverse_ero_error_bag reverse_ero_error_reopt = 4 [(cisco_field).name="ReverseEROErrorReopt"];
    optional mpls_te_tunnels_reverse_ero_error_bag reverse_ero_error_standby = 5 [(cisco_field).name="ReverseEROErrorStandby"];
    optional mpls_te_tunnels_reverse_ero_error_bag reverse_ero_error_standby_reopt = 6 [(cisco_field).name="ReverseEROErrorStandbyReopt"];
}

message mpls_te_tunnel_flex_info {
    optional bool fault_ldi_lockout = 1 [(cisco_field).name="FaultLdiLockout"];
    optional bool fault_ldi = 2 [(cisco_field).name="FaultLdi"];
    optional bool fault_lkr = 3 [(cisco_field).name="FaultLkr"];
    optional bool fault_ais = 4 [(cisco_field).name="FaultAis"];
    optional uint32 fault_time = 5 [(cisco_field).name="FaultTime"];
    optional uint32 fault_in_label = 6 [(cisco_field).name="FaultInLabel"];
    optional bool is_lockout = 7 [(cisco_field).name="IsLockout"];
    optional uint32 lockout_timestamp = 8 [(cisco_field).name="LockoutTimestamp"];
    optional uint32 lockout_lsp_id = 9 [(cisco_field).name="LockoutLSP_ID"];
}

// The following metadata must not be deleted or modified:
option (cisco_file).metadata="{\"bag\": \"mpls_te_p2mp_tunnel_bag\", \"v_maj\": 25, \"version\": 1.0, \"bytecode\": \"$510={RoleStandby}b{TunnelInterfaceName}D%h{Config}$497{AdminState}[mte_tunnel_admin_state_]e{OperationalState}[mte_tunnel_oper_state_]e{OperationalStateChanges}D{SignaledName}s{FailReason}[mpls_mte_tunnel_fail_reason]e{DestinationUpCount}D{DestinationDisabledCount}D{DestinationDownCount}D{Destinations}a($482){TunnelCurrentLSP}$494{ReoptimizedP2MP_LSP}$494{TunnelStandbyLSP}$494{ReoptimizedStandbyP2MP_LSP}$494{TunnelRestorationLSP}$494{DelayCleanPP_LSP}$494{CleanedLSP}$494{ReOptHoldDownTimerRemaining}D{BandwidthRequested}D{BandwidthType}[mpls_te_bw_pool_type]e{CurrentLSPBandwidthRequested}D{CurrentLSPBandwidthRequestedType}[mpls_te_bw_pool_type]e{StandbyLSPBandwidthRequested}D{StandbyLSPBandwidthRequestedType}[mpls_te_bw_pool_type]e{ReoptLSPBandwidthRequested}D{ReoptLSPBandwidthRequestedType}[mpls_te_bw_pool_type]e{StandbyReoptLSPBandwidthRequested}D{StandbyReoptLSPBandwidthRequestedType}[mpls_te_bw_pool_type]e{IsNodeProtected}b{IsBandwidthProtect}b{TunnelRecovering}b{ReroutePending}b{AffinityFailureReoptDisabled}b{AffinityFailureReoptTimeRemained}D{AffinityFailureDelayedTearTimeRemained}D{InvalidationTimeRemained}D{DropMode}b{AutoRoute}b{ForwardingAdjacency}b{LoadShareFactor}D{LoadShareType}[mpls_te_loadshare_type]e{CreateTime}D{Uptime}D{MetricType}[mpls_te_metric_type]e{TiebreakerType}D{TiebreakerQualifier}[mpls_te_metric_qualifier]e{MetricQualifier}[mpls_te_metric_qualifier]e{IsHopLimitIgnore}b{HopLimitIgnoredReason}[te_hop_limit_ignore_t]e{OutboundFRRState}[mpls_te_frr_state]e{AreaID}s{P2PInfo}$496{PCEFailReason}[mpls_te_pce_fail_reasons]e{SNMPIndex}D{History}$443{PathProtection}$498{IsInterAreaTunnel}b{AutoBackup}$502{IsAutoBackup}b{AutoMesh}p($503){IsAutoPCC}b{AutoPCC}$504{IsPCEDelegated}b{PCEDelegation}$505{TunnelAttributeSetName}s{TunnelAttributeSetType}[tunnel_attribute_set_type_e_]e{SoftPreemption}p($460){MasterContext}p($292){SlaveContext}p($285){WDM_UNITunnel}p($351){TransportTunnelInfo}p($358){BFDInfo}p($507){OTNBidir}p($361){Bidir}p($508){XROAttributeSetName}s{XROAttributeSet}p($345){TETunnelConvergence}$464{ServiceInfo}$318{IsPassive}b{PassiveTunnelName}s{FlexInfo}p($509){BindingLabelExists}b{BindingLabel}D{LastHopIfindex}D;$129={Count}H;$130={CTXEventType}[rsvp_ng_api_ctx_ev_t_]e{CtrlEventType}[rsvp_ng_api_ctrl_ev_t_]e{Scheduled}$129{Tx}$129{Rx}$129{DropTx}$129{DropRx}$129{PostponedTx}$129;$131={Type}[rsvp_ng_api_ctx_ev_t_]e{ProducerSummaryReplayID}H{IsSent}b{Age}D{FilterReason}[rsvp_ng_api_ev_filter_reason_t_]e;$132={Timestamp}D{EventType}[rsvp_ng_api_ctx_hist_event_type_t_]e{EventData}2A(D);$133={ProducerSummaryReplayID}H{ProducerSummaryReplayBaseID}D{ConsumerSummaryReplayID}H{ConsumerSummaryReplayBaseID}D{Flags}D{Origin}[rsvp_ng_api_ctx_origin_t_]e{Statistics}14A($130){Events}a($131){history}a($132){SlaveProducerSummaryReplayID}H{SlaveConsumerSummaryReplayID}H;$170={IsStrictRoute}b{EROAddress}N{PrefixLength}C;$171={IsStrictRoute}b{EROInterfaceID}D{ERORouterID}N;$172=?(<EROType,rsvp_mgmt_ero_subobj_type>,1:{IPV4EROSubObject}$170,4:{UnnumberedEROSubObject}$171);$191={IsProtectionAvailable}b{IsProtectionInUse}b{IsBandwidthProtected}b{IsNodeProtectionAvailable}b{IsNodeID}b;$192={IsGlobalLabel}b;$193={IsProtectionAvailable}b{IsProtectionInUse}b{IsBandwidthProtected}b{IsNodeProtectionAvailable}b{IsNodeID}b;$194={Flags}$191{RROAddress}N;$195={Flags}$192{Label}D{IsLabelVariableLength}b{VariableLengthLabel}a(D);$196={Flags}$193{InterfaceAddress}N{InterfaceID}D;$197={SRLGs}a(D);$198=?(<RROType,rsvp_mgmt_rro_subobj_type>,1:{IPV4RROSubObject}$194,3:{LabelRROSubObject}$195,4:{UnnumberedRROSubObject}$196,34:{SRLG_RROSubObject}$197,?:v);$236={S2L_FECSubgroupID}I{S2L_FEC_LSP_ID}I{S2L_FECTunnelID}I{S2L_FECExtendedTunnelID}N{S2L_FECSource}N{S2L_FECDest}N{S2L_FEC_P2MP_ID}D{S2L_FECSubgroupOriginator}N{S2L_FEC_CType}[mpls_lib_ctype_t]e{S2L_FEC_VRF}D%V;$238={RouterID}N{InterfaceIndex}D;$239=?(<Type,te_addr_type_e>,1:{IPv4Address}N,2:{IPv4UnnumberedAddress}$238,?:v);$240={TEAddr}$239;$242={EgressPort}$240{LocalTermination}[mpls_te_termination_type_t]e{RemoteUniType}[mpls_te_uni_type_t]e{TermEgressPort}$240;$248=?(<FEC_CType,mpls_lib_ctype_t>,7:{P2P_LSPDestination}N,13:{FECDestinationP2MP_ID}D,?:v);$249={FEC_LSP_ID}I{FECTunnelID}I{FECExtendedTunnelID}N{FECSource}N{FECDestinationInfo}$248{FEC_VRF}D%V;$250={ConstraintType}C{ConstraintValue}D{ForwardRefValue}D{ConstraintExtendedValue}a(D){ExtendedForwardRefValue}a(D);$252={AffinityBits}D{AffinityMask}D{NamedAffinities}a($250);$253={SharedRiskGroup}D{SRLGName}s;$256={SessionCreateEvents}D{SessionUpEvents}D{SessionCreationFailedEvents}D{SessionDownEvents}D{SessionAdminDownEvents}D{SessionGracefullyDeleteEvents}D{SessionNonGracefullyDeleteEvents}D{SessionCreateTimeoutEvents}D{SessionReplayEvents}D;$261={Address}N{PrefixLen}C{Attribute}[te_xro_attribute_type]e{ExclusionType}[te_xro_exclusion_type]e;$262={Address}16x%s{PrefixLen}C{Attribute}[te_xro_attribute_type]e{ExclusionType}[te_xro_exclusion_type]e;$263={TERouterID}N{InterfaceID}D{Attribute}[te_xro_attribute_type]e{ExclusionType}[te_xro_exclusion_type]e;$264={ASNumber}I;$265={SRLG_ID}D{ExclusionType}[te_xro_exclusion_type]e;$266={FEC}$249{IgnoreLSP_ID}b{ProcessingNodeException}b{PenultimateNodeException}b{DestinationNodeException}b{ExclusionType}[te_xro_exclusion_type]e;$267=?(<Type,te_xro_subobj_type>,1:{IPv4Subobject}$261,2:{IPv6Subobject}$262,6:{UnnumberedSubobject}$263,32:{ASSubobject}$264,34:{SRLGSubobject}$265,36:{LSPSubobject}$266,?:v);$268={XROSubobjects}a($267);$280={LocalID}H{RemoreID}H{Time}D{Count}H;$284={Create}$280{Updates}$280{ApplicationSyncs}$280{ApplicationNaks}$280{SummaryReplaySyncs}$280{SummaryReplayNaks}$280{CacheNakRetries}$280;$285={ObjectSyncID}H{ObjectType}D{ObjectIdEvents}$284;$286={ApplicationSyncs}$280{ImplicitDeletes}$280{ApplicationNaks}$280{SummaryReplaySyncs}$280{SummaryReplayNaks}$280;$291={SlaveId}D{IdEvents}$286;$292={ObjectSyncID}H{ObjectType}D{Queue}D{CreateID}H{CreateTime}D{UpdateTime}D{DeleteTime}D{DeleteCtxLenght}D{SlaveInformation}a($291){HasHistory}b{PreActiveHistory}$284;$306={Context}D{Client}[te_serv_tun_client_]e{Source}N{AttributeSetName}s{AttributeSetResloved}b{EgressInformation}a(C){State}D{Result}D{Updated}H{NeedsReplay}b;$307={Context}D{ProtocolTyoe}[te_serv_tun_client_]e{ClientInstanceName}s{NextHop}N{ExplicitPath}s{AttributeSetName}s{AttributeSetResolved}b{Updated}H{NeedsReplay}b{Ipv6CapsRequested}b{Ipv6CapsEnabled}b;$308={Client}[te_serv_tun_client_]e{State}D{Result}D{EgressInformation}a(C){Updated}H{NeedsReplay}b;$309={Counts}51A(D);$310={EventTime}D{PreviousState}[te_s2l_fsm_state_e]e{NextState}[te_s2l_fsm_state_e]e{EventID}[te_s2l_fsm_ev_e_]e;$311={S2L_FSMState}[te_s2l_fsm_state_e]e{S2LFlags}D{DeletionCause}[te_p2mp_s2l_deletion_cause_t]e{DeletionSubcause}[te_p2mp_s2l_deletion_subcause_t]e{InjectedEvents}D{EventStatistics}a($310){EventCounts}$309{PathToBeReceived}b{ReservationToBeReceived}b{LabelToBeReceived}b{RewriteToBeReceived}b{sync_id_from_rsvp_to_be_received}b{sync_id_from_master_to_be_received}b{frr_active_pending}b{config_consistent}b{missing_vif}b{signame_diff}b{frr_diff}b{frr_np_diff}b{frr_bwp_diff}b{record_route_diff}b{soft_preemption_diff}b;$317={ServiceInfos}a($308);$318=?(<ServiceType,te_serv_type_t>,1:{VIFEgressInfo}$317,4:{S2LEgressInfo}$317,2:{VIFAutoTunnelInfo}$306,3:{VIFAutoTunnelP2PInfo}$307,?:v);$323={BitRate}D{Tolerance}I;$324={BitRate}D;$325={BitRate}D;$326=?(<ODULevel,te_odu_level_e>,20:{ODUFlexCBR}$323,21:{ODUFlexGFP_FRes}$324,22:{ODUFlexGFP_FNonRes}$325,?:v);$331={LSPState}b{S2LState}b{LSPReRoute}b{LSPReOpt}b{LSPInsufficientBW}b{LSPBandwidthChange}b{LSP_PCALCFailureLoggingEnabled}b{AllLoggingEnabled}b;$332={ConfiguredBandwidth}D{DSTEClassType}C{IsBandwidthConfigured}b{SetupPriority}C{HoldPriority}C{IsPriorityConfigured}b{PolicyClass}C{PolicyClasses}a(C){IsPolicyclassConfigured}b{ForwardClass}D{Affinity}$252{IsAffinityConfigured}b{FastReroute}b{FRRNodeProtection}b{FRRBandwidthProtection}b{RecordRoute}b{AutoBandwidthCollect}b{AutoRouteAnnounce}b{SoftPreemptionConfigured}b{Logging}$331{bandwidth}D{LoadShare}D{IsInterfaceBWConfigured}b{MeshGroupID}a(D){TunnelID}a(I);$333={ProtectedInterface}s;$334={Name}s{SourceType}[te_sig_name_append_]e{ProtectedInterfaceType}[te_sig_name_append_]e{IsMPAddresses}b;$335={IsSignalledNameConfigured}b{SignalledName}$334{SetupPriority}C{HoldPriority}C{IsPriorityConfigured}b{PolicyClass}C{PolicyClasses}a(C){IsPolicyclassConfigured}b{Affinity}$252{IsAffinityConfigured}b{RecordRoute}b{Logging}$331{ProtectedInterfaces}a($333){TunnelID}a(I);$336={AttributeType}s{Generation}D{IsDefault}b;$337={ConfiguredBandwidth}D{CostLimit}D{DSTEClassType}C{BandwidthType}[mpls_te_bw_pool_type]e{IsBandwidthConfigured}b{IsCostLimitConfigured}b{Affinity}$252{IsAffinityConfigured}b{TunnelID}a(I){Generation}D{VersionInfo}a($336){PathInvalidationTimeout}D{PathInvalidationAction}D{IsPathInvalidationTimeoutConfigured}b{IsPathInvalidationActionConfigured}b{ExcludeListName}s{IsExcludeListNameConfigured}b;$338={XRO}$268;$339={FastReroute}b{FRRBandwidthProtection}b{SetupPriority}C{HoldPriority}C{IsPriorityConfigured}b{ConfiguredBandwidth}D{DSTEClassType}C{IsBandwidthConfigured}b{TunnelID}a(I){Affinity}$252{IsAffinityConfigured}b;$340={SNCMode}[te_aps_snc_mode_e]e{TCMId}D{ProtectionType}[te_protect_type_e]e{ProtectionMode}[te_pnr_revert_options_e]e{WaitToRestoreTime}D{HoldOffTime}D{PathProtProfileType}[te_path_prot_profile_type_e]e;$341={Type}[te_attribute_set_sr_prepend_type]e{Index}D{NextLabel}D;$342={PrependEntries}a($341);$343={TunnelID}a(I){Affinity}$252{IsAffinityConfigured}b{PathSelectionSegmentRoutingAdjacencyProtection}[te_s2l_sr_path_selection_type]e{IsPathSelectionSegmentRoutingAdjacencyProtectionConfigured}b{PathInvalidationTimeout}D{PathSelectionInvalidationAction}[te_path_inval_action_type]e{IsPathInvalidationTimeoutConfigured}b{IsPathInvalidationActionConfigured}b{PathSelectionMetric}[mpls_te_metric_type]e{IsPathSelectionMetricConfigured}b{PathSelectionSegmentRoutingMargin}D{IsPathSelectionSegmentRoutingMarginRelative}b{IsPathSelectionSegmentRoutingMarginConfigured}b{PathSelectionSegmentRoutingSegmentLimit}D{IsPathSelectionSegmentRoutingSegmentLimitConfigured}b{IsPathSelectConfigured}b{Logging}$331{PrependList}$342{IsPrependListConfigured}b;$344=?(<TunnelAttributeSetType,tunnel_attribute_set_type_e_>,0:v,1:v,2:{AttributeSetPathOption}$337,4:{AttributeSetAutobackup}$335,5:{AttributeSetAutomesh}$332,6:{AttributeSetXRO}$338,7:{AttributeSetP2MPTE}$339,8:{AttributeSetAPS_PP}$340,9:{AttributeSetP2P_TE}$343);$345={TunnelAttributeSetName}s{TunnelAttributeSetNameCRC32}D{AttributeSetUnion}$344;$346={LabelSet}b{Grid}[gmpls_uni_mgmt_wdm_grid]e{ChannelSpacing}[gmpls_uni_mgmt_dwdm_cs]e{Identifier}I{Channel}i;$347={TPN}I{BitMapLength}I{BitMap}a(C);$348=?(<LabelType,mpls_te_mgmt_gmpls_label_type>,0:v,1:{WDM}$346,2:{OTN}$347,?:v);$350={PathIngressLabel}p($348){PathEgressLabel}p($348){ResvIngressLabel}p($348){ResvEgressLabel}p($348);$351={TunnelState}[mpls_te_tunnel_state]e{TunnelRole}[mpls_te_tunnel_role]e{TunnelID}I{LSP_ID}I{LocalOpticalRouterID}N{RemoteOpticalRouterID}N{ControlledInterface}s{SourceAddress}N{DestinationAddress}N{ExtendedTunnelID}N{LabelOrigin}[mpls_te_mgmt_gmpls_label_origin_type]e{SRLGDiscovery}b;$352={BandwidthCfg}$326;$353={IncomingController}s{IncomingControllerState}[te_controller_state_e]e{IncomingSubController}s{IncomingSubControllerState}[te_controller_state_e]e{OutgoingController}s{OutgoingControllerState}[te_controller_state_e]e{OutgoingSubController}s{OutgoingSubControllerState}[te_controller_state_e]e{Bandwidth}$326{Labels}p($350){CrossConnectID}D{IsConnected}b{Uptime}D{OutgoingControllerIfhandle}D%h{OutgoingSubControllerIfhandle}D%h{IncomingControllerIfhandle}D%h{IncomingSubControllerIfhandle}D%h{GPID}I;$354={sBit}b{pBit}b{nBit}b{oBit}b{ProtectType}[te_protect_type_e]e{IsWTRPresent}b{WTRTimeout}D{IsHOPresent}b{HOTimeout}D{IsSNCModePresent}b{snc_mode}[te_aps_snc_mode_e]e{tcm_id}D{path_prot_profile_type}[te_path_prot_profile_type_e]e;$355={ProtectionInfo}$354;$356={Otn}$353{Aps}$355;$357={ClientPort}s{ClientIfHandle}D%h{ClientOduName}s{ClientOduIfHandle}D%h{CrossConnectID}D{IsConnected}b{Uptime}D{LocalTermination}[mpls_te_termination_type_t]e{StaticUniType}[mpls_te_uni_type_t]e{TermClientPort}s{TermClientIfHandle}D%h;$358={OTN}$352{StaticUni}$357{EgressStaticUni}$242;$359={ProtectionProfile}$340{ActiveLSP}[mpls_te_lsp_mode_]e{DiversityType}[te_pp_diversity_t]e;$360={RevertOption}[te_pnr_revert_options_e]e{DiverseLSP}[mpls_te_lsp_mode_]e{DiversityType}[te_pp_diversity_t]e;$361={Aps}$359{Restoration}$360;$397={SIDType}[te_sr_sid_type]e{HasIPAddresses}b{LocalAddr}N{RemoteAddr}N{HasMPLSLabel}b{MPLSLabelValue}D{HasEntropyLabel}b;$399={PathProtectionSwitchoverEventIndex}D{PathProtectionTunnelID}I{FromLSP_ID}I{ToLSP_ID}I{DateOfErrorDetection}D{DateOfErrorDetectionMillisec}D{SwitchoverDurationMillisec}D{PathProtectionSwitchoverReason}[te_p2mp_s2l_deletion_subcause_t]e;$418={ErrorMessage}s{LSPMode}[mpls_te_lsp_mode_]e{LogTime}D;$420={ErrorNode}D{Error}C{SubCode}I{LSPMode}[mpls_te_lsp_mode_]e{LogTime}D{SignallingLSP_ID}I{ErrorMessage}s{ReverseLSP}b;$421={OptionIndex}D{PathOptionType}[mpls_te_pathoption_type_]e{ExplicitPathName}s{ExplicitPathID}I{HolddownDuration}I{PCEAddress}N{PathOptionAreaID}s{IsStrictExplicitPath}b{IsHelddown}b{IsLockdown}b{IsVerbatim}b{IsDisabled}b{HasAttributeSet}b{AttributeSet}$345{AttributeSetFound}b{PathCalculationError}a($418){RemergeError}a($418){SignallingError}a($420){HasXROAttributeSet}b{XROAttributeSetFound}b{XROAttributeSet}$345{IsSegmentRouting}b{ProtectedByPathOptionIndex}D{RestoredFromPathOptionIndex}D;$423={HopIndex}D{IEPHopType}[mpls_te_iep_hop_type_]e{IEPHopAddress}N;$424={PathOptionID}D{IEPHopList}a($423);$429={IsAutoBandwidthEnabled}b{ReactivationTime}D;$430={IsAutoBandwidthCollectOnly}b{MinimumBandwidth}D{MaximumBandwidth}D{ApplicationFrequency}D{CollectionFrequency}D{AdjustmentThresholdPercent}D{AdjustmentThresholdValue}D{OverflowThresholdPercent}D{OverflowThresholdValue}D{OverflowThresholdLimit}D{UnderflowThresholdPercent}D{UnderflowThresholdValue}D{UnderflowThresholdLimit}D;$431={LastBandwidthApplied}D{BandwidthPoolType}[mpls_te_bw_pool_type]e{BandwidthApplications}D{LastApplicationTrigger}[te_autobw_app_trigger_t]e{ApplicationJitter}D{TimeLeftApplication}D{SamplesCollected}D{TimeLeftCollection}D{HighestBandwidth}D{UnderflowHighestBandwidth}D{ThresholdOverflows}D{OverflowEarlyBWApplications}D{ThresholdUnderflows}D{UnderflowEarlyBWApplications}D{CollectOnlyRequestedBandwidth}D{ApplicationRejectReason}[te_autobw_app_rej_t]e;$434={ReOptLastFailReason}[mpls_te_reopt_decision_reason_]e{ReOptFailedDestination}N{ReOptFailedTimestamp}D;$435={CurrentLSPUptime}D{CurrentUptime}D;$436={ConnectedUptimes}p($435){CurrentSetupTimer}p(D){SelectionReason}s{CurrentSetupLastError}s;$437={ReoptimizedSetupUptime}p(D){ReoptimizedSetupTimer}p(D){ReoptimizedSetupLastError}s;$438={ProtectingSetupUptime}p(D){ProtectingSetupTimer}p(D){ProtectingSetupLastError}s;$439={PreviousPathOption}s{PreviousTunnelInstance}p(D){PreviousFailReason}s{PreviousSetupLastError}s;$440={PreviousProtectPathOption}s{PreviousProtectTunnelInstance}D{PreviousProtectFailReason}s{PreviousProtectSetupLastError}s;$441={PathOptionIndex}D{OtherSetupError}s;$442={StandbyLSPUptime}p(D){StandbySetupTimer}p(D);$443={CurrentSetup}p($436){ReoptSetup}p($437){GMPLSPathProtectSetup}p($438){PreviousSetup}p($439){PreviousGMPLSPathProtectSetup}p($440){GMPLSOtherSetup}p($441){GMPLSOtherProtectSetup}p($441){StandbySetup}p($442){StandbyReoptSetup}p($437){LastReOptFail}$434{LastStdbyReOptFail}$434;$444={ReverseLSP_ID}I{PathRejectReasonBW}b{PathRejectReasonAffinity}b{PathRejectReasonIPAddr}b{PathRejectReasonReverseLink}b{PathRejectReasonIXCD}b{PathRejectReasonHolddown}b{PathRejectReasonExcludeNode}b{PathRejectReasonExcludeLink}b{PathRejectReasonExcludeSRLG}b{PathRejectReasonHopLimit}b{PathRejectReasonNodeOLUnknown}b{PathRejectReasonNodeOLHead}b{PathRejectReasonNodeOLMid}b{PathRejectReasonNodeOLTail}b{PathRejectReasonReverseBW}b{PathRejectReasonNodeUnreachable}b{PathOptionIndex}I{PathOptionType}[mte_path_option_type]e{PathCalculationError}a($418){ERORejectReason}[te_rev_ero_reject_reasons_t]e;$446={SentPathQueries}I{TimeSinceLastQuerySent}D{ReceivedPreferredPathErrors}I{TimeSinceLastPreferredPathError}D{ReceivedPreferredTreeErrors}I{TimeSinceLastPreferredTreeError}D{PreferredPathErrorNode}N{PreferredTreeErrorNode}N;$448={SignalType}C{NMCOrTolerance}I{NVC}I{Multiplier}I{BitRate}D;$449=?(<TSpecType,te_mgmt_generic_tspec_type>,0:{OTNTSpec}$448,?:v);$450={SignalType}C{NMCOrTolerance}I{NVC}I{Multiplier}I{BitRate}D;$451=?(<FSpecType,te_mgmt_generic_fspec_type>,0:{OTNFSpec}$450,?:v);$452={AverageRate}H{MaximumBurst}H{PeakRate}H;$455={PathIn}H{PathOut}H{ResvIn}H{ResvOut}H{LabelRewrite}H{TunnelRewrite}H;$458={SoftPreemptionEvents}D{ReoptCompletedLSPs}D{TornDownLSPs}D{PathProtectionSwitchoverLSPs}D{FRRTriggeredLSPs}D{TimeInPreemptionPendingMin}I{TimeInPreemptionPendingMax}I{TimeInPreemptionPendingAvg}I;$459={Timestamp}D{PreemptingLinkAddress}N;$460={Status}[mpls_te_soft_preemption_state_]e{SoftPreemptionPathErrors}a($459){TimeInPreemptionPending}I{PreemptionPendingResolution}[mpls_te_soft_preemption_resolution_]e{SoftPreemptionCounters}$458;$461={Status}[mpls_te_soft_preemption_state_]e{SoftPreemptionTimestamp}D{SoftPreemptionLink}s{PreemptingLinkAddress}N{TimeToHardPreemption}I{FRRrewrite}b{FRRrewriteTunnelName}s;$463={HopAddress}N{HopAffinity}D{HopExtendedAffinity}a(D);$464={IsConvergenceInProgress}b{FRRTriggerTime}H{PCALCCompleteTime}H{ConvergenceCompleteTime}H{ConvergenceLSP}$455;$466={BFDFastDetectingEnabled}b{MinInterval}D{MinIntervalDefault}b{Multiplier}C{MultiplierDefault}b{BringUpTimeout}I{BringUpTimeoutDefault}b{DampeningInitialWait}D{DampeningInitialWaitDefault}b{DampeningMaxWait}D{DampeningMaxWaitDefault}b{DampeningSecondaryWait}D{DampeningSecondaryWaitDefault}b{PeriodicLSPPingDisabled}b{PeriodicLSPPingInterval}D{PeriodicLSPPingIntervalDefault}b{BFDSessionDownAction}[mpls_te_bfd_session_down_action]e{BFDSessionDownReoptTimeout}D{BFDEncapMode}[te_vif_bfd_encap_mode_t]e;$467={AssociationType}I{AssociationID}p(I){AssociationSource}p(N){AssociationGlobalID}p(D){AssociationCorouted}b;$482={DestinationAddress}N{PathOptions}a($421){DestinationState}[te_destination_state_t_]e{ActivePathOptionIndex}D{PathOptionExhausted}b{Uptime}D{PathChangeTime}D{TotalUptime}D{S2LExist}b{DestinationDeletionCause}[te_p2mp_s2l_deletion_cause_t]e{DestinationDeletionSubCause}[te_p2mp_s2l_deletion_subcause_t]e{DestinationDeletionTimestamp}D{IsInterArea}b{InterAreaReoptimization}$446;$483={State}[te_bfd_lsp_session_state]e{StateChangeTime}D;$484={LspID}I{DeletionTime}D{DeletionReason}s{DeletionDiagnosticCode}D;$485={CreationTime}D{SessionInfo}$483{DeletionHistory}p($484);$486={SessionInfo}$483{FailureDiagnosticCode}D{FailureReason}s{LocalDiscriminator}D{RemoteDiscriminator}D{MinInterval}D{MinIntervalDefault}b{Multiplier}C{MultiplierDefault}b;$487={S2LAssociationType}I{S2LAssociationTieRole}[te_association_tie_role_]e{S2LAssociationID}I{S2LAssociationSource}N{S2LGlobalSource}p(D){S2LExtendedID}a(D);$488={S2LSecondary}b{S2LProtecting}b{S2LNotification}b{S2LOperational}b{Enhanced}b{Ded1Plus1}b{Ded1To1}b{Shared}b{LinkUnprotected}b{ExtraTraffic}b{Any}b{Rerouting}b{ReroutingNoET}b{OneToNProtectionET}b{OnePlusOneUni}b{OnePlusOneBi}b{LSPUnprotected}b;$489={IsLockout}b{Origination}[flex_lsp_lockout_origination_t]e{LockoutTimestamp}D;$490={EntryExists}b{InLabel}D{BfdCreated}b{BfdUp}b{OamCreated}b{FlexFEC}$236{BfdNextHop}N{BfdTunIfh}D%h{BfdOutIfh}D%h{BfdIntLabel}D{BfdEgressLabel}D{FaultLdiLockout}b{FaultLdi}b{FaultLkr}b{FaultAis}b{FaultTime}D{Lockout}$489;$491={SRLGCollectType}[te_srlg_collect_request_t]e{DiscoveredSRLGs}a(D);$492={S2L_FEC}$236{ActivePathOption}$421{SharedRiskLinkGroups}a($253){PCALCArea}s{IsExpandedERO}b{PathReevalQueryMid}D{TimeSinceLastQueryReceivedMid}D{TimeSinceLastPreferredPathExistsSendMid}D{TimeSinceLastPreferredTreeExistsSendMid}D{ExpandedEROAreaID}s{ExpandedEROAffinityBits}D{ExpandedEROAffinityMask}D{ExpandedEROMetricType}[mpls_te_metric_type]e{ExpandedEROMetric}D{IsExpandTimerRunning}b{ExpandTimerDuration}D{ExpandTimerRemain}D{ABRAutoDiscovered}N{IsFRREnabled}b{IsNodeProtected}b{IsBandwidthProtect}b{PathRROEnabled}b{OutERO}a($172){InERO}a($172){OutXRO}$268{InXRO}$268{PathRRO}a($198){ResvRRO}a($198){PathAffinityArray}a($463){TSpec}p($452){GenericTSpec}p($449){FSpec}p($452){GenericFSpec}p($451){Weight}H{ReverseWeight}H{Uptime}D{EgressInterface}s{EgressInterfaceState}[te_controller_state_e]e{EgressInterfaceBrief}s{IngressInterface}s{IngressInterfaceState}[te_controller_state_e]e{IngressInterfaceBrief}s{EgressInterfaceHandle}D{IngressInterfaceHandle}D{S2LLocalLabel}D{S2LOutLabel}D{OutboundFRRState}[mpls_te_frr_state]e{FRROutTunnelInterface}s{Role}[mpls_te_tunnel_role]e{SignallingStatus}[mpls_te_tunnels_signaling_status]e{LocalRouterID}N{UpstreamRouterID}N{DownstreamRouterID}N{NextHopAddress}N{NextHopAddressGeneric}$240{PreviousHopAddress}N{PreviousHopAddressGeneric}$240{IncomingAddress}N{IncomingAddressGeneric}$240{FSM}$311{BackupTunnelInterface}D%h{NodeHopCount}C{S2LConvergence}$455{SoftPreemption}p($461){MasterContext}p($292){SlaveContext}p($285){RSVPApiCtx}$133{IsOptical}b{GMPLSLabels}p($350){ServiceInfo}$318{OTN_S2L}p($356){HeadEndBFDInfo}p($485){TailEndBFDInfo}p($486){SRLGCollection}$491{Association}p($487){Protection}p($488){S2LReverseEROObjPresent}b{ReverseEROIn}a($172){ReverseLSPPresent}b{ReverseLSPConnected}b{ReverseLSP_FEC}$249{ReverseLSPName}s{S2LReverseTSpecObjPresent}b{ReverseTSpec}$452{S2LReverseLspSubObjs}a(C){FlexInfo}p($490){S2LSegmentRoutingPath}a($397){SRDBCheckEnabled}b;$494={SignaledName}s{IsFRRFailed}b{FRRActiveReason}D{LSPBandwidth}D{LSPSetupPriority}C{LSPHoldPriority}C{LSPBandwidthType}[mpls_te_bw_pool_type]e{DSTEClassMatch}b{DSTEClassIndex}C{LSP_FEC}$249{Type}[mpls_te_lsp_type]e{S2LList}a($492){Uptime}D{S2LsUp}D{S2LsProceeding}D{S2LsDown}D{ReoptimizeReason}[mpls_te_reopt_decision_reason_]e{ReoptimizeTrigger}[mte_reopt_trigger_]e{TimerLeft}D{IsPassive}b;$496={AutoBandwidthStatus}$429{AutoBandwidthConfig}$430{AutoBandwidthOper}$431{IsBidirectional}b;$497={TunnelName}s{TunnelID}D{IsP2MP}b{SignaledName}s{ConfiguredBandwidth}D{InterfaceConfiguredBandwidth}D{BandwidthType}[mpls_te_bw_pool_type]e{SetupPriority}C{HoldPriority}C{PolicyClass}C{PolicyClasses}a(C){ForwardClass}D{Affinity}$252{BackupBandwidth}D{BackupBandwidthFlags}C{ConfigLoadShare}D{PayloadType}I{IsInConfig}b{ExplicitNullImposition}b{FastReroute}b{IsBackupTunnel}b{RecordRoute}b{SRLGDiscovery}b{PathProtectionEnabled}b{HopLimit}C{CostLimit}D{CostLimitGlobal}D{PathInvalidationTimeoutSource}D{PathInvalidationTimeout}D{PathInvalidationActionSource}D{PathInvalidationAction}D{SoftPreempt}b{BidirectionalConfig}p($467){BFDConfig}$466{DisableAffinityFailureReopt}b{AffinityFailureReoptTimer}D{SegmentRoutingPathSelection}[te_s2l_sr_path_selection_type]e;$498={TimeOfSwitchoverSec}D{SwitchoverTotal}I{SwitchoverReady}I{StandbyReoptimizedNumber}I{SwitchoverReason}I{DiversityType}[te_pp_diversity_t]e{IsPathProtectConfigured}b{PathProtectionProtectedByID}D{ValidPathProtectionPathOptionExists}b{IsPathProtectSwitchOverUnderway}b{Switchover}$399{ReoptimizationTimeRemaining}D;$499={SRLG}D{SRLGName}s{AdminWeight}D;$500={FromAddress}N{ToAddress}N{AggregateAdminWeight}H{CommonSRLG}a(D);$501={ProtectedInterfaceSRLG}a($499){WeightedSRLGHops}a($500);$502={ProtectedLSPs}D{ProtectedS2Ls}D{SharingFamilies}D{ABProtectionType}[AutoBackupProtectionType]e{IsUsingSRLG}b{SRLGProtType}[AutoBackupSRLGMode]e{ABProtectedInterface}s{WeightedSRLGInfo}p($501){ProtectedAddress}N{TunnelAttributeSetName}s{IEPList}a($424){IsUnusedRemovalTimerRunning}b{UnusedRemovalRemainingTime}D;$503={MeshGroupID}D{TunnelDestinationListName}s{IsTunnelUnusedTimerRunning}b{RemainingUnusedTime}D{MeshGroupType}[te_meshgroup_type_]e;$504={OwnerAddress}N{CreatorAddress}N{HasCreatorID}b{CreatorID}s{PLSPID}D{SymbolicName}s{OperationallyUp}b;$505={PLSP_ID}D{SymbolicName}s{OwnerAddress}N{OperationallyUp}b;$506={OptionIndex}D{HoldDownTime}D{RemainedTime}D{BackoffCount}D;$507={BFDSessionUp}b{SessionUpTime}D{FailureDiagnosticCode}D{FailureReason}s{MinimumSessionUpInterval}D{MaximumSessionUpInterval}D{EventCounters}$256{DampeningInfo}a($506);$508={ReverseBandwidth}D{ReverseBandwidthStandby}D{ReverseEROErrorCurrent}p($444){ReverseEROErrorReopt}p($444){ReverseEROErrorStandby}p($444){ReverseEROErrorStandbyReopt}p($444);$509={FaultLdiLockout}b{FaultLdi}b{FaultLkr}b{FaultAis}b{FaultTime}D{FaultInLabel}D{IsLockout}b{LockoutTimestamp}D{LockoutLSP_ID}I;\", \"schema_names\": [[\"RootOper.MPLS_TE.P2P_P2MPTunnel.TunnelHead(TunnelName)\", \"\"]], \"subtypes\": {\"256\": \"mpls_te_bfd_lsp_counters\", \"261\": \"te_xro_subobj_ipv4\", \"262\": \"te_xro_subobj_ipv6\", \"263\": \"te_xro_subobj_unnum\", \"264\": \"te_xro_subobj_as\", \"265\": \"te_xro_subobj_srlg\", \"266\": \"te_xro_subobj_p2p_lsp\", \"267\": \"te_xro_subobj\", \"268\": \"te_xro\", \"280\": \"hasi_id_event\", \"284\": \"hasi_s_obj_id_events\", \"285\": \"hasi_s_object_ctx\", \"286\": \"hasi_m_id_events\", \"291\": \"hasi_m_object_slave_info\", \"292\": \"hasi_m_object_ctx\", \"306\": \"te_serv_p2mp_auto_tun\", \"307\": \"te_serv_p2p_auto_tun\", \"308\": \"te_serv_p2mp_einfo\", \"309\": \"mpls_te_p2mp_fsm_event_counts\", \"310\": \"mpls_te_p2mp_fsm_event_stat\", \"311\": \"mpls_te_p2mp_fsm_info\", \"317\": \"te_serv_p2mp_einfos\", \"318\": \"te_service_info\", \"323\": \"te_odu_flex_cbr_info\", \"324\": \"te_odu_flex_gfp_f_res_info\", \"325\": \"te_odu_flex_gfp_f_non_res_info\", \"326\": \"te_odu_v3_bw\", \"509\": \"mpls_te_tunnel_flex_info\", \"331\": \"mpls_te_logging_attributes\", \"332\": \"mpls_te_attribute_set_auto_mesh\", \"333\": \"mpls_te_protected_if_name_str\", \"334\": \"mpls_te_attribute_set_sig_name\", \"335\": \"mpls_te_attribute_set_auto_backup\", \"336\": \"mpls_te_attribute_set_version\", \"337\": \"mpls_te_attribute_set_path_option\", \"338\": \"mpls_te_attribute_set_xro\", \"339\": \"mpls_te_attribute_set_p2mp_te\", \"340\": \"mpls_te_attribute_set_aps_pp\", \"341\": \"mpls_te_attribute_set_sr_prepend_entry\", \"342\": \"mpls_te_attribute_set_sr_prepend_list\", \"343\": \"mpls_te_attribute_set_p2p_te\", \"344\": \"mpls_te_attribute_set_union\", \"345\": \"mpls_te_attribute_set\", \"346\": \"mpls_te_mgmt_wdm_fixed_grid_label\", \"347\": \"mpls_te_mgmt_g709_otn_fixed_size_label\", \"348\": \"mpls_te_mgmt_gmpls_label\", \"350\": \"mpls_te_mgmt_gmpls_labels\", \"351\": \"mpls_te_mgmt_wdm_uni_tunnel_info\", \"352\": \"mpls_te_tunnel_otn_info\", \"353\": \"mpls_te_s2l_otn_info\", \"354\": \"te_pvt_prot_obj_t\", \"355\": \"mpls_te_s2l_aps_info\", \"356\": \"mpls_te_otn_s2l_info\", \"357\": \"mpls_te_tunnel_static_uni_info\", \"358\": \"mpls_te_transport_tunnel_info\", \"359\": \"mpls_te_tunnel_aps_info\", \"360\": \"mpls_te_tunnel_restoration_info\", \"361\": \"mpls_te_tunnel_otn_bidir_info\", \"498\": \"mpls_te_pp_info\", \"129\": \"rsvp_ng_api_stats_entry_bag\", \"130\": \"rsvp_ng_api_stats_bag\", \"131\": \"rsvp_ng_api_ctx_event_bag\", \"132\": \"rsvp_ng_api_ctx_history\", \"133\": \"rsvp_ng_api_ctx_bag\", \"449\": \"te_mgmt_generic_tspec\", \"492\": \"mpls_te_p2mp_s2l\", \"397\": \"te_s2l_sr_path_hop\", \"399\": \"te_pp_sw_log_entry_bag\", \"451\": \"te_mgmt_generic_fspec\", \"448\": \"te_mgmt_g709_otn_tspec\", \"494\": \"mpls_te_p2mp_lsp\", \"452\": \"bandwidth_spec_bag\", \"508\": \"mpls_te_tunnel_bidir_info\", \"496\": \"mpls_te_p2p_info_bag\", \"418\": \"mpls_te_p2mp_pcalc_error\", \"420\": \"mpls_te_p2mp_sig_error\", \"421\": \"mpls_te_p2mp_path_option\", \"423\": \"mpls_te_iep_hop_bag\", \"424\": \"mpls_te_iep_bag\", \"170\": \"rsvp_mgmt_ero_ipv4_subobj\", \"171\": \"rsvp_mgmt_ero_unnum_subobj\", \"172\": \"rsvp_mgmt_ero_subobj\", \"429\": \"mpls_te_tunnels_autobw_status\", \"430\": \"mpls_te_tunnels_autobw_config\", \"431\": \"mpls_te_tunnels_autobw_oper\", \"434\": \"mpls_te_tunnels_tunnel_last_reopt_fail_info\", \"435\": \"mpls_te_tunnels_history_current_connected\", \"436\": \"mpls_te_tunnels_history_current\", \"437\": \"mpls_te_tunnels_history_reopt\", \"438\": \"mpls_te_tunnels_history_path_protect\", \"439\": \"mpls_te_tunnels_history_previous\", \"440\": \"mpls_te_tunnels_history_previous_protect\", \"441\": \"mpls_te_tunnels_history_other_setup\", \"442\": \"mpls_te_tunnels_history_standby_setup\", \"443\": \"mpls_te_tunnels_history_bag\", \"444\": \"mpls_te_tunnels_reverse_ero_error_bag\", \"446\": \"mpls_te_interarea_reopt_info\", \"191\": \"rsvp_mgmt_rro_ipv4_subobj_flags\", \"192\": \"rsvp_mgmt_rro_label_subobj_flags\", \"193\": \"rsvp_mgmt_rro_unnumbered_subobj_flags\", \"194\": \"rsvp_mgmt_rro_ipv4_subobj\", \"195\": \"rsvp_mgmt_rro_label_subobj\", \"196\": \"rsvp_mgmt_rro_unnumbered_subobj\", \"197\": \"rsvp_mgmt_rro_srlg_subobj\", \"198\": \"rsvp_mgmt_rro_subobj\", \"455\": \"te_lsp_convergence_info\", \"458\": \"mpls_te_soft_preemption_head_counters\", \"459\": \"mpls_te_soft_preemption_path_error\", \"460\": \"mpls_te_soft_preemption_tunnel_info\", \"461\": \"mpls_te_soft_preemption_lsp_info\", \"463\": \"tunnel_hop_info\", \"450\": \"te_mgmt_g709_otn_fspec\", \"504\": \"mpls_te_autopcc_info\", \"466\": \"mpls_te_tunnel_bfd_config_info\", \"467\": \"mpls_te_tunnel_bidir_config_info\", \"505\": \"mpls_te_pce_delegation_info\", \"506\": \"mpls_te_path_option_dampening_info\", \"464\": \"te_vif_convergence_info\", \"482\": \"mpls_te_p2mp_dest\", \"483\": \"mpls_te_bfd_session_info\", \"484\": \"mpls_te_bfd_deletion_history\", \"485\": \"mpls_te_head_bfd_info\", \"486\": \"mpls_te_tail_bfd_info\", \"487\": \"mpls_te_s2l_association_object\", \"488\": \"mpls_te_s2l_protection_object\", \"489\": \"flex_lockout_t\", \"490\": \"mpls_te_s2l_flex_info\", \"491\": \"te_s2l_srlg_collect_info\", \"236\": \"te_s2l_fec_t\", \"238\": \"te_addr_type_ipv4_unnum\", \"239\": \"addr\", \"240\": \"te_addr_t_\", \"497\": \"mpls_te_p2mp_tun_cfg_bag\", \"242\": \"mpls_te_tunnel_egress_static_uni_info\", \"499\": \"mpls_te_wsrlg_value_bag\", \"500\": \"mpls_te_wsrlg_hop_bag\", \"501\": \"mpls_te_wsrlg_info_bag\", \"502\": \"mpls_te_autobackup_info\", \"503\": \"mpls_te_automesh_info\", \"248\": \"te_lsp_fec_ctype_data_t\", \"249\": \"te_lsp_fec_t\", \"250\": \"affinity_name_bag\", \"507\": \"mpls_te_tunnel_bfd_info\", \"252\": \"mpls_te_tunnels_affinity_info\", \"253\": \"mpls_srlg_info\"}, \"enums\": {\"te_mgmt_generic_fspec_type\": {\"0\": \"TEGenericFSpecTypeG709OTN\"}, \"te_s2l_sr_path_selection_type\": {\"0\": \"TE_S2L_SRPathSelectionAny\", \"1\": \"TE_S2L_SR_PathSelectionAdjUnprotected\", \"2\": \"TE_S2L_SR_PathSelectionAdjProtected\"}, \"te_rev_ero_reject_reasons_t\": {\"0\": \"None\", \"1\": \"BadReverseERO\", \"2\": \"TieRejected\", \"3\": \"StandbyNotRequired\", \"4\": \"AdminState\", \"5\": \"Priority\", \"6\": \"ClassType\", \"7\": \"BadAssociation\"}, \"mpls_te_lsp_type\": {\"0\": \"MPLS_TE_LSP_TypeNotSet\", \"1\": \"MPLS_TE_LSP_TypeP2P\", \"2\": \"MPLS_TE_LSP_TypeP2MP\", \"3\": \"MPLS_TE_LSP_TypeGMPLS_OUNI\", \"4\": \"MPLS_TE_LSP_TypeGMPLS_NNI\", \"5\": \"MPLS_TE_LSP_TypeP2PBidir\", \"6\": \"MPLS_TE_LSP_TypeGMPLSTp\", \"7\": \"MPLS_TE_LSP_TypeGMPLS_NNI_OTN\", \"8\": \"MPLS_TE_LSP_TypeSegmentRoutingP2P\"}, \"te_autobw_app_trigger_t\": {\"0\": \"ApplicationNone\", \"1\": \"ApplicationPeriodic\", \"2\": \"ApplicationManual\", \"3\": \"ApplicationOverflow\", \"4\": \"ApplicationUnderflow\"}, \"mte_tunnel_oper_state_\": {\"0\": \"TunnelStateOperUnknown\", \"1\": \"OperationalDown\", \"2\": \"OperationalUp\"}, \"mte_tunnel_admin_state_\": {\"0\": \"TunnelStateAdminUnknown\", \"1\": \"AdminShutdown\", \"2\": \"AdminUp\"}, \"te_meshgroup_type_\": {\"0\": \"MeshgroupTypeAutomesh\", \"1\": \"MeshgroupTypeOnehop\"}, \"te_bfd_lsp_session_state\": {\"0\": \"BFDOverLSPSessionStateNone\", \"1\": \"BFDOverLSPSessionStateCreated\", \"2\": \"BFDOverLSPSessionStateUp\", \"3\": \"BFDOverLSPSessionStateDown\", \"4\": \"BFDOverLSPSessionStateAdminDown\", \"5\": \"BFDOverLSPSessionStateDeleted\"}, \"rsvp_ng_api_ctrl_ev_t_\": {\"0\": \"RSVP_NG_API_CTRL_PEER_ID\", \"1\": \"RSVP_NG_API_CTRL_RESTART_TIME\", \"2\": \"RSVP_NG_API_CTRL_IDT_DONE\", \"3\": \"RSVP_NG_API_CTRL_IDT_ACK\", \"4\": \"RSVP_NG_API_CTRL_SR_MSG\", \"5\": \"RSVP_NG_API_CTRL_SR_NACK\", \"6\": \"RSVP_NG_API_NUM_CTRL_EVENTS\", \"-1\": \"RSVP_NG_API_CTRL_INVALID\"}, \"mpls_te_metric_type\": {\"0\": \"MetricIGP\", \"1\": \"MetricTE\"}, \"mpls_te_bw_pool_type\": {\"0\": \"TEBandwidthPool0\", \"1\": \"TEBandwidthPool1\", \"2\": \"TEBandwidthAnyPool\"}, \"AutoBackupSRLGMode\": {\"0\": \"SRLGNotSet\", \"1\": \"SRLGStrict\", \"2\": \"SRLGPreferred\", \"3\": \"SRLGWeighted\"}, \"te_xro_attribute_type\": {\"0\": \"Interface\", \"1\": \"Node\", \"2\": \"SRLGs\"}, \"mpls_te_termination_type_t\": {\"0\": \"NONE\", \"1\": \"Ether\"}, \"rsvp_ng_api_ctx_hist_event_type_t_\": {\"0\": \"RSVP_NG_API_HIST_EV_STATS\"}, \"rsvp_ng_api_ctx_ev_t_\": {\"0\": \"RSVP_NG_API_SLAVE_SRID\", \"1\": \"RSVP_NG_API_SLAVE_DESTROYED\", \"2\": \"RSVP_NG_API_PATH\", \"3\": \"RSVP_NG_API_RESV\", \"4\": \"RSVP_NG_API_ASSIGN_BKUP\", \"5\": \"RSVP_NG_API_ASSIGN_BKUP_ERR\", \"6\": \"RSVP_NG_API_RESV_CONFIRM\", \"7\": \"RSVP_NG_API_RESV_ERR\", \"8\": \"RSVP_NG_API_PATH_ERR\", \"9\": \"RSVP_NG_API_PATH_FRR\", \"10\": \"RSVP_NG_API_PATH_DEL\", \"11\": \"RSVP_NG_API_RESV_DEL\", \"12\": \"RSVP_NG_API_LOCKOUT\", \"13\": \"RSVP_NG_API_DESTROYED\", \"14\": \"RSVP_NG_API_NUM_CTX_EVENTS\", \"-1\": \"RSVP_NG_API_INVALID\"}, \"mpls_te_tunnel_state\": {\"0\": \"StateDown\", \"1\": \"StateUp\", \"2\": \"StateDownPolicy\", \"3\": \"StateLockout\"}, \"te_sr_sid_type\": {\"0\": \"SRSIDNotSet\", \"1\": \"SRSIDNode\", \"2\": \"SRSIDAdj\", \"3\": \"SRSIDUnknown\"}, \"te_serv_type_t\": {\"0\": \"ServicesNone\", \"1\": \"P2MPEgressInfoVIF\", \"2\": \"P2MPServicesAutoTunnelVIF\", \"3\": \"P2PServicesAutoTunnelVIF\", \"4\": \"P2MPServicesEgressInfoS2L\", \"5\": \"ServicesCount\"}, \"mpls_mte_tunnel_fail_reason\": {\"0\": \"MTunnelFailReasonUnapplicable\", \"1\": \"MTunnelFailReasonShutdown\", \"2\": \"MTunnelFailReasonNoDestination\", \"3\": \"MTunnelFailReasonNoPathOption\", \"4\": \"MTunnelFailReasonNoSource\", \"5\": \"MTunnelFailReasonCollaboratorDisc\", \"6\": \"MTunnelFailReasonUnmatchedClassTypePriority\", \"7\": \"MTunnelFailReasonInvalidBidirCfg\", \"8\": \"MTunnelFailReasonPOSwitchover\", \"9\": \"MTunnelFailReasonNoTunnelID\", \"10\": \"MTunnelFailReasonNoLink\", \"11\": \"MTunnelFailReasonLinkShutdown\", \"12\": \"MTunnelFailReasonLinkLMPDown\", \"13\": \"MTunnelFailReasonSourceDestinationSame\", \"14\": \"MTunnelFailReasonOTNNoODULevel\", \"15\": \"MTunnelFailReasonBidirAssocIDMissing\", \"16\": \"MTunnelFailReasonBFDGALOnUnidirectional\", \"17\": \"MTunnelFailReasonNoStaticUni\"}, \"te_mgmt_generic_tspec_type\": {\"0\": \"TEGenericTSpecTypeG709OTN\"}, \"rsvp_mgmt_ero_subobj_type\": {\"1\": \"RSVP_MGMT_ERO_TYPE_IPv4\", \"4\": \"RSVP_MGMT_ERO_TYPE_UNNUM\"}, \"mpls_te_soft_preemption_resolution_\": {\"0\": \"SoftPreemptionResolutionNone\", \"1\": \"SoftPreemptionResolutionPending\", \"2\": \"SoftPreemptionResolutionReoptCompleted\", \"3\": \"SoftPreemptionResolutionTeardown\", \"4\": \"SoftPreemptionResolutionFRRTriggered\", \"5\": \"SoftPreemptionResolutionPathProtetionSwitchover\"}, \"te_xro_subobj_type\": {\"32\": \"AS\", \"1\": \"IPv4\", \"2\": \"IPv6\", \"36\": \"P2P_LSP\", \"6\": \"Unnumbered\", \"34\": \"SRLG\"}, \"te_vif_bfd_encap_mode_t\": {\"0\": \"IP\", \"1\": \"GAL\"}, \"mpls_te_lsp_mode_\": {\"0\": \"MPLS_TE_LSP_ModeNotSet\", \"1\": \"MPLS_TE_LSP_ModeCurrent\", \"2\": \"MPLS_TE_LSP_ModeReopt\", \"3\": \"MPLS_TE_LSP_ModeClean\", \"4\": \"MPLS_TE_LSP_ModeStandby\", \"5\": \"MPLS_TE_LSP_ModePPClean\", \"6\": \"MPLS_TE_LSP_ModeRestore\", \"7\": \"MPLS_TE_LSP_ModeReoptStandby\"}, \"rsvp_mgmt_rro_subobj_type\": {\"1\": \"IPv4RROType\", \"34\": \"SRLG_RROType\", \"3\": \"LabelRROType\", \"4\": \"UnnumberedRROType\"}, \"mpls_te_reopt_decision_reason_\": {\"0\": \"DecisionReasonNone\", \"1\": \"NotSuperset\", \"2\": \"Superset\", \"3\": \"LSP_FRRActive\", \"4\": \"BandwidthChange\", \"5\": \"MetricTypeChange\", \"6\": \"BetterPathOptionIndexes\", \"7\": \"InterAreaPreferredPathExists\", \"8\": \"InterAreaPreferredTreeExists\", \"9\": \"WorsePathOptionIndexes\", \"10\": \"BetterCumulativeMetric\", \"11\": \"WorseCumulativeMetric\", \"12\": \"Identical\", \"13\": \"NoS2Ls\", \"14\": \"NoCurrentLSP\", \"15\": \"UserPathOptionSwitchover\", \"16\": \"BetterHops\", \"17\": \"WorseHops\", \"18\": \"PCEForce\", \"19\": \"AffinityChanged\", \"20\": \"CostLimit\", \"21\": \"SigTimeout\", \"22\": \"NotSupersetInstTimerExpired\", \"23\": \"PathVerifictionFailed\", \"24\": \"SoftPreemptionRecovery\", \"25\": \"IepChanged\", \"26\": \"PoChanged\", \"27\": \"DestChanged\", \"28\": \"BetterIGPArea\", \"29\": \"WorseIGPArea\", \"30\": \"BetterBandwidthLoadBalancing\", \"31\": \"WorseBandwidthLoadBalancing\", \"32\": \"BFDSessionDown\", \"33\": \"AutoPCCReopt\", \"34\": \"SREgressPathChanged\", \"35\": \"OverloadBitSet\", \"36\": \"BetterDiversity\", \"37\": \"WorseDiversity\", \"38\": \"LSPDropMode\", \"39\": \"NotUsed\"}, \"mte_path_option_type\": {\"0\": \"None\", \"1\": \"Dynamic\", \"2\": \"Explicit\", \"3\": \"NoERO\", \"4\": \"SegmentRouting\", \"5\": \"POCount\"}, \"te_destination_state_t_\": {\"0\": \"DestinationDisabled\", \"1\": \"DestinationDown\", \"2\": \"DestinationUp\"}, \"mte_reopt_trigger_\": {\"0\": \"NoTrigger\", \"1\": \"TimerTrigger\", \"2\": \"BandwidthChangeTrigger\", \"3\": \"AutoBandwidthOverflowTrigger\", \"4\": \"AutoBandwidthUnderflowTrigger\", \"5\": \"AutoBandwidthAdjustmentTrigger\", \"6\": \"MetricTypeChangeTrigger\", \"7\": \"UserTrigger\", \"8\": \"FRRTrigger\", \"9\": \"RemergeErrorTrigger\", \"10\": \"PreferredPathTrigger\", \"11\": \"PreferredTreeTrigger\", \"12\": \"DueToMaximumMetric\", \"13\": \"PathOptionSwitchoverTrigger\", \"14\": \"PathProtectionSwitchoverTrigger\", \"15\": \"IEPEnableReoptimizationTrigger\", \"16\": \"AffinityPathVerificationFailTrigger\", \"17\": \"CostLimitPathVerificationFailTrigger\", \"18\": \"SoftPreemptionTrigger\", \"19\": \"IepChanged\", \"20\": \"PoChanged\", \"21\": \"DestChanged\", \"22\": \"ReoptTryToForceIt\", \"23\": \"TopologyChangeTrigger\", \"24\": \"ReoptLinkUpEvent\", \"25\": \"BFDSessionDownTrigger\", \"26\": \"ReverseAssocS2LReceivedTrigger\", \"27\": \"GMPLS_UNIMultilayerTrigger\", \"28\": \"GMPLS_UNIUserTrigger\", \"29\": \"PathSelectionTiebreakerChangeTrigger\", \"30\": \"SREgressPathChangeTrigger\", \"31\": \"OverloadBitTrigger\", \"32\": \"PCETrigger\", \"33\": \"LockoutMetricTrigger\", \"34\": \"HigherPriorityPOChangeTrigger\", \"35\": \"TriggerNotUsed\"}, \"te_p2mp_s2l_deletion_subcause_t\": {\"0\": \"NoSubcause\", \"1\": \"CleanupReq\", \"2\": \"InvalidData\", \"3\": \"FsmInvCtxt\", \"4\": \"FsmInvCtxtData\", \"5\": \"FsmInvRole\", \"6\": \"LLFailure\", \"7\": \"LLRelFail\", \"8\": \"LLMismatch\", \"9\": \"LLInvalid\", \"10\": \"LLSetFailure\", \"11\": \"BadOutLabel\", \"12\": \"SLErr\", \"13\": \"RLMismatch\", \"14\": \"SLAllocErr\", \"15\": \"UpstreamDownstreamLabelMismatch\", \"16\": \"UpstreamLabelFailure\", \"17\": \"UpstreamLabelRelFail\", \"18\": \"UpstreamLabelMismatch\", \"19\": \"UpstreamLabelInvalid\", \"20\": \"BadUpstreamLabel\", \"21\": \"ULSetFailure\", \"22\": \"GMPLSLabelAllocErr\", \"23\": \"GMPLSLabelCloneErr\", \"24\": \"RwErr\", \"25\": \"UpRwErr\", \"26\": \"PathAdmit\", \"27\": \"BW\", \"28\": \"AdmitResv\", \"29\": \"RRRMErr\", \"30\": \"CompRid\", \"31\": \"CompLclRid\", \"32\": \"CompUpRid\", \"33\": \"CompDownRid\", \"34\": \"RestIfHop\", \"35\": \"InvInIf\", \"36\": \"NhErr\", \"37\": \"InvInEro\", \"38\": \"OutEroFail\", \"39\": \"FrrBkAsssign\", \"40\": \"FrrBkRm\", \"41\": \"FrrBkSend\", \"42\": \"FrrNeedsDel\", \"43\": \"FrrReoptLsp\", \"44\": \"RsvpApiH\", \"45\": \"InsanePath\", \"46\": \"RemergeChkFail\", \"47\": \"RemergeDetected\", \"48\": \"XRO\", \"49\": \"ResvBwSet\", \"50\": \"ResvPrepFail\", \"51\": \"PathChProc\", \"52\": \"PathChFrr\", \"53\": \"PathChSessAttriFl\", \"54\": \"PathChBwCh\", \"55\": \"PathErrProc\", \"56\": \"PathErr\", \"57\": \"PathErrWPSR\", \"58\": \"PathDel\", \"59\": \"ResvChProc\", \"60\": \"ResvChRro\", \"61\": \"ResvDel\", \"62\": \"ResvErr\", \"63\": \"PerrSendFail\", \"64\": \"PerrProcFail\", \"65\": \"PerrRcv\", \"66\": \"ResvErrRcv\", \"67\": \"Flowspec\", \"68\": \"SetupConnApiFail\", \"69\": \"PathNotReplayed\", \"70\": \"ResvNotReplayed\", \"71\": \"RewriteNotReplayed\", \"72\": \"LabelNotReplayed\", \"73\": \"ConnectionNotReady\", \"74\": \"MasterDidNotReplay\", \"75\": \"HeadS2LHasNoVIF\", \"76\": \"FRRAssignedS2LHasNoBackup\", \"77\": \"FRRAssignedS2LHasDownBackup\", \"78\": \"OutLinkDownAndNoFRR\", \"79\": \"CollaboratorTimeoutRSVP\", \"80\": \"CollaboratorTimeoutLSD\", \"81\": \"CollaboratorTimeoutLMRIB\", \"82\": \"CollaboratorTimeoutIM\", \"83\": \"CollaboratorTimeoutError\", \"84\": \"TopoFlush\", \"85\": \"AreaShut\", \"86\": \"ActivePoDel\", \"87\": \"PathVerifyFailed\", \"88\": \"SrlgPathVerifyFailed\", \"89\": \"AffinityPathVerifyFailed\", \"90\": \"AffFailDelayedTearTimeoutFailed\", \"91\": \"CostLimitVerifyFailed\", \"92\": \"PathSetupTimeout\", \"93\": \"VifDestroyed\", \"94\": \"VifShut\", \"95\": \"LspShut\", \"96\": \"GMPLS_UNIHead\", \"97\": \"HeadResetup\", \"98\": \"NoneHeadResetup\", \"99\": \"DestDisabled\", \"100\": \"IepChActPo\", \"101\": \"IepChReopt\", \"102\": \"IepChStandby\", \"103\": \"DsteModeCh\", \"104\": \"ReoptDelFrrAct\", \"105\": \"NewReoptTearOld\", \"106\": \"ReoptFailedVerify\", \"107\": \"ReoptFailedInstall\", \"108\": \"ReoptFailedRW\", \"109\": \"ReoptFailedNotSuperset\", \"110\": \"DcleanAtInstallTime\", \"111\": \"DcleanAtCleanTimer\", \"112\": \"DcleanAtReoptActive\", \"113\": \"LclNotifHead\", \"114\": \"InIfFail\", \"115\": \"OutIfFail\", \"116\": \"IfFailLcOIR\", \"117\": \"TERidRm\", \"118\": \"TeRsvpOosBkup\", \"119\": \"InIfFailExpNullCfgCh\", \"120\": \"NewCurrLspSig\", \"121\": \"NewReoptLspSig\", \"122\": \"NewStdbyLspSig\", \"123\": \"NewRestoreLspSig\", \"124\": \"NewClPpLspSig\", \"125\": \"ChkptRecoveryFailed\", \"126\": \"StdbyCrFailed\", \"127\": \"ReoptLSPRej\", \"128\": \"ReoptPoSwFailed\", \"129\": \"FailedToFindPath\", \"130\": \"SigRcvFailPathCrCh\", \"131\": \"LspDbShut\", \"132\": \"ReoptHoldStart\", \"133\": \"VifLspidMismatch\", \"134\": \"S2LHasNoVIF\", \"135\": \"OverloadReoptTimeout\", \"136\": \"HopLimitExceeded\", \"137\": \"LingeringCurrentLsp\", \"138\": \"LingeringStandbyLsp\", \"139\": \"LingeringRestoreLsp\", \"140\": \"DoubleLockout\", \"141\": \"LockoutNoProtection\", \"142\": \"LockoutCleanup\", \"143\": \"TePpswLspMismatch\", \"144\": \"TeStdbyupNoCurrLSP\", \"145\": \"StdbyFailedRW\", \"146\": \"ReoptLspTearPPSW\", \"147\": \"DelayPPLspTearPPSW\", \"148\": \"StdbyFailedVerify\", \"149\": \"StdbyNotNeededDueToRestore\", \"150\": \"RestoreFailedVerify\", \"151\": \"RestoreFailedInstall\", \"152\": \"RestoreFailedRewrite\", \"153\": \"TePpswCfgRmvd\", \"154\": \"TePpswManualPPSW\", \"155\": \"TePpswBidirPChgPPSW\", \"156\": \"TePpswBidirLockoutPPSW\", \"157\": \"DcleanAtPPCleanTimer\", \"158\": \"ReoptStandbyFailed\", \"159\": \"StandbyReoptimized\", \"160\": \"StandbyReoptimizeAborted\", \"161\": \"TeReoptupNoCurrLSP\", \"162\": \"TeReoptCurrLSPDown\", \"163\": \"TeCleanedtCurrLSPDown\", \"164\": \"TeDelayLSPUp\", \"165\": \"NoRouteDueToAffinity\", \"166\": \"NoRibLkupBadEroGmpls\", \"167\": \"CleanupLingering\", \"168\": \"TE_S2L_DEL_SC_SOFT_PREEMPTION_TIMEOUT\", \"169\": \"TE_S2L_DEL_SC_SOFT_PREEMPTED_NON_CURRENT\", \"170\": \"TE_S2L_DEL_SC_VIF_SYNC_LSP_DEL\", \"171\": \"RsvpApiCleanupReq\", \"172\": \"TE_S2L_DEL_SC_FRR_WRONG_BACKUP\", \"173\": \"TE_S2L_DEL_SC_BFD_SESSION_CREATE_FAILED\", \"174\": \"TE_S2L_DEL_SC_BFD_SESSION_BRINGUP_TIMEOUT\", \"175\": \"TE_S2L_DEL_SC_BFD_SESSION_DOWN\", \"176\": \"TE_S2L_DEL_SC_BFD_SESSION_NOT_REPLAYED\", \"177\": \"TE_S2L_DEL_SC_REOPT_P2MP_EGRESS_INFO_FAIL\", \"178\": \"NonCurrFRRLclNotifEvent\", \"179\": \"UnsupportedEncoding\", \"180\": \"UnsupportedGPID\", \"181\": \"UnsupportedSwitchingType\", \"182\": \"UpstreamLabelChangeNotPermitted\", \"183\": \"EncodingTypeChangeNotPermitted\", \"184\": \"ApsProtectInfoChangeFailed\", \"185\": \"IncorrectLSPType\", \"186\": \"LocalHopError\", \"187\": \"UnsupportedGMPLSAttributes\", \"188\": \"GMPLS_UNIReoptTriggered\", \"189\": \"GMPLS_UNIActivePathChangeTriggeredReopt\", \"190\": \"MaximumAcceptableLabelRetries\", \"191\": \"InvalidDirection\", \"192\": \"InvalidRewriteContext\", \"193\": \"InvalidLabelContext\", \"194\": \"DWDMCapabilityChanged\", \"195\": \"DWDMCapabilityRemoved\", \"196\": \"DWDMWavelengthRemoved\", \"197\": \"GMPLS_UNIMultilayerRestoration\", \"198\": \"GMPLS_UNIUserTriggeredReoptimization\", \"199\": \"PassiveMatchErr\", \"200\": \"EgressControlErr\", \"201\": \"EgressControlMapErr\", \"202\": \"RestoreNotNeededForCurrent\", \"203\": \"RestoreNotNeededForStandby\", \"204\": \"RestoreDpDown\", \"205\": \"BadProtctObj\", \"206\": \"OpticalLinkDown\", \"207\": \"OpticalLinkLSPOutOfSync\", \"208\": \"OpticalLinkOwnerOutOfSync\", \"209\": \"OpticalLinkInterfaceHandleOutOfSync\", \"210\": \"OpticalLinkHopOutOfSync\", \"211\": \"OpticalLinkRoleOutOfSync\", \"212\": \"OpticalLinkDownstreamRouterIDOutOfSync\", \"213\": \"OpticalLinkUpstreamRouterIDOutOfSync\", \"214\": \"OpticalLinkEncodingTypeOutOfSync\", \"215\": \"OpticalLinkSwitchingTypeOutOfSync\", \"216\": \"OpticalLinkGPIDOutOfSync\", \"217\": \"EgressOpticalLinkNotFound\", \"218\": \"IngressOpticalLinkNotFound\", \"219\": \"SyncDestState\", \"220\": \"ProtObjectErr\", \"221\": \"ReverseS2LDeleted\", \"222\": \"CancelInprogressBySlave\", \"223\": \"InvalidReverseERO\", \"224\": \"ReverseLSPNotFound\", \"225\": \"ReverseLSPNotPresent\", \"226\": \"AssociatedVIFDown\", \"227\": \"VIFSyncProcessing\", \"228\": \"IncomingInterfaceLockout\", \"229\": \"SREgressPathChanged\", \"230\": \"InIfFailImpNullCfgCh\", \"231\": \"ReverseLSPFailure\", \"232\": \"FsmScMustBeLast\"}, \"te_s2l_fsm_state_e\": {\"0\": \"TE_S2L_FSM_ST_NONE\", \"1\": \"TE_S2L_FSM_ST_INIT\", \"2\": \"TE_S2L_FSM_ST_WAIT_RESV\", \"3\": \"TE_S2L_FSM_ST_WAIT_LABEL\", \"4\": \"TE_S2L_FSM_ST_WAIT_RW\", \"5\": \"TE_S2L_FSM_ST_WAIT_BFD_SESSION_UP\", \"6\": \"TE_S2L_FSM_ST_UP\", \"7\": \"TE_S2L_FSM_ST_UP_FRR_ACTIVE\", \"8\": \"TE_S2L_FSM_ST_HA_RECOVERY\", \"9\": \"TE_S2L_FSM_ST_LINGERING\", \"10\": \"TE_S2L_FSM_ST_SOFT_PREEMPTED\", \"11\": \"TE_S2L_FSM_ST_SYNC_UP\", \"12\": \"TE_S2L_FSM_ST_SYNC_DOWN\", \"13\": \"TE_S2L_FSM_ST_SYNCING\", \"14\": \"TE_S2L_FSM_ST_SYNC_DELETE\", \"15\": \"TE_S2L_FSM_ST_WAIT_UPSTREAM_LABEL\", \"16\": \"TE_S2L_FSM_ST_WAIT_UPSTREAM_RW\", \"17\": \"TE_S2L_FSM_ST_LOCKOUT\", \"18\": \"TE_S2L_FSM_ST_LAST\"}, \"te_controller_state_e\": {\"0\": \"Notready\", \"1\": \"AdminDown\", \"2\": \"Down\", \"3\": \"Shutdown\", \"4\": \"ErrorDisabled\", \"5\": \"Up\", \"6\": \"Unknown\"}, \"tunnel_attribute_set_type_e_\": {\"0\": \"TunnelAttributeSetNone\", \"1\": \"TunnelAttributeSetStatic\", \"2\": \"TunnelAttributeSetPathOption\", \"3\": \"TunnelAttributeSetNotUsed\", \"4\": \"TunnelAttributeSetAutoBackup\", \"5\": \"TunnelAttributeSetAutoMesh\", \"6\": \"TunnelAttributeSetXRO\", \"7\": \"TunnelAttributeSetP2MPTE\", \"8\": \"TunnelAttributeAPS_PP\", \"9\": \"TunnelAttributeSetP2P_TE\"}, \"gmpls_uni_mgmt_wdm_grid\": {\"0\": \"NotSet\", \"1\": \"DWDM\", \"2\": \"CWDM\"}, \"mpls_te_frr_state\": {\"0\": \"FRRInactive\", \"1\": \"FRRActive\", \"2\": \"FRRReady\"}, \"mpls_te_mgmt_gmpls_label_origin_type\": {\"0\": \"NotSet\", \"1\": \"UNI_C\", \"2\": \"UNI_N\"}, \"te_serv_tun_client_\": {\"0\": \"TE_SERV_AUTO_TUN_CLIENT_INVALID\", \"1\": \"TE_SERV_P2MP_TUN_CLIENT_MVPN\", \"2\": \"TE_SERV_P2MP_TUN_CLIENT_VPLS\", \"3\": \"TE_SERV_P2MP_TUN_CLIENT_MVPN6\", \"4\": \"TE_SERV_P2P_TUN_CLIENT_BGP\", \"5\": \"TE_SERV_P2P_TUN_CLIENT_STATICv4\", \"6\": \"TE_SERV_P2P_TUN_CLIENT_STATICv6\", \"7\": \"TE_SERV_AUTO_TUN_CLIENT_COUNT\"}, \"mpls_te_loadshare_type\": {\"0\": \"LoadshareEqual\", \"1\": \"LoadshareBandwidthBased\", \"2\": \"LoadshareConfigured\"}, \"te_attribute_set_sr_prepend_type\": {\"0\": \"TEAttributeSetSRPrependNotSet\", \"1\": \"TEAttributeSetSRPrependNextLabel\", \"2\": \"TEAttributeSetSRPrependBGPNhop\"}, \"te_path_inval_action_type\": {\"0\": \"None\", \"1\": \"Tear\", \"2\": \"Drop\"}, \"mpls_te_pce_fail_reasons\": {\"0\": \"TE_PCEFailNoReason\", \"1\": \"TE_PCEFailNoPCE\", \"2\": \"TE_PCEFailSubPool\", \"3\": \"TE_PCEFailIntraArea\", \"4\": \"TE_PCEFailGMPLS\", \"5\": \"TE_PCEFailPending\", \"6\": \"TE_PCEFailOOR\", \"7\": \"TE_PCEFailBidirectional\", \"8\": \"TE_PCEFailNoPath\", \"9\": \"TE_PCEFailRequestTimeout\"}, \"te_protect_type_e\": {\"8\": \"ProtectType1Plus1UnidirAps\", \"16\": \"ProtectType1Plus1BidirAps\", \"4\": \"ProtectType1Plus1UnidirNoAps\", \"255\": \"ProtectTypeNotSet\"}, \"AutoBackupProtectionType\": {\"0\": \"ProtectionNone\", \"1\": \"ProtectionNextHop\", \"2\": \"ProtectionNextNextHop\"}, \"mpls_te_uni_type_t\": {\"0\": \"NONE\", \"1\": \"XC\", \"2\": \"TERM\"}, \"te_aps_snc_mode_e\": {\"0\": \"SncModeNotSet\", \"1\": \"SncModeN\", \"2\": \"SncModeI\", \"3\": \"SncModeS\"}, \"flex_lsp_lockout_origination_t\": {\"0\": \"LockoutOriginationNone\", \"1\": \"LockoutOriginationLocal\", \"2\": \"LockoutOriginationRemote\"}, \"mpls_te_pathoption_type_\": {\"0\": \"PathOptionUnknown\", \"1\": \"PathOptionDynamic\", \"2\": \"PathOptionExplicitName\", \"3\": \"PathOptionExplicitID\", \"4\": \"PathOptionPCE\", \"5\": \"PathOptionNoERO\", \"6\": \"PathOptionSegmentRouting\"}, \"te_hop_limit_ignore_t\": {\"0\": \"IgnoreUnknown\", \"1\": \"IgnoreExplicit\", \"2\": \"IgnorePCE\"}, \"te_association_tie_role_\": {\"0\": \"None\", \"1\": \"Master\", \"2\": \"Slave\"}, \"te_s2l_fsm_ev_e_\": {\"0\": \"TE_S2L_FSM_EV_NONE\", \"1\": \"TE_S2L_FSM_EV_DESTROY\", \"2\": \"TE_S2L_FSM_EV_PREEMPTION\", \"3\": \"TE_S2L_FSM_EV_SOFT_PREEMPTION\", \"4\": \"TE_S2L_FSM_EV_SOFT_PREEMPTION_TIMEOUT\", \"5\": \"TE_S2L_FSM_EV_PREEMPTION_GRACEFUL\", \"6\": \"TE_S2L_FSM_EV_RSVP_PATH_CREATE\", \"7\": \"TE_S2L_FSM_EV_RSVP_PATH_CHANGE\", \"8\": \"TE_S2L_FSM_EV_RSVP_PATH_ERR\", \"9\": \"TE_S2L_FSM_EV_RSVP_PATH_DEL\", \"10\": \"TE_S2L_FSM_EV_RSVP_RESV_CREATE\", \"11\": \"TE_S2L_FSM_EV_RSVP_RESV_CHANGE\", \"12\": \"TE_S2L_FSM_EV_RSVP_RESV_ERR\", \"13\": \"TE_S2L_FSM_EV_RSVP_RESV_DEL\", \"14\": \"TE_S2L_FSM_EV_RSVP_RESV_CONFIRM\", \"15\": \"TE_S2L_FSM_EV_TE_BACKUP_CHANGE\", \"16\": \"TE_S2L_FSM_EV_RSVP_BACKUP_FAILED\", \"17\": \"TE_S2L_FSM_EV_FRR_ACTIVATE_FRR\", \"18\": \"TE_S2L_FSM_EV_LOCAL_LABEL_AVAIL\", \"19\": \"TE_S2L_FSM_EV_LOCAL_LABEL_FAIL\", \"20\": \"TE_S2L_FSM_EV_RW_DONE\", \"21\": \"TE_S2L_FSM_EV_RW_FAILED\", \"22\": \"TE_S2L_FSM_EV_UPSTREAM_LABEL_AVAIL\", \"23\": \"TE_S2L_FSM_EV_UPSTREAM_LABEL_FAIL\", \"24\": \"TE_S2L_FSM_EV_UPSTREAM_RW_DONE\", \"25\": \"TE_S2L_FSM_EV_UPSTREAM_RW_FAILED\", \"26\": \"TE_S2L_FSM_EV_HA_COLLABORATOR_DOWN\", \"27\": \"TE_S2L_FSM_EV_HA_COLLABORATOR_BFD_DOWN\", \"28\": \"TE_S2L_FSM_EV_HA_RECOVERED_FROM_CHKPT\", \"29\": \"TE_S2L_FSM_EV_HA_COLLAB_RECOVERY_DONE\", \"30\": \"TE_S2L_FSM_EV_HA_COLLAB_RESTART_TIMEOUT\", \"31\": \"TE_S2L_FSM_EV_HEAD_PATH_CREATE\", \"32\": \"TE_S2L_FSM_EV_HEAD_PATH_MODIFY\", \"33\": \"TE_S2L_FSM_EV_RSVP_SR_NOTIF\", \"34\": \"TE_S2L_FSM_EV_SYNC_UPDATE\", \"35\": \"TE_S2L_FSM_EV_SYNC_DELETE\", \"36\": \"TE_S2L_FSM_EV_SYNCED_MASTER\", \"37\": \"TE_S2L_FSM_EV_SWITCHOVER\", \"38\": \"TE_S2L_FSM_EV_FRR_PENDING\", \"39\": \"TE_S2L_FSM_EV_CONFIG_CHANGE\", \"40\": \"TE_S2L_FSM_EV_TE_EXIT\", \"41\": \"TE_S2L_FSM_EV_HEAD_BFD_SESSION_CFG_CREATE\", \"42\": \"TE_S2L_FSM_EV_HEAD_BFD_SESSION_CFG_DELETE\", \"43\": \"TE_S2L_FSM_EV_HEAD_BFD_SESSION_BRINGUP_TIMEOUT\", \"44\": \"TE_S2L_FSM_EV_TAIL_BFD_RMT_DISCR_CHANGED\", \"45\": \"TE_S2L_FSM_EV_BFD_SESSION_UP\", \"46\": \"TE_S2L_FSM_EV_BFD_SESSION_DOWN\", \"47\": \"TE_S2L_FSM_EV_BFD_NBR_SESSION_DOWN\", \"48\": \"TE_S2L_FSM_EV_LOCKOUT_ON\", \"49\": \"TE_S2L_FSM_EV_LOCKOUT_OFF\", \"50\": \"TE_S2L_FSM_EV_SR_IGP_PATH_AVAIL\", \"51\": \"TE_S2L_FSM_EV_LAST\"}, \"rsvp_ng_api_ev_filter_reason_t_\": {\"0\": \"RSVP_NG_API_EV_FILTER_NONE\", \"1\": \"RSVP_NG_API_EV_FILTER_EXPIRED\", \"2\": \"RSVP_NG_API_EV_FILTER_POSTPONE\", \"3\": \"RSVP_NG_API_EV_FILTER_PEER_DESTROYED\", \"4\": \"RSVP_NG_API_EV_FILTER_NO_SRIDS\", \"5\": \"RSVP_NG_API_EV_FILTER_INTERNAL_ERR\", \"6\": \"RSVP_NG_API_EV_FILTER_DESTROY_LOCAL\", \"7\": \"RSVP_NG_API_EV_FILTER_ROLE\"}, \"te_srlg_collect_request_t\": {\"0\": \"None\", \"1\": \"Mandatory\", \"2\": \"Optional\"}, \"mpls_te_metric_qualifier\": {\"0\": \"MetricDefault\", \"1\": \"MetricGlobal\", \"2\": \"MetricInterface\"}, \"te_pnr_revert_options_e\": {\"0\": \"PnrOptionnotSet\", \"1\": \"PnrOptionRevertive\", \"2\": \"PnrOptionNonRevertive\"}, \"mpls_te_bfd_session_down_action\": {\"0\": \"Reopt\", \"1\": \"ReSetup\"}, \"te_xro_exclusion_type\": {\"0\": \"Mandatory\", \"1\": \"BestEffort\"}, \"te_odu_level_e\": {\"0\": \"TE_ODULevelNotSet\", \"1\": \"TE_ODULevelOne\", \"2\": \"TE_ODULevelTwo\", \"3\": \"TE_ODULevelThree\", \"4\": \"TE_ODULevelFour\", \"10\": \"TE_ODUZero\", \"11\": \"TE_ODULevelTwoE\", \"20\": \"TE_ODULevelFlexCBR\", \"21\": \"TE_ODULevelFlexGFPFResizeable\", \"22\": \"TE_ODULevelFlexGFPFNonResizable\", \"23\": \"TE_ODULevelOneE\", \"24\": \"TE_ODULevelOneF\", \"25\": \"TE_ODULevelTwoF\", \"26\": \"TE_ODULevelThreeEOne\", \"27\": \"TE_ODULevelThreeETwo\"}, \"mpls_te_soft_preemption_state_\": {\"0\": \"SoftPreemptionNotPending\", \"1\": \"SoftPreemptionPending\"}, \"mpls_te_iep_hop_type_\": {\"0\": \"IEPHopTypeUnknown\", \"1\": \"IEPHopTypeStrictNext\", \"2\": \"IEPHopTypeExclude\", \"3\": \"IEPHopTypeExcludeNode\", \"4\": \"IEPHopTypeExcludeSRLG\", \"5\": \"IEPHopTypeLooseNext\", \"6\": \"IEPHopTypeNext\", \"7\": \"IEPHopTypeShareSRLG\"}, \"te_sig_name_append_\": {\"0\": \"None\", \"1\": \"Address\", \"2\": \"Name\"}, \"rsvp_ng_api_ctx_origin_t_\": {\"0\": \"RSVP_NG_API_ORIGIN_UNKNOWN\", \"1\": \"RSVP_NG_API_ORIGIN_LOCAL\", \"2\": \"RSVP_NG_API_ORIGIN_PEER\"}, \"mpls_te_mgmt_gmpls_label_type\": {\"0\": \"NotSet\", \"1\": \"FixedWDM\", \"2\": \"FixedG709OTN\"}, \"mpls_te_tunnels_signaling_status\": {\"0\": \"Down\", \"1\": \"Recovering\", \"2\": \"Recovered\", \"3\": \"Connected\", \"4\": \"Disabled\", \"5\": \"Proceeding\", \"6\": \"WaitBFDSessionUp\", \"7\": \"WaitSRSegmentPathUp\", \"8\": \"WaitLocalLabel\", \"9\": \"WaitLocalLabelRewrite\"}, \"te_p2mp_s2l_deletion_cause_t\": {\"0\": \"NoCause\", \"1\": \"HPathCrErr\", \"2\": \"HPathChgSetup\", \"3\": \"HPathChgUpErr\", \"4\": \"HResvCrErr\", \"5\": \"HResvChgErr\", \"6\": \"HResvChgErrUp\", \"7\": \"HLblAvailErr\", \"8\": \"HUpLblAvailErr\", \"9\": \"HFrrActErr\", \"10\": \"HBkupChErr\", \"11\": \"HPathChFrrErr\", \"12\": \"HCleanup\", \"13\": \"HLingeringCleanup\", \"14\": \"HPatErr\", \"15\": \"HResvErr\", \"16\": \"HResvDel\", \"17\": \"HRwFail\", \"18\": \"HUpRwFail\", \"19\": \"HaFailure\", \"20\": \"RwDel\", \"21\": \"UpRwDel\", \"22\": \"MPathCr\", \"23\": \"MPathChgSetupErr\", \"24\": \"MPathChgUpErr\", \"25\": \"MResvCrErr\", \"26\": \"MResvChgErr\", \"27\": \"MResvChgErrUp\", \"28\": \"MLblAvailErr\", \"29\": \"MLblRelErr\", \"30\": \"MUpLblAvailErr\", \"31\": \"MUpLblRelErr\", \"32\": \"MFrrActErr\", \"33\": \"MBkupChErr\", \"34\": \"MPathChFrrErr\", \"35\": \"MResvDel\", \"36\": \"MResvErr\", \"37\": \"MPreempt\", \"38\": \"MCleanup\", \"39\": \"MLingeringCleanup\", \"40\": \"MRwFail\", \"41\": \"MUpRwFail\", \"42\": \"TPathCrErr\", \"43\": \"TPathChgErr\", \"44\": \"TResvCrErr\", \"45\": \"TLblAvailErr\", \"46\": \"TCleanup\", \"47\": \"TLingeringCleanup\", \"48\": \"LblErr\", \"49\": \"QFailure\", \"50\": \"RSVP_Recovery\", \"51\": \"LSD_Recovery\", \"52\": \"LMRIB_Recovery\", \"53\": \"TE_Restart\", \"54\": \"Switchover\", \"55\": \"MasterTERecovery\", \"56\": \"Optical_R_Mgr_Recovery\", \"57\": \"TE_Exit\", \"58\": \"Bkup_Assign_Fail\", \"59\": \"BFD_Fail\", \"60\": \"BFD_Recovery\", \"61\": \"FsmCauseMustBeLast\"}, \"te_autobw_app_rej_t\": {\"0\": \"ApplicationAllowed\", \"1\": \"AutoBWDisabled\", \"2\": \"TunnelIsDown\", \"3\": \"TunnelIsFRR\", \"4\": \"TunnelIsBackup\", \"5\": \"TunnelIsLockDown\"}, \"mpls_lib_ctype_t\": {\"0\": \"MPLS_LIB_CTYPE_NULL\", \"1\": \"MPLS_LIB_CTYPE_IPV4\", \"17\": \"MPLS_LIB_CTYPE_P2P_BINDING_LABEL\", \"16\": \"MPLS_LIB_CTYPE_IPV6_TP_TUNNEL\", \"7\": \"MPLS_LIB_CTYPE_IPV4_P2P_TUNNEL\", \"8\": \"MPLS_LIB_CTYPE_IPV6_P2P_TUNNEL\", \"9\": \"MPLS_LIB_CTYPE_IPV4_UNI\", \"13\": \"MPLS_LIB_CTYPE_IPV4_P2MP_TUNNEL\", \"14\": \"MPLS_LIB_CTYPE_IPV6_P2MP_TUNNEL\", \"15\": \"MPLS_LIB_CTYPE_IPV4_TP_TUNNEL\"}, \"gmpls_uni_mgmt_dwdm_cs\": {\"0\": \"NotSet\", \"1\": \"DWDM100GHz\", \"2\": \"DWDM50GHz\", \"3\": \"DWDM25GHz\", \"4\": \"DWDM12GHz\"}, \"te_path_prot_profile_type_e\": {\"0\": \"PathProtProfileType1Plus0\", \"1\": \"PathProtProfileType1PlusR\", \"32\": \"PathProtProfileType1Plus1PlusR\", \"16\": \"PathProtProfileType1Plus1\", \"255\": \"PathProtProfileTypeInvalid\"}, \"te_pp_diversity_t\": {\"0\": \"DiversityNone\", \"1\": \"Link\", \"2\": \"NodeLink\", \"3\": \"Srlg\", \"4\": \"DiversityUser\", \"5\": \"DiversityReverseERO\", \"6\": \"Node\"}, \"te_addr_type_e\": {\"0\": \"NotSet\", \"1\": \"IPv4\", \"2\": \"IPv4Unnumbered\"}, \"mpls_te_tunnel_role\": {\"0\": \"TunnelUnknown\", \"1\": \"TunnelHead\", \"2\": \"TunnelMid\", \"3\": \"TunnelTail\"}}, \"schema_path\": \"RootOper.MPLS_TE.P2P_P2MPTunnel.TunnelHead\", \"v_min\": 8}";
