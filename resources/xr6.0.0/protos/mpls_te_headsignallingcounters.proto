// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto2";

import "cisco.proto";

message te_stats_bag_vif_t {
    option (cisco_msg).schema_path = "RootOper.MPLS_TE.SignallingCounters.HeadSignallingCounters";

    optional string c_type = 1 [(cisco_field).path_element="RootOper.MPLS_TE.SignallingCounters.HeadSignallingCounters(CType)"];
    optional uint32 tunnel_id = 2 [(cisco_field).path_element="RootOper.MPLS_TE.SignallingCounters.HeadSignallingCounters(TunnelID)"];
    optional string tunnel_name = 50 [(cisco_field).name="TunnelName"];
    optional string tunnel_sig_name = 51 [(cisco_field).name="TunnelSigName"];
    optional uint32 tunnel_id_ = 52 [(cisco_field).name="TunnelID"];
    optional uint32 lsp_id = 53 [(cisco_field).name="LSP_ID"];
    optional te_stats_sig_t statistics = 54 [(cisco_field).name="Statistics"];
    repeated te_stats_bag_dest_t destination_statistics = 55 [(cisco_field).name="DestinationStatistics"];
}

message te_stats_sig_t {
    optional uint32 tx_event_unknown = 1 [(cisco_field).name="TXEventUnknown"];
    optional uint32 tx_path_create_event = 2 [(cisco_field).name="TXPathCreateEvent"];
    optional uint32 tx_path_change_event = 3 [(cisco_field).name="TXPathChangeEvent"];
    optional uint32 tx_path_delete_event = 4 [(cisco_field).name="TXPathDeleteEvent"];
    optional uint32 tx_path_error_event = 5 [(cisco_field).name="TXPathErrorEvent"];
    optional uint32 tx_resv_create_event = 6 [(cisco_field).name="TXResvCreateEvent"];
    optional uint32 tx_resv_change_event = 7 [(cisco_field).name="TXResvChangeEvent"];
    optional uint32 tx_resv_delete_event = 8 [(cisco_field).name="TXResvDeleteEvent"];
    optional uint32 tx_resv_error_event = 9 [(cisco_field).name="TXResvErrorEvent"];
    optional uint32 tx_path_reeval_query_event = 10 [(cisco_field).name="TXPathReevalQueryEvent"];
    optional uint32 rx_event_unknown = 11 [(cisco_field).name="RXEventUnknown"];
    optional uint32 rx_path_create_event = 12 [(cisco_field).name="RXPathCreateEvent"];
    optional uint32 rx_path_change_event = 13 [(cisco_field).name="RXPathChangeEvent"];
    optional uint32 rx_path_delete_event = 14 [(cisco_field).name="RXPathDeleteEvent"];
    optional uint32 rx_path_error_event = 15 [(cisco_field).name="RXPathErrorEvent"];
    optional uint32 rx_resv_create_event = 16 [(cisco_field).name="RXResvCreateEvent"];
    optional uint32 rx_resv_change_event = 17 [(cisco_field).name="RXResvChangeEvent"];
    optional uint32 rx_resv_delete_event = 18 [(cisco_field).name="RXResvDeleteEvent"];
    optional uint32 rx_resv_error_event = 19 [(cisco_field).name="RXResvErrorEvent"];
    optional uint32 rx_path_reeval_query_event = 20 [(cisco_field).name="RXPathReevalQueryEvent"];
    optional uint32 tx_backup_assign_event = 21 [(cisco_field).name="TXBackupAssignEvent"];
    optional uint32 rx_backup_assign_err_event = 22 [(cisco_field).name="RXBackupAssignErrEvent"];
    optional uint32 events_total_count = 23 [(cisco_field).name="EventsTotalCount"];
    optional uint32 events_count = 24 [(cisco_field).name="EventsCount"];
}

message te_stats_bag_s2l_t {
    optional bytes sub_group_originator = 1 [(cisco_field).name="SubGroupOriginator"];
    optional uint32 sub_group_id = 2 [(cisco_field).name="SubGroupID"];
    optional bytes destination_address = 3 [(cisco_field).name="DestinationAddress"];
    optional te_stats_sig_t statistics = 4 [(cisco_field).name="Statistics"];
}

message te_stats_bag_dest_t {
    optional bytes destination_address = 1 [(cisco_field).name="DestinationAddress"];
    optional te_stats_sig_t statistics = 2 [(cisco_field).name="Statistics"];
    repeated te_stats_bag_s2l_t s2_l_statistics = 3 [(cisco_field).name="S2LStatistics"];
}

// The following metadata must not be deleted or modified:
option (cisco_file).metadata="{\"bag\": \"te_stats_bag_vif_t\", \"v_maj\": 25, \"version\": 1.0, \"bytecode\": \"$566={TunnelName}s{TunnelSigName}s{TunnelID}I{LSP_ID}I{Statistics}$558{DestinationStatistics}a($565);$558={TXEventUnknown}D{TXPathCreateEvent}D{TXPathChangeEvent}D{TXPathDeleteEvent}D{TXPathErrorEvent}D{TXResvCreateEvent}D{TXResvChangeEvent}D{TXResvDeleteEvent}D{TXResvErrorEvent}D{TXPathReevalQueryEvent}D{RXEventUnknown}D{RXPathCreateEvent}D{RXPathChangeEvent}D{RXPathDeleteEvent}D{RXPathErrorEvent}D{RXResvCreateEvent}D{RXResvChangeEvent}D{RXResvDeleteEvent}D{RXResvErrorEvent}D{RXPathReevalQueryEvent}D{TXBackupAssignEvent}D{RXBackupAssignErrEvent}D{EventsTotalCount}D{EventsCount}D;$563={SubGroupOriginator}N{SubGroupID}I{DestinationAddress}N{Statistics}$558;$565={DestinationAddress}N{Statistics}$558{S2LStatistics}a($563);\", \"schema_names\": [[\"RootOper.MPLS_TE.SignallingCounters.HeadSignallingCounters(CType)\", \"\"], [\"RootOper.MPLS_TE.SignallingCounters.HeadSignallingCounters(TunnelID)\", 1]], \"subtypes\": {\"563\": \"te_stats_bag_s2l_t\", \"565\": \"te_stats_bag_dest_t\", \"558\": \"te_stats_sig_t\"}, \"enums\": {}, \"schema_path\": \"RootOper.MPLS_TE.SignallingCounters.HeadSignallingCounters\", \"v_min\": 8}";
