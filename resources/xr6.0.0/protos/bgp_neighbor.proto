// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto2";

import "cisco.proto";

message bgp_nbr_bag {
    option (cisco_msg).schema_path = "RootOper.BGP.Instance.InstanceActive.DefaultVRF.Neighbor";

    optional string instance_name = 1 [(cisco_field).path_element="RootOper.BGP.Instance(InstanceName)"];
    optional string neighbor_address = 2 [(cisco_field).path_element="RootOper.BGP.Instance.InstanceActive.DefaultVRF.Neighbor(NeighborAddress)"];
    optional uint32 speaker_id = 50 [(cisco_field).name="SpeakerID"];
    optional string description = 51 [(cisco_field).name="Description"];
    optional uint32 local_as = 52 [(cisco_field).name="LocalAS"];
    optional uint32 remote_as = 53 [(cisco_field).name="RemoteAS"];
    optional bool has_internal_link = 54 [(cisco_field).name="HasInternalLink"];
    optional bool is_external_neighbor_not_directly_connected = 55 [(cisco_field).name="IsExternalNeighborNotDirectlyConnected"];
    optional uint32 messages_received = 56 [(cisco_field).name="MessagesReceived"];
    optional uint32 messages_sent = 57 [(cisco_field).name="MessagesSent"];
    optional uint32 update_messages_in = 58 [(cisco_field).name="UpdateMessagesIn"];
    optional uint32 update_messages_out = 59 [(cisco_field).name="UpdateMessagesOut"];
    optional uint32 messages_queued_in = 60 [(cisco_field).name="MessagesQueuedIn"];
    optional uint32 messages_queued_out = 61 [(cisco_field).name="MessagesQueuedOut"];
    optional uint32 connection_established_time = 62 [(cisco_field).name="ConnectionEstablishedTime"];
    optional string connection_state = 63 [(cisco_field).name="ConnectionState"];
    optional uint32 previous_connection_state = 64 [(cisco_field).name="PreviousConnectionState"];
    optional uint32 connection_admin_status = 65 [(cisco_field).name="ConnectionAdminStatus"];
    optional string open_check_error_code = 66 [(cisco_field).name="OpenCheckErrorCode"];
    optional bgp_addrtype connection_local_address = 67 [(cisco_field).name="ConnectionLocalAddress"];
    optional bool is_local_address_configured = 68 [(cisco_field).name="IsLocalAddressConfigured"];
    optional uint32 connection_local_port = 69 [(cisco_field).name="ConnectionLocalPort"];
    optional bgp_addrtype connection_remote_address = 70 [(cisco_field).name="ConnectionRemoteAddress"];
    optional uint32 connection_remote_port = 71 [(cisco_field).name="ConnectionRemotePort"];
    optional uint32 neighbor_interface_handle = 72 [(cisco_field).name="NeighborInterfaceHandle"];
    optional bool reset_notification_sent = 73 [(cisco_field).name="ResetNotificationSent"];
    optional bool is_administratively_shut_down = 74 [(cisco_field).name="IsAdministrativelyShutDown"];
    optional bool is_neighbor_max_prefix_shutdown = 75 [(cisco_field).name="IsNeighborMaxPrefixShutdown"];
    optional bool is_out_of_memory_shutdown = 76 [(cisco_field).name="IsOutOfMemoryShutdown"];
    optional bool is_out_of_memory_forced_up = 77 [(cisco_field).name="IsOutOfMemoryForcedUp"];
    optional bool is_ebgp_peer_as_league = 78 [(cisco_field).name="IsEBGPPeerASLeague"];
    optional bool is_ebgp_peer_common_admin = 79 [(cisco_field).name="IsEBGPPeerCommonAdmin"];
    optional bool ttl_security_enabled = 80 [(cisco_field).name="TTLSecurityEnabled"];
    optional bool suppress4_byte_as = 81 [(cisco_field).name="Suppress4ByteAs"];
    optional string bfd_session_state = 82 [(cisco_field).name="BFDSessionState"];
    optional string bfd_session_created_state = 83 [(cisco_field).name="BFDSessionCreatedState"];
    optional string bfd_session_enable_mode = 84 [(cisco_field).name="BFDSessionEnableMode"];
    optional uint32 bfd_minintervalval = 85 [(cisco_field).name="BFDMinintervalval"];
    optional uint32 bfd_multiplierval = 86 [(cisco_field).name="BFDMultiplierval"];
    optional uint64 bfd_state_ts = 87 [(cisco_field).name="BfdStateTs"];
    optional bytes router_id = 88 [(cisco_field).name="RouterID"];
    optional uint32 negotiated_protocol_version = 89 [(cisco_field).name="NegotiatedProtocolVersion"];
    optional uint32 ebgp_time_to_live = 90 [(cisco_field).name="EBGPTimeToLive"];
    optional bool is_ebgp_multihop_bgpmpls_forwarding_disabled = 91 [(cisco_field).name="IsEBGPMultihopBGPMPLSForwardingDisabled"];
    optional uint32 tcpmss = 92 [(cisco_field).name="TCPMSS"];
    optional uint32 msg_log_in = 93 [(cisco_field).name="MsgLogIn"];
    optional uint32 msg_log_out = 94 [(cisco_field).name="MsgLogOut"];
    optional uint32 neighbor_local_as = 95 [(cisco_field).name="NeighborLocalAS"];
    optional bool local_as_no_prepend = 96 [(cisco_field).name="LocalASNoPrepend"];
    optional bool is_capability_negotiation_performed = 97 [(cisco_field).name="IsCapabilityNegotiationPerformed"];
    optional bool is_route_refresh_capability_received = 98 [(cisco_field).name="IsRouteRefreshCapabilityReceived"];
    optional bool is_route_refresh_old_capability_received = 99 [(cisco_field).name="IsRouteRefreshOldCapabilityReceived"];
    optional bool is_gr_aware = 100 [(cisco_field).name="IsGRAware"];
    optional bool is4_byte_as_capability_received = 101 [(cisco_field).name="Is4ByteASCapabilityReceived"];
    optional bool is4_byte_as_capability_sent = 102 [(cisco_field).name="Is4ByteASCapabilitySent"];
    optional bool multi_protocol_capability_received = 103 [(cisco_field).name="MultiProtocolCapabilityReceived"];
    optional uint32 hold_time = 104 [(cisco_field).name="HoldTime"];
    optional uint32 keep_alive_time = 105 [(cisco_field).name="KeepAliveTime"];
    optional uint32 configured_hold_time = 106 [(cisco_field).name="ConfiguredHoldTime"];
    optional uint32 configured_keepalive = 107 [(cisco_field).name="ConfiguredKeepalive"];
    optional uint32 configured_min_acc_hold_time = 108 [(cisco_field).name="ConfiguredMinAccHoldTime"];
    optional uint32 min_advertise_interval = 109 [(cisco_field).name="MinAdvertiseInterval"];
    optional uint32 min_advertise_interval_msecs = 110 [(cisco_field).name="MinAdvertiseIntervalMsecs"];
    optional uint32 min_origination_interval = 111 [(cisco_field).name="MinOriginationInterval"];
    optional uint32 connect_retry_interval = 112 [(cisco_field).name="ConnectRetryInterval"];
    optional uint32 time_since_last_update = 113 [(cisco_field).name="TimeSinceLastUpdate"];
    optional uint32 time_since_last_read = 114 [(cisco_field).name="TimeSinceLastRead"];
    optional uint32 time_since_last_read_reset = 115 [(cisco_field).name="TimeSinceLastReadReset"];
    optional uint64 time_last_cb = 116 [(cisco_field).name="TimeLastCB"];
    optional uint32 time_last_cb_reset = 117 [(cisco_field).name="TimeLastCBReset"];
    optional uint64 time_last_fb = 118 [(cisco_field).name="TimeLastFB"];
    optional uint32 count_last_write = 119 [(cisco_field).name="CountLastWrite"];
    optional uint32 time_since_last_write = 120 [(cisco_field).name="TimeSinceLastWrite"];
    optional uint32 attempted_last_write_bytes = 121 [(cisco_field).name="AttemptedLastWriteBytes"];
    optional uint32 actual_last_write_bytes = 122 [(cisco_field).name="ActualLastWriteBytes"];
    optional uint32 time_since_second_last_write = 123 [(cisco_field).name="TimeSinceSecondLastWrite"];
    optional uint32 attempted_second_last_write_bytes = 124 [(cisco_field).name="AttemptedSecondLastWriteBytes"];
    optional uint32 actual_second_last_write_bytes = 125 [(cisco_field).name="ActualSecondLastWriteBytes"];
    optional uint32 time_since_last_write_reset = 126 [(cisco_field).name="TimeSinceLastWriteReset"];
    optional uint32 attempted_last_write_reset_bytes = 127 [(cisco_field).name="AttemptedLastWriteResetBytes"];
    optional uint32 actual_last_write_reset_bytes = 128 [(cisco_field).name="ActualLastWriteResetBytes"];
    optional uint32 time_since_second_last_write_reset = 129 [(cisco_field).name="TimeSinceSecondLastWriteReset"];
    optional uint32 attempted_second_last_write_reset_bytes = 130 [(cisco_field).name="AttemptedSecondLastWriteResetBytes"];
    optional uint32 actual_second_last_write_reset_bytes = 131 [(cisco_field).name="ActualSecondLastWriteResetBytes"];
    optional uint32 last_write_event = 132 [(cisco_field).name="LastWriteEvent"];
    optional uint32 second_last_write_event = 133 [(cisco_field).name="SecondLastWriteEvent"];
    optional uint32 last_k_aexpiry_reset = 134 [(cisco_field).name="LastKAexpiryReset"];
    optional uint32 second_last_k_aexpiry_reset = 135 [(cisco_field).name="SecondLastKAexpiryReset"];
    optional uint32 last_k_anotsent_reset = 136 [(cisco_field).name="LastKAnotsentReset"];
    optional uint32 last_k_aerror_reset = 137 [(cisco_field).name="LastKAerrorReset"];
    optional uint32 last_k_astart_reset = 138 [(cisco_field).name="LastKAstartReset"];
    optional uint32 second_last_k_astart_reset = 139 [(cisco_field).name="SecondLastKAstartReset"];
    optional uint32 connection_up_count = 140 [(cisco_field).name="ConnectionUpCount"];
    optional uint32 connection_down_count = 141 [(cisco_field).name="ConnectionDownCount"];
    optional uint32 time_since_connection_last_dropped = 142 [(cisco_field).name="TimeSinceConnectionLastDropped"];
    optional string reset_reason = 143 [(cisco_field).name="ResetReason"];
    optional string peer_reset_reason = 144 [(cisco_field).name="PeerResetReason"];
    optional uint32 peer_error_code = 145 [(cisco_field).name="PeerErrorCode"];
    optional uint32 last_notify_error_code = 146 [(cisco_field).name="LastNotifyErrorCode"];
    optional uint32 last_notify_error_subcode = 147 [(cisco_field).name="LastNotifyErrorSubcode"];
    optional bgp_notfntype_ send_notification_info = 148 [(cisco_field).name="SendNotificationInfo"];
    optional bgp_notfntype_ received_notification_info = 149 [(cisco_field).name="ReceivedNotificationInfo"];
    optional uint32 error_notifies_received = 150 [(cisco_field).name="ErrorNotifiesReceived"];
    optional uint32 error_notifies_sent = 151 [(cisco_field).name="ErrorNotifiesSent"];
    optional uint32 remote_as_number = 152 [(cisco_field).name="RemoteASNumber"];
    optional uint32 dmz_link_bandwidth = 153 [(cisco_field).name="DMZLinkBandwidth"];
    optional uint32 tos_type = 154 [(cisco_field).name="TOSType"];
    optional uint32 tos_value = 155 [(cisco_field).name="TOSValue"];
    optional bgp_perf_nbr_ performance_statistics = 156 [(cisco_field).name="PerformanceStatistics"];
    optional string tcp_session_open_mode = 158 [(cisco_field).name="TCPSessionOpenMode"];
    optional string vrf_name = 159 [(cisco_field).name="VRFName"];
    optional bool standby_rp = 160 [(cisco_field).name="StandbyRP"];
    optional bool nsr_enabled = 161 [(cisco_field).name="NSREnabled"];
    optional bool graceful_restart_enabled_nbr = 162 [(cisco_field).name="GracefulRestartEnabledNbr"];
    optional uint32 gr_restart_time = 163 [(cisco_field).name="GrRestartTime"];
    optional uint32 gr_stale_path_time = 164 [(cisco_field).name="GrStalePathTime"];
    optional uint32 fssn_offset = 165 [(cisco_field).name="FssnOffset"];
    optional uint32 fpbsn_offset = 166 [(cisco_field).name="FpbsnOffset"];
    optional uint32 last_ackd_seq_no = 167 [(cisco_field).name="LastAckdSeqNo"];
    optional uint32 bytes_written = 168 [(cisco_field).name="BytesWritten"];
    optional uint32 bytes_read = 169 [(cisco_field).name="BytesRead"];
    optional uint32 socket_read_bytes = 170 [(cisco_field).name="SocketReadBytes"];
    optional bool is_read_disabled = 171 [(cisco_field).name="IsReadDisabled"];
    optional uint32 update_bytes_read = 172 [(cisco_field).name="UpdateBytesRead"];
    optional string nsr_state = 173 [(cisco_field).name="NSRState"];
    optional bool is_passive_close = 174 [(cisco_field).name="IsPassiveClose"];
    optional bool nbr_enforce_first_as = 175 [(cisco_field).name="NbrEnforceFirstAS"];
    optional uint32 active_bmp_servers = 176 [(cisco_field).name="ActiveBMPServers"];
    optional uint32 nbr_cluster_id = 177 [(cisco_field).name="NbrClusterID"];
    optional uint32 nbr_in_cluster = 178 [(cisco_field).name="NbrInCluster"];
    optional bool ignore_connected = 179 [(cisco_field).name="IgnoreConnected"];
    optional bool internal_vpn_client = 180 [(cisco_field).name="InternalVPNClient"];
    optional bool io_armed = 181 [(cisco_field).name="IoArmed"];
    optional bool read_armed = 182 [(cisco_field).name="ReadArmed"];
    optional bool write_armed = 183 [(cisco_field).name="WriteArmed"];
    optional bgp_nbr_msg_stats message_statistics = 184 [(cisco_field).name="MessageStatistics"];
    optional uint32 discard_data_bytes = 185 [(cisco_field).name="DiscardDataBytes"];
    optional bool local_as_replace_as = 186 [(cisco_field).name="LocalASReplaceAS"];
    optional bool local_as_dual_as = 187 [(cisco_field).name="LocalASDualAS"];
    optional bool local_as_dual_as_mode_native = 188 [(cisco_field).name="LocalASDualASModeNative"];
    optional bool egress_peer_engineering_enabled = 189 [(cisco_field).name="EgressPeerEngineeringEnabled"];
    optional bgp_timespec tcp_init_sync_time_spec = 190 [(cisco_field).name="TCPInitSyncTimeSpec"];
    optional bgp_timespec tcp_init_sync_phase_two_time_spec = 191 [(cisco_field).name="TCPInitSyncPhaseTwoTimeSpec"];
    optional bgp_timespec tcp_init_sync_done_time_spec = 192 [(cisco_field).name="TCPInitSyncDoneTimeSpec"];
    optional uint32 discard_as4_path = 193 [(cisco_field).name="DiscardAS4Path"];
    optional bool rpki_disable = 194 [(cisco_field).name="RPKIDisable"];
    optional bool rpki_use_validity = 195 [(cisco_field).name="RPKIUseValidity"];
    optional bool rpki_allow_invalid = 196 [(cisco_field).name="RPKIAllowInvalid"];
    optional bool rpki_signal_ibgp = 197 [(cisco_field).name="RPKISignalIBGP"];
    optional bgp_nbr_gshut_ graceful_maintenance = 198 [(cisco_field).name="GracefulMaintenance"];
}

message bgp_timespec {
    optional uint32 seconds = 1 [(cisco_field).name="Seconds"];
    optional uint32 nanoseconds = 2 [(cisco_field).name="Nanoseconds"];
}

message IPV4TunnelAddressType {
    optional bytes value = 1 [(cisco_field).name="value"];
}

message IPV4MDTAddressType {
    optional bytes value = 1 [(cisco_field).name="value"];
}

message RTConstraintAddressType {
    optional bytes value = 1 [(cisco_field).name="value"];
}

message IPV6AddressType {
    optional bytes value = 1 [(cisco_field).name="value"];
}

message bgp_l2vpn_addr_t {
    optional bytes l2vpn_address = 1 [(cisco_field).name="l2vpn_address"];
}

message L2VPNEVPNAddressType {
    optional bytes value = 1 [(cisco_field).name="value"];
}

message bgp_l2vpn_mspw_addr_t {
    optional bytes l2vpn_address = 1 [(cisco_field).name="l2vpn_address"];
}

message IPV6MVPNAddressType {
    optional bytes value = 1 [(cisco_field).name="value"];
}

message IPV4MVPNAddressType {
    optional bytes value = 1 [(cisco_field).name="value"];
}

message LS_LSAddressType {
    optional bytes value = 1 [(cisco_field).name="value"];
}

message IPv4FlowspecAddressType {
    optional bytes value = 1 [(cisco_field).name="value"];
}

message IPv6FlowspecAddressType {
    optional bytes value = 1 [(cisco_field).name="value"];
}

message bgp_addrtype {
    optional string afi = 1 [(cisco_field).name="AFI"];
    optional bytes ipv4_address = 2 [(cisco_field).name="IPV4Address"];
    optional bytes ipv4_mcast_address = 3 [(cisco_field).name="IPV4McastAddress"];
    optional bytes ipv4_label_address = 4 [(cisco_field).name="IPV4LabelAddress"];
    optional IPV4TunnelAddressType ipv4_tunnel_address = 5 [(cisco_field).name="IPV4TunnelAddress"];
    optional IPV4MDTAddressType ipv4_mdt_address = 6 [(cisco_field).name="IPV4MDTAddress"];
    optional bytes ipv4_vpn_address = 7 [(cisco_field).name="IPV4VPNAddress"];
    optional bytes ipv4_vpna_mcastddress = 8 [(cisco_field).name="IPV4VPNAMcastddress"];
    optional IPV6AddressType ipv6_address = 9 [(cisco_field).name="IPV6Address"];
    optional IPV6AddressType ipv6_mcast_address = 10 [(cisco_field).name="IPV6McastAddress"];
    optional IPV6AddressType ipv6_label_address = 11 [(cisco_field).name="IPv6LabelAddress"];
    optional IPV6AddressType ipv6_vpn_address = 12 [(cisco_field).name="IPV6VPNAddress"];
    optional IPV6AddressType ipv6_vpn_mcast_address = 13 [(cisco_field).name="IPV6VPNMcastAddress"];
    optional bgp_l2vpn_addr_t l2_vpnvpls_address = 14 [(cisco_field).name="L2VPNVPLSAddress"];
    optional RTConstraintAddressType rt_constraint_address = 15 [(cisco_field).name="RTConstraintAddress"];
    optional IPV6MVPNAddressType ipv6_mvpn_address = 16 [(cisco_field).name="IPV6MVPNAddress"];
    optional IPV4MVPNAddressType ipv4_mvpn_address = 17 [(cisco_field).name="IPV4MVPNAddress"];
    optional L2VPNEVPNAddressType l2_vpn_evpn_address = 18 [(cisco_field).name="L2VPN_EVPNAddress"];
    optional LS_LSAddressType ls_ls_address = 19 [(cisco_field).name="LS_LSAddress"];
    optional bgp_l2vpn_mspw_addr_t l2_vpn_mspw_address = 20 [(cisco_field).name="L2VPN_MSPWAddress"];
    optional IPv4FlowspecAddressType ipv4_flowspec_address = 21 [(cisco_field).name="IPV4FlowspecAddress"];
    optional IPv6FlowspecAddressType ipv6_flowspec_address = 22 [(cisco_field).name="IPV6FlowspecAddress"];
    optional IPv4FlowspecAddressType ipv4_vpn_flowspec_address = 23 [(cisco_field).name="IPV4VPNFlowspecAddress"];
    optional IPv6FlowspecAddressType ipv6_vpn_flowspec_address = 24 [(cisco_field).name="IPV6VPNFlowspecAddress"];
}

message bgp_perf_nbr_af_ {
    optional uint32 sub_group_pending_message_count = 1 [(cisco_field).name="SubGroupPendingMessageCount"];
    optional uint32 processed_messages = 2 [(cisco_field).name="ProcessedMessages"];
    optional uint32 sent_messages = 3 [(cisco_field).name="SentMessages"];
    optional uint32 split_horizon_update_transmit = 4 [(cisco_field).name="SplitHorizonUpdateTransmit"];
    optional uint32 split_horizon_update_blocked = 5 [(cisco_field).name="SplitHorizonUpdateBlocked"];
    optional uint32 split_horizon_withdraw_transmit = 6 [(cisco_field).name="SplitHorizonWithdrawTransmit"];
    optional uint32 split_horizon_withdraw_blocked = 7 [(cisco_field).name="SplitHorizonWithdrawBlocked"];
}

message bgp_perf_nbr_ {
    optional uint32 read_throttles = 1 [(cisco_field).name="ReadThrottles"];
    optional uint32 low_throttled_read = 2 [(cisco_field).name="LowThrottledRead"];
    optional uint32 high_throttled_read = 3 [(cisco_field).name="HighThrottledRead"];
    optional uint32 time_since_last_throttled_read = 4 [(cisco_field).name="TimeSinceLastThrottledRead"];
    optional uint32 read_calls_count = 5 [(cisco_field).name="ReadCallsCount"];
    optional uint32 read_messages_count = 6 [(cisco_field).name="ReadMessagesCount"];
    optional uint32 data_bytes_read = 7 [(cisco_field).name="DataBytesRead"];
    optional uint32 io_read_time = 8 [(cisco_field).name="IOReadTime"];
    optional uint32 write_calls_count = 9 [(cisco_field).name="WriteCallsCount"];
    optional uint32 data_bytes_written = 10 [(cisco_field).name="DataBytesWritten"];
    optional uint32 io_write_time = 11 [(cisco_field).name="IOWriteTime"];
    optional uint32 last_sent_seq_no = 12 [(cisco_field).name="LastSentSeqNo"];
    optional uint32 write_subgroup_calls_count = 13 [(cisco_field).name="WriteSubgroupCallsCount"];
    optional uint32 write_subgroup_messages_count = 14 [(cisco_field).name="WriteSubgroupMessagesCount"];
    optional uint32 subgroup_list_time = 15 [(cisco_field).name="SubgroupListTime"];
    optional uint32 write_queue_calls_count = 16 [(cisco_field).name="WriteQueueCallsCount"];
    optional uint32 write_queue_messages_count = 17 [(cisco_field).name="WriteQueueMessagesCount"];
    optional uint32 write_queue_time = 18 [(cisco_field).name="WriteQueueTime"];
    optional uint32 inbound_update_messages = 19 [(cisco_field).name="InboundUpdateMessages"];
    optional uint32 inbound_update_messages_time = 20 [(cisco_field).name="InboundUpdateMessagesTime"];
    optional uint32 maximum_read_size = 21 [(cisco_field).name="MaximumReadSize"];
    optional uint32 actives = 22 [(cisco_field).name="Actives"];
    optional uint32 failed_post_actives = 23 [(cisco_field).name="FailedPostActives"];
    optional uint32 passives = 24 [(cisco_field).name="Passives"];
    optional uint32 rejected_passives = 25 [(cisco_field).name="RejectedPassives"];
    optional uint32 active_collision = 26 [(cisco_field).name="ActiveCollision"];
    optional uint32 passive_collision = 27 [(cisco_field).name="PassiveCollision"];
    optional uint32 control_to_read_thread_trigger = 28 [(cisco_field).name="ControlToReadThreadTrigger"];
    optional uint32 control_to_write_thread_trigger = 29 [(cisco_field).name="ControlToWriteThreadTrigger"];
    optional uint32 network_status = 30 [(cisco_field).name="NetworkStatus"];
    optional uint32 reset_flags = 31 [(cisco_field).name="ResetFlags"];
    optional uint32 nbr_flags = 32 [(cisco_field).name="NbrFlags"];
    optional sint32 nbr_fd = 33 [(cisco_field).name="NbrFd"];
    optional uint32 reset_retries = 34 [(cisco_field).name="ResetRetries"];
    optional uint32 sync_flags = 35 [(cisco_field).name="SyncFlags"];
    optional uint32 nsr_oper_down_count = 36 [(cisco_field).name="NSROperDownCount"];
    optional uint32 last_nsr_scoped_sync = 37 [(cisco_field).name="LastNSRScopedSync"];
}

message bgp_nbr_gshut_ {
    optional bool gshut_exists = 1 [(cisco_field).name="GshutExists"];
    optional bool gshut_local_active = 2 [(cisco_field).name="GshutLocalActive"];
    optional bool gshut_active = 3 [(cisco_field).name="GshutActive"];
    optional bool gshut_locpref_set = 4 [(cisco_field).name="GshutLocprefSet"];
    optional uint32 gshut_locpref = 5 [(cisco_field).name="GshutLocpref"];
    optional uint32 gshut_prepends = 6 [(cisco_field).name="GshutPrepends"];
}

message bgp_nbr_af_ {
    optional string af_name = 1 [(cisco_field).name="AFName"];
    optional bool is_neighbor_route_reflector_client = 2 [(cisco_field).name="IsNeighborRouteReflectorClient"];
    optional bool is_legacy_pe_rt = 3 [(cisco_field).name="IsLegacyPE_RT"];
    optional bool is_neighbor_af_capable = 4 [(cisco_field).name="IsNeighborAFCapable"];
    optional bool is_soft_reconfiguration_inbound_allowed = 5 [(cisco_field).name="IsSoftReconfigurationInboundAllowed"];
    optional bool is_use_soft_reconfiguration_always_on = 6 [(cisco_field).name="IsUseSoftReconfigurationAlwaysOn"];
    optional bool remove_private_as_from_updates = 7 [(cisco_field).name="RemovePrivateASFromUpdates"];
    optional bool remove_private_as_entire_aspath_from_updates = 8 [(cisco_field).name="RemovePrivateASEntireAspathFromUpdates"];
    optional bool remove_private_as_from_inbound_updates = 9 [(cisco_field).name="RemovePrivateASFromInboundUpdates"];
    optional bool remove_private_as_entire_aspath_from_inbound_updates = 10 [(cisco_field).name="RemovePrivateASEntireAspathFromInboundUpdates"];
    optional bool flowspec_validation_d_isable = 11 [(cisco_field).name="FlowspecValidationDIsable"];
    optional bool flowspec_redirect_validation_d_isable = 12 [(cisco_field).name="FlowspecRedirectValidationDIsable"];
    optional string orr_group_name = 13 [(cisco_field).name="OrrGroupName"];
    optional uint32 orr_group_index = 14 [(cisco_field).name="OrrGroupIndex"];
    optional bool is_orr_root_address_configured = 15 [(cisco_field).name="IsOrrRootAddressConfigured"];
    optional bool advertise_afi = 16 [(cisco_field).name="AdvertiseAFI"];
    optional bool advertise_afi_reorg = 17 [(cisco_field).name="AdvertiseAFIReorg"];
    optional bool advertise_afi_local = 18 [(cisco_field).name="AdvertiseAFILocal"];
    optional bool advertise_afi_disable = 19 [(cisco_field).name="AdvertiseAFIDisable"];
    optional bool advertise_afi_eo_r_ready = 20 [(cisco_field).name="AdvertiseAFIEoRReady"];
    optional bool always_use_next_hop_local = 21 [(cisco_field).name="AlwaysUseNextHopLocal"];
    optional bool sent_community_to_neighbor = 22 [(cisco_field).name="SentCommunityToNeighbor"];
    optional bool sent_gshut_community_to_neighbor = 23 [(cisco_field).name="SentGshutCommunityToNeighbor"];
    optional bool sent_extended_community_to_neighbor = 24 [(cisco_field).name="SentExtendedCommunityToNeighbor"];
    optional bool neighbor_default_originate = 25 [(cisco_field).name="NeighborDefaultOriginate"];
    optional bool is_orf_sent = 26 [(cisco_field).name="IsORFSent"];
    optional bool is_update_deferred = 27 [(cisco_field).name="IsUpdateDeferred"];
    optional bool is_orf_send_scheduled = 28 [(cisco_field).name="IsORFSendScheduled"];
    optional uint32 update_group_number = 29 [(cisco_field).name="UpdateGroupNumber"];
    optional uint32 filter_group_index = 30 [(cisco_field).name="FilterGroupIndex"];
    optional bool is_update_throttled = 31 [(cisco_field).name="IsUpdateThrottled"];
    optional bool is_update_leaving = 32 [(cisco_field).name="IsUpdateLeaving"];
    optional bool vpn_update_gen_enabled = 33 [(cisco_field).name="VPNUpdateGenEnabled"];
    optional bool vpn_update_gen_trigger_enabled = 34 [(cisco_field).name="VPNUpdateGenTriggerEnabled"];
    optional bool is_addpath_send_operational = 35 [(cisco_field).name="IsAddpathSendOperational"];
    optional bool is_addpath_receive_operational = 36 [(cisco_field).name="IsAddpathReceiveOperational"];
    optional uint32 neighbor_version = 37 [(cisco_field).name="NeighborVersion"];
    optional uint32 weight = 38 [(cisco_field).name="Weight"];
    optional uint32 max_prefix_limit = 39 [(cisco_field).name="MaxPrefixLimit"];
    optional bool use_max_prefix_warning_only = 40 [(cisco_field).name="UseMaxPrefixWarningOnly"];
    optional bool max_prefix_discard_extra_paths = 41 [(cisco_field).name="MaxPrefixDiscardExtraPaths"];
    optional bool max_prefix_exceed_discard_paths = 42 [(cisco_field).name="MaxPrefixExceedDiscardPaths"];
    optional uint32 max_prefix_threshold_percent = 43 [(cisco_field).name="MaxPrefixThresholdPercent"];
    optional uint32 max_prefix_restart_time = 44 [(cisco_field).name="MaxPrefixRestartTime"];
    optional uint32 prefixes_accepted = 45 [(cisco_field).name="PrefixesAccepted"];
    optional uint32 prefixes_synced = 46 [(cisco_field).name="PrefixesSynced"];
    optional uint32 prefixes_withdrawn = 47 [(cisco_field).name="PrefixesWithdrawn"];
    optional uint32 prefixes_withdrawn_not_found = 48 [(cisco_field).name="PrefixesWithdrawnNotFound"];
    optional uint32 prefixes_denied = 49 [(cisco_field).name="PrefixesDenied"];
    optional uint32 prefixes_denied_no_policy = 50 [(cisco_field).name="PrefixesDeniedNoPolicy"];
    optional uint32 prefixes_denied_rt_permit = 51 [(cisco_field).name="PrefixesDeniedRTPermit"];
    optional uint32 prefixes_denied_orf_policy = 52 [(cisco_field).name="PrefixesDeniedORFPolicy"];
    optional uint32 prefixes_denied_policy = 53 [(cisco_field).name="PrefixesDeniedPolicy"];
    optional uint32 number_of_bestpaths = 54 [(cisco_field).name="NumberOfBestpaths"];
    optional uint32 number_of_best_externalpaths = 55 [(cisco_field).name="NumberOfBestExternalpaths"];
    optional uint32 prefixes_advertised = 56 [(cisco_field).name="PrefixesAdvertised"];
    optional uint32 prefixes_be_advertised = 57 [(cisco_field).name="PrefixesBEAdvertised"];
    optional uint32 prefixes_suppressed = 58 [(cisco_field).name="PrefixesSuppressed"];
    optional uint32 prefixes_withrawn = 59 [(cisco_field).name="PrefixesWithrawn"];
    optional bool is_peer_orf_capable = 60 [(cisco_field).name="IsPeerORFCapable"];
    optional bool is_advertised_orf_send = 61 [(cisco_field).name="IsAdvertisedORFSend"];
    optional bool is_received_orf_send_capable = 62 [(cisco_field).name="IsReceivedORFSendCapable"];
    optional bool is_advertised_orf_receive = 63 [(cisco_field).name="IsAdvertisedORFReceive"];
    optional bool is_received_orf_receive_capable = 64 [(cisco_field).name="IsReceivedORFReceiveCapable"];
    optional bool is_advertised_graceful_restart = 65 [(cisco_field).name="IsAdvertisedGracefulRestart"];
    optional bool is_graceful_restart_state_flag = 66 [(cisco_field).name="IsGracefulRestartStateFlag"];
    optional bool is_received_graceful_restart_capable = 67 [(cisco_field).name="IsReceivedGracefulRestartCapable"];
    optional bool is_add_path_send_capability_advertised = 68 [(cisco_field).name="IsAddPathSendCapabilityAdvertised"];
    optional bool is_add_path_send_capability_received = 69 [(cisco_field).name="IsAddPathSendCapabilityReceived"];
    optional bool is_add_path_receive_capability_advertised = 70 [(cisco_field).name="IsAddPathReceiveCapabilityAdvertised"];
    optional bool is_add_path_receive_capability_received = 71 [(cisco_field).name="IsAddPathReceiveCapabilityReceived"];
    optional uint32 restart_time = 72 [(cisco_field).name="RestartTime"];
    optional uint32 local_restart_time = 73 [(cisco_field).name="LocalRestartTime"];
    optional uint32 stale_path_timeout = 74 [(cisco_field).name="StalePathTimeout"];
    optional uint32 rib_purge_timeout_value = 75 [(cisco_field).name="RIBPurgeTimeoutValue"];
    optional bool neighbor_preserved_forwarding_state = 76 [(cisco_field).name="NeighborPreservedForwardingState"];
    optional bool long_lived_graceful_restart_stale_time_configured = 77 [(cisco_field).name="LongLivedGracefulRestartStaleTimeConfigured"];
    optional uint32 long_lived_graceful_restart_stale_time_sent = 78 [(cisco_field).name="LongLivedGracefulRestartStaleTimeSent"];
    optional uint32 long_lived_graceful_restart_stale_time_accept = 79 [(cisco_field).name="LongLivedGracefulRestartStaleTimeAccept"];
    optional bool long_lived_graceful_restart_capability_received = 80 [(cisco_field).name="LongLivedGracefulRestartCapabilityReceived"];
    optional uint32 long_lived_graceful_restart_stale_time_received = 81 [(cisco_field).name="LongLivedGracefulRestartStaleTimeReceived"];
    optional bool neighbor_preserved_long_lived_forwarding_state = 82 [(cisco_field).name="NeighborPreservedLongLivedForwardingState"];
    optional bool neighbor_long_lived_graceful_restart_capable = 83 [(cisco_field).name="NeighborLongLivedGracefulRestartCapable"];
    optional uint32 neighbor_long_lived_graceful_restart_time_remaining = 84 [(cisco_field).name="NeighborLongLivedGracefulRestartTimeRemaining"];
    optional uint32 route_refreshes_received = 85 [(cisco_field).name="RouteRefreshesReceived"];
    optional uint32 route_refreshes_sent = 86 [(cisco_field).name="RouteRefreshesSent"];
    optional uint32 refresh_target_version = 87 [(cisco_field).name="RefreshTargetVersion"];
    optional uint32 refresh_version = 88 [(cisco_field).name="RefreshVersion"];
    optional uint32 refresh_acked_version = 89 [(cisco_field).name="RefreshAckedVersion"];
    optional bool is_prefix_orf_present = 90 [(cisco_field).name="IsPrefixORFPresent"];
    optional uint32 orf_entries_received = 91 [(cisco_field).name="ORFEntriesReceived"];
    optional bool is_default_originate_sent = 92 [(cisco_field).name="IsDefaultOriginateSent"];
    optional string route_policy_prefix_orf = 93 [(cisco_field).name="RoutePolicyPrefixORF"];
    optional string route_policy_in = 94 [(cisco_field).name="RoutePolicyIn"];
    optional string route_policy_out = 95 [(cisco_field).name="RoutePolicyOut"];
    optional string route_policy_default_originate = 96 [(cisco_field).name="RoutePolicyDefaultOriginate"];
    optional bool is_neighbor_ebgp_without_inbound_policy = 97 [(cisco_field).name="IsNeighborEBGPWithoutInboundPolicy"];
    optional bool is_neighbor_ebgp_without_outbound_policy = 98 [(cisco_field).name="IsNeighborEBGPWithoutOutboundPolicy"];
    optional bool is_as_override_set = 99 [(cisco_field).name="IsAsOverrideSet"];
    optional bool is_allow_as_in_set = 100 [(cisco_field).name="IsAllowAsInSet"];
    optional uint32 allow_as_in_count = 101 [(cisco_field).name="AllowAsInCount"];
    optional uint32 address_family_long_lived_time = 102 [(cisco_field).name="AddressFamilyLongLivedTime"];
    optional bool eo_r_received_in_read_only = 103 [(cisco_field).name="EoRReceivedInReadOnly"];
    optional uint32 acked_version = 104 [(cisco_field).name="AckedVersion"];
    optional uint32 synced_acked_version = 105 [(cisco_field).name="SyncedAckedVersion"];
    optional uint32 outstanding_version = 106 [(cisco_field).name="OutstandingVersion"];
    optional uint32 outstanding_version_max = 107 [(cisco_field).name="OutstandingVersionMax"];
    optional bgp_perf_nbr_af_ neighbor_af_performance_statistics = 108 [(cisco_field).name="NeighborAFPerformanceStatistics"];
    optional bool is_aigp_set = 109 [(cisco_field).name="IsAIGPSet"];
    optional bool is_rt_present = 110 [(cisco_field).name="IsRTPresent"];
    repeated uint32 extended_community = 111 [(cisco_field).name="ExtendedCommunity"];
    optional bool is_rt_present_standby = 112 [(cisco_field).name="IsRTPresentStandby"];
    repeated uint32 extended_community_standby = 113 [(cisco_field).name="ExtendedCommunityStandby"];
    optional bool accept_own_enabled = 114 [(cisco_field).name="AcceptOwnEnabled"];
    optional bool selective_multipath_eligible = 115 [(cisco_field).name="SelectiveMultipathEligible"];
    optional bool afrpki_disable = 116 [(cisco_field).name="AFRPKIDisable"];
    optional bool afrpki_use_validity = 117 [(cisco_field).name="AFRPKIUseValidity"];
    optional bool afrpki_allow_invalid = 118 [(cisco_field).name="AFRPKIAllowInvalid"];
    optional bool afrpki_signal_ibgp = 119 [(cisco_field).name="AFRPKISignalIBGP"];
    optional bool is_advertise_permanent_network = 120 [(cisco_field).name="IsAdvertisePermanentNetwork"];
    optional bool is_send_mcast_attr = 121 [(cisco_field).name="IsSendMcastAttr"];
    optional bool import_stitching = 122 [(cisco_field).name="ImportStitching"];
    optional bool import_reoriginate = 123 [(cisco_field).name="ImportReoriginate"];
    optional bool import_reoriginate_stitching = 124 [(cisco_field).name="ImportReoriginateStitching"];
    optional uint32 advertise_v4_flags = 125 [(cisco_field).name="AdvertiseV4Flags"];
    optional uint32 advertise_v6_flags = 126 [(cisco_field).name="AdvertiseV6Flags"];
}

message nbr_af_p {
    optional bgp_nbr_af_ value = 1 [(cisco_field).name="value"];
}

message bgp_notfntype_ {
    optional uint32 time_since_last_notification = 1 [(cisco_field).name="TimeSinceLastNotification"];
    optional uint32 notification_error_code = 2 [(cisco_field).name="NotificationErrorCode"];
    optional uint32 notification_error_subcode = 3 [(cisco_field).name="NotificationErrorSubcode"];
    repeated uint32 last_notification_data = 4 [(cisco_field).name="LastNotificationData"];
}

message bgp_nbr_msg_stats_unit {
    optional uint32 count = 1 [(cisco_field).name="Count"];
    optional bgp_timespec last_time_spec = 2 [(cisco_field).name="LastTimeSpec"];
}

message bgp_nbr_msg_stats_op {
    optional bgp_nbr_msg_stats_unit tx = 1 [(cisco_field).name="Tx"];
    optional bgp_nbr_msg_stats_unit rx = 2 [(cisco_field).name="Rx"];
}

message bgp_nbr_msg_stats {
    optional bgp_nbr_msg_stats_op open = 1 [(cisco_field).name="Open"];
    optional bgp_nbr_msg_stats_op notification = 2 [(cisco_field).name="Notification"];
    optional bgp_nbr_msg_stats_op update = 3 [(cisco_field).name="Update"];
    optional bgp_nbr_msg_stats_op keepalive = 4 [(cisco_field).name="Keepalive"];
    optional bgp_nbr_msg_stats_op route_refresh = 5 [(cisco_field).name="RouteRefresh"];
    optional bgp_nbr_msg_stats_op total = 6 [(cisco_field).name="Total"];
}

// The following metadata must not be deleted or modified:
option (cisco_file).metadata="{\"bag\": \"bgp_nbr_bag\", \"v_maj\": 30, \"version\": 1.0, \"bytecode\": \"$144={SpeakerID}C{Description}s{LocalAS}D{RemoteAS}D{HasInternalLink}b{IsExternalNeighborNotDirectlyConnected}b{MessagesReceived}D{MessagesSent}D{UpdateMessagesIn}D{UpdateMessagesOut}D{MessagesQueuedIn}D{MessagesQueuedOut}D{ConnectionEstablishedTime}D{ConnectionState}[bgp_conn_state_]e{PreviousConnectionState}D{ConnectionAdminStatus}D{OpenCheckErrorCode}[_bgp_open_check_err_]e{ConnectionLocalAddress}$60{IsLocalAddressConfigured}b{ConnectionLocalPort}D{ConnectionRemoteAddress}$60{ConnectionRemotePort}D{NeighborInterfaceHandle}D{ResetNotificationSent}b{IsAdministrativelyShutDown}b{IsNeighborMaxPrefixShutdown}b{IsOutOfMemoryShutdown}b{IsOutOfMemoryForcedUp}b{IsEBGPPeerASLeague}b{IsEBGPPeerCommonAdmin}b{TTLSecurityEnabled}b{Suppress4ByteAs}b{BFDSessionState}[bgp_bfd_state_]e{BFDSessionCreatedState}[bgp_bfd_state_]e{BFDSessionEnableMode}[bgp_bfd_enable_mode_]e{BFDMinintervalval}D{BFDMultiplierval}D{BfdStateTs}H{RouterID}N{NegotiatedProtocolVersion}I{EBGPTimeToLive}D{IsEBGPMultihopBGPMPLSForwardingDisabled}b{TCPMSS}D{MsgLogIn}D{MsgLogOut}D{NeighborLocalAS}D{LocalASNoPrepend}b{IsCapabilityNegotiationPerformed}b{IsRouteRefreshCapabilityReceived}b{IsRouteRefreshOldCapabilityReceived}b{IsGRAware}b{Is4ByteASCapabilityReceived}b{Is4ByteASCapabilitySent}b{MultiProtocolCapabilityReceived}b{HoldTime}I{KeepAliveTime}I{ConfiguredHoldTime}I{ConfiguredKeepalive}I{ConfiguredMinAccHoldTime}I{MinAdvertiseInterval}D{MinAdvertiseIntervalMsecs}D{MinOriginationInterval}I{ConnectRetryInterval}I{TimeSinceLastUpdate}D{TimeSinceLastRead}D{TimeSinceLastReadReset}D{TimeLastCB}H{TimeLastCBReset}D{TimeLastFB}H{CountLastWrite}D{TimeSinceLastWrite}D{AttemptedLastWriteBytes}D{ActualLastWriteBytes}D{TimeSinceSecondLastWrite}D{AttemptedSecondLastWriteBytes}D{ActualSecondLastWriteBytes}D{TimeSinceLastWriteReset}D{AttemptedLastWriteResetBytes}D{ActualLastWriteResetBytes}D{TimeSinceSecondLastWriteReset}D{AttemptedSecondLastWriteResetBytes}D{ActualSecondLastWriteResetBytes}D{LastWriteEvent}D{SecondLastWriteEvent}D{LastKAexpiryReset}D{SecondLastKAexpiryReset}D{LastKAnotsentReset}D{LastKAerrorReset}D{LastKAstartReset}D{SecondLastKAstartReset}D{ConnectionUpCount}D{ConnectionDownCount}D{TimeSinceConnectionLastDropped}D{ResetReason}[bgp_reset_reason_index_]e{PeerResetReason}[bgp_peer_reset_reason_index_]e{PeerErrorCode}D{LastNotifyErrorCode}C{LastNotifyErrorSubcode}C{SendNotificationInfo}$139{ReceivedNotificationInfo}$139{ErrorNotifiesReceived}D{ErrorNotifiesSent}D{RemoteASNumber}D{DMZLinkBandwidth}D{TOSType}C{TOSValue}C{PerformanceStatistics}$104{AFData}23A($138){TCPSessionOpenMode}[bgp_tcp_mode_type_]e{VRFName}s{StandbyRP}b{NSREnabled}b{GracefulRestartEnabledNbr}b{GrRestartTime}D{GrStalePathTime}D{FssnOffset}D{FpbsnOffset}D{LastAckdSeqNo}D{BytesWritten}D{BytesRead}D{SocketReadBytes}D{IsReadDisabled}b{UpdateBytesRead}D{NSRState}[bgp_sync_nbr_nsr_state_]e{IsPassiveClose}b{NbrEnforceFirstAS}b{ActiveBMPServers}C{NbrClusterID}D{NbrInCluster}C{IgnoreConnected}b{InternalVPNClient}b{IoArmed}b{ReadArmed}b{WriteArmed}b{MessageStatistics}$143{DiscardDataBytes}D{LocalASReplaceAS}b{LocalASDualAS}b{LocalASDualASModeNative}b{EgressPeerEngineeringEnabled}b{TCPInitSyncTimeSpec}$36{TCPInitSyncPhaseTwoTimeSpec}$36{TCPInitSyncDoneTimeSpec}$36{DiscardAS4Path}D{RPKIDisable}b{RPKIUseValidity}b{RPKIAllowInvalid}b{RPKISignalIBGP}b{GracefulMaintenance}$106;$36={Seconds}D{Nanoseconds}D;$41=6x%t;$42=12x%q;$43=12x%R;$44=16x%s;$49={l2vpn_address}4x;$52=29x%K;$53={l2vpn_address}20x;$55=52x%J;$56=28x%M;$57=1000x%Q;$58=4096x%G;$59=4096x%E;$60=?(<AFI,bgp_afi_>,0:{IPV4Address}N,1:{IPV4McastAddress}N,2:{IPV4LabelAddress}N,3:{IPV4TunnelAddress}$41,9:{IPV4MDTAddress}$42,4:{IPV4VPNAddress}N,16:{IPV4VPNAMcastddress}N,5:{IPV6Address}$44,6:{IPV6McastAddress}$44,7:{IPv6LabelAddress}$44,8:{IPV6VPNAddress}$44,17:{IPV6VPNMcastAddress}$44,10:{L2VPNVPLSAddress}$49,11:{RTConstraintAddress}$43,13:{IPV6MVPNAddress}$55,12:{IPV4MVPNAddress}$56,14:{L2VPN_EVPNAddress}$52,15:{LS_LSAddress}$57,22:{L2VPN_MSPWAddress}$53,18:{IPV4FlowspecAddress}$58,19:{IPV6FlowspecAddress}$59,20:{IPV4VPNFlowspecAddress}$58,21:{IPV6VPNFlowspecAddress}$59,23:v,24:v);$102={SubGroupPendingMessageCount}D{ProcessedMessages}D{SentMessages}D{SplitHorizonUpdateTransmit}D{SplitHorizonUpdateBlocked}D{SplitHorizonWithdrawTransmit}D{SplitHorizonWithdrawBlocked}D;$104={ReadThrottles}D{LowThrottledRead}D{HighThrottledRead}D{TimeSinceLastThrottledRead}D{ReadCallsCount}D{ReadMessagesCount}D{DataBytesRead}D{IOReadTime}D{WriteCallsCount}D{DataBytesWritten}D{IOWriteTime}D{LastSentSeqNo}D{WriteSubgroupCallsCount}D{WriteSubgroupMessagesCount}D{SubgroupListTime}D{WriteQueueCallsCount}D{WriteQueueMessagesCount}D{WriteQueueTime}D{InboundUpdateMessages}D{InboundUpdateMessagesTime}D{MaximumReadSize}D{Actives}D{FailedPostActives}D{Passives}D{RejectedPassives}D{ActiveCollision}D{PassiveCollision}D{ControlToReadThreadTrigger}D{ControlToWriteThreadTrigger}D{NetworkStatus}D{ResetFlags}D{NbrFlags}D{NbrFd}d{ResetRetries}C{SyncFlags}D{NSROperDownCount}D{LastNSRScopedSync}D;$106={GshutExists}b{GshutLocalActive}b{GshutActive}b{GshutLocprefSet}b{GshutLocpref}D{GshutPrepends}C;$136={AFName}[bgp_afi_]e{IsNeighborRouteReflectorClient}b{IsLegacyPE_RT}b{IsNeighborAFCapable}b{IsSoftReconfigurationInboundAllowed}b{IsUseSoftReconfigurationAlwaysOn}b{RemovePrivateASFromUpdates}b{RemovePrivateASEntireAspathFromUpdates}b{RemovePrivateASFromInboundUpdates}b{RemovePrivateASEntireAspathFromInboundUpdates}b{FlowspecValidationDIsable}b{FlowspecRedirectValidationDIsable}b{OrrGroupName}s{OrrGroupIndex}D{IsOrrRootAddressConfigured}b{AdvertiseAFI}b{AdvertiseAFIReorg}b{AdvertiseAFILocal}b{AdvertiseAFIDisable}b{AdvertiseAFIEoRReady}b{AlwaysUseNextHopLocal}b{SentCommunityToNeighbor}b{SentGshutCommunityToNeighbor}b{SentExtendedCommunityToNeighbor}b{NeighborDefaultOriginate}b{IsORFSent}b{IsUpdateDeferred}b{IsORFSendScheduled}b{UpdateGroupNumber}D{FilterGroupIndex}D{IsUpdateThrottled}b{IsUpdateLeaving}b{VPNUpdateGenEnabled}b{VPNUpdateGenTriggerEnabled}b{IsAddpathSendOperational}b{IsAddpathReceiveOperational}b{NeighborVersion}D{Weight}D{MaxPrefixLimit}D{UseMaxPrefixWarningOnly}b{MaxPrefixDiscardExtraPaths}b{MaxPrefixExceedDiscardPaths}b{MaxPrefixThresholdPercent}C{MaxPrefixRestartTime}I{PrefixesAccepted}D{PrefixesSynced}D{PrefixesWithdrawn}D{PrefixesWithdrawnNotFound}D{PrefixesDenied}D{PrefixesDeniedNoPolicy}D{PrefixesDeniedRTPermit}D{PrefixesDeniedORFPolicy}D{PrefixesDeniedPolicy}D{NumberOfBestpaths}D{NumberOfBestExternalpaths}D{PrefixesAdvertised}D{PrefixesBEAdvertised}D{PrefixesSuppressed}D{PrefixesWithrawn}D{IsPeerORFCapable}b{IsAdvertisedORFSend}b{IsReceivedORFSendCapable}b{IsAdvertisedORFReceive}b{IsReceivedORFReceiveCapable}b{IsAdvertisedGracefulRestart}b{IsGracefulRestartStateFlag}b{IsReceivedGracefulRestartCapable}b{IsAddPathSendCapabilityAdvertised}b{IsAddPathSendCapabilityReceived}b{IsAddPathReceiveCapabilityAdvertised}b{IsAddPathReceiveCapabilityReceived}b{RestartTime}D{LocalRestartTime}D{StalePathTimeout}D{RIBPurgeTimeoutValue}D{NeighborPreservedForwardingState}b{LongLivedGracefulRestartStaleTimeConfigured}b{LongLivedGracefulRestartStaleTimeSent}D{LongLivedGracefulRestartStaleTimeAccept}D{LongLivedGracefulRestartCapabilityReceived}b{LongLivedGracefulRestartStaleTimeReceived}D{NeighborPreservedLongLivedForwardingState}b{NeighborLongLivedGracefulRestartCapable}b{NeighborLongLivedGracefulRestartTimeRemaining}D{RouteRefreshesReceived}D{RouteRefreshesSent}D{RefreshTargetVersion}D{RefreshVersion}D{RefreshAckedVersion}D{IsPrefixORFPresent}b{ORFEntriesReceived}D{IsDefaultOriginateSent}b{RoutePolicyPrefixORF}s{RoutePolicyIn}s{RoutePolicyOut}s{RoutePolicyDefaultOriginate}s{IsNeighborEBGPWithoutInboundPolicy}b{IsNeighborEBGPWithoutOutboundPolicy}b{IsAsOverrideSet}b{IsAllowAsInSet}b{AllowAsInCount}D{AddressFamilyLongLivedTime}D{EoRReceivedInReadOnly}b{AckedVersion}D{SyncedAckedVersion}D{OutstandingVersion}D{OutstandingVersionMax}D{NeighborAFPerformanceStatistics}$102{IsAIGPSet}b{IsRTPresent}b{ExtendedCommunity}a(C){IsRTPresentStandby}b{ExtendedCommunityStandby}a(C){AcceptOwnEnabled}b{SelectiveMultipathEligible}b{AFRPKIDisable}b{AFRPKIUseValidity}b{AFRPKIAllowInvalid}b{AFRPKISignalIBGP}b{IsAdvertisePermanentNetwork}b{IsSendMcastAttr}b{ImportStitching}b{ImportReoriginate}b{ImportReoriginateStitching}b{AdvertiseV4Flags}D{AdvertiseV6Flags}D;$138=p($136);$139={TimeSinceLastNotification}D{NotificationErrorCode}C{NotificationErrorSubcode}C{LastNotificationData}a(C);$141={Count}D{LastTimeSpec}$36;$142={Tx}$141{Rx}$141;$143={Open}$142{Notification}$142{Update}$142{Keepalive}$142{RouteRefresh}$142{Total}$142;\", \"schema_names\": [[\"RootOper.BGP.Instance(InstanceName)\", \"\"], [\"RootOper.BGP.Instance.InstanceActive.DefaultVRF.Neighbor(NeighborAddress)\", \"\"]], \"subtypes\": {\"136\": \"bgp_nbr_af_\", \"138\": \"nbr_af_p\", \"139\": \"bgp_notfntype_\", \"141\": \"bgp_nbr_msg_stats_unit\", \"142\": \"bgp_nbr_msg_stats_op\", \"143\": \"bgp_nbr_msg_stats\", \"36\": \"bgp_timespec\", \"102\": \"bgp_perf_nbr_af_\", \"104\": \"bgp_perf_nbr_\", \"41\": \"IPV4TunnelAddressType\", \"42\": \"IPV4MDTAddressType\", \"43\": \"RTConstraintAddressType\", \"44\": \"IPV6AddressType\", \"49\": \"bgp_l2vpn_addr_t\", \"52\": \"L2VPNEVPNAddressType\", \"53\": \"bgp_l2vpn_mspw_addr_t\", \"55\": \"IPV6MVPNAddressType\", \"56\": \"IPV4MVPNAddressType\", \"57\": \"LS_LSAddressType\", \"58\": \"IPv4FlowspecAddressType\", \"59\": \"IPv6FlowspecAddressType\", \"60\": \"bgp_addrtype\", \"106\": \"bgp_nbr_gshut_\"}, \"enums\": {\"bgp_bfd_enable_mode_\": {\"0\": \"BGP_BFD_ENABLE_MODE_DISABLE\", \"1\": \"BGP_BFD_ENABLE_MODE_DEF\", \"2\": \"BGP_BFD_ENABLE_MODE_STRICT\"}, \"bgp_afi_\": {\"0\": \"IPv4\", \"1\": \"IPv4Multicast\", \"2\": \"IPv4Labeled\", \"3\": \"IPv4Tunnel\", \"4\": \"VPNv4\", \"5\": \"IPv6\", \"6\": \"IPv6Multicast\", \"7\": \"IPv6Labeled\", \"8\": \"VPNv6\", \"9\": \"IPv4MDT\", \"10\": \"L2VPN_VPLS\", \"11\": \"RTConstraint\", \"12\": \"IPv4MVPN\", \"13\": \"IPv6MVPN\", \"14\": \"L2VPN_EVPN\", \"15\": \"LS_LS\", \"16\": \"VPNv4Multicast\", \"17\": \"VPNv6Multicast\", \"18\": \"IPv4Flowspec\", \"19\": \"IPv6Flowspec\", \"20\": \"VPNv4Flowspec\", \"21\": \"VPNv6Flowspec\", \"22\": \"L2VPN_MSPW\", \"23\": \"NoAddressFamily\", \"24\": \"AllAddressFamilies\"}, \"bgp_tcp_mode_type_\": {\"0\": \"BGP_TCP_MODE_TYPE_EITHER\", \"1\": \"BGP_TCP_MODE_TYPE_ACTIVE_ONLY\", \"2\": \"BGP_TCP_MODE_TYPE_PASSIVE_ONLY\"}, \"bgp_bfd_state_\": {\"0\": \"BGP_BFD_STATE_NOT_CONFIGURED\", \"1\": \"BGP_BFD_STATE_ADMIN_DOWN\", \"2\": \"BGP_BFD_STATE_NOT_SUPPORTED\", \"3\": \"BGP_BFD_STATE_NOT_CREATED\", \"4\": \"BGP_BFD_STATE_CREATED\", \"5\": \"BGP_BFD_STATE_UP\", \"6\": \"BGP_BFD_STATE_DOWN\", \"7\": \"BGP_BFD_STATE_NBR_NOT_CONFIGURED\", \"8\": \"BGP_BFD_STATE_NONE\"}, \"bgp_sync_nbr_nsr_state_\": {\"0\": \"BGP_NBR_NSR_ST_NONE\", \"1\": \"BGP_NBR_NSR_ST_OPER_DOWN\", \"2\": \"BGP_NBR_NSR_ST_TCP_INIT_SYNC\", \"3\": \"BGP_NBR_NSR_ST_TCP_PHASE_TWO\", \"4\": \"BGP_NBR_NSR_ST_BGP_INIT_SYNC\", \"5\": \"BGP_NBR_NSR_ST_NSR_READY\"}, \"_bgp_open_check_err_\": {\"0\": \"None\", \"1\": \"NeighborDown\", \"2\": \"NoUpdateGroupSet\", \"3\": \"NoAFConfig\", \"4\": \"UpdateGroupPending\", \"5\": \"LowMemory\", \"6\": \"NeighborShutdown\", \"7\": \"EBGPNeighborRemote\", \"8\": \"UpdateSourceInterfaceNull\", \"9\": \"NoIPv6Address\", \"10\": \"FirstHopInterfaceNull\", \"11\": \"NoIPv6LLAddress\", \"12\": \"NoUpdateSourceConfig\", \"13\": \"NoRouterID\", \"14\": \"UpdateSourceInterfaceGetFailed\", \"15\": \"UpdateSourceInterfaceStateGetFailed\", \"16\": \"UpdateSourceInterfaceDown\", \"17\": \"UpdateSourceInterfaceLLGetFailed\", \"18\": \"UpdateSourceInterfaceAddressGetFailed\", \"19\": \"SourceAddressAFInvalid\", \"20\": \"NoUpdateSourceLLPeering\", \"21\": \"LocalAddressGetFailed\", \"22\": \"NoBestLocalAddress\", \"23\": \"NeighborAddressEqualsLocalAddress\", \"24\": \"NeighborClosing\", \"25\": \"NeighborPendingReset\", \"26\": \"OutInterfaceSetFailed\", \"27\": \"LocalAddressMismatch\", \"28\": \"NeighborActiveOnly\", \"29\": \"SocketInitFailed\", \"30\": \"SocketOperationFailed\", \"31\": \"LocalNeighbor\", \"32\": \"MultiHopNeighbor\"}, \"bgp_reset_reason_index_\": {\"0\": \"BGP_NONE\", \"1\": \"BGP_INIT\", \"2\": \"BGP_NOMEMORY\", \"3\": \"NOT_RECEIVED\", \"4\": \"NOT_SENT\", \"5\": \"CONN_COLLISION\", \"6\": \"PEER_CLOSED\", \"7\": \"MAX_PREFIX_EXCEEDED\", \"8\": \"INTERFACE_FLAP\", \"9\": \"NEIGHBOR_DELETED\", \"10\": \"ADMIN_SHUTDOWN\", \"11\": \"AF_ACTIVATED\", \"12\": \"AF_DEACTIVATED\", \"13\": \"PROTOCOL_ERROR\", \"14\": \"LISTEN_CLOSED\", \"15\": \"RIB_FAILED\", \"16\": \"USER_CLEAR\", \"17\": \"USER_CLEAR_GR\", \"18\": \"ROUTERID_CHANGED\", \"19\": \"REMOTEAS_CHANGED\", \"20\": \"ORF_CHANGED\", \"21\": \"RRCLIENT_CHANGED\", \"22\": \"LEGACY_PE_RT_CHANGED\", \"23\": \"SOFTRECONFIG_CHANGED\", \"24\": \"LOCALAS_CHANGED\", \"25\": \"LOW_MEMORY\", \"26\": \"BFD_DOWN\", \"27\": \"ALLOWAS_IN_CHANGED\", \"28\": \"CAP_4BYTEAS_CHANGED\", \"29\": \"TCP_OPER_DOWN\", \"30\": \"SCOPED_SYNC_RETRY\", \"31\": \"CLUSTERID_CHANGED\", \"32\": \"RR_DISABLE_CHANGED\", \"33\": \"AIGP_CHANGED\", \"34\": \"SIGNALLING_CHANGED\", \"35\": \"OPEN_CHECKS_FAILED\", \"36\": \"AO_CHANGED\", \"37\": \"LLGR_STALETIME_CHANGED\", \"38\": \"LLGR_CAPABLE_CHANGED\", \"39\": \"NBR_LOCAL_ADDR_CHANGED\", \"40\": \"INTERNAL_VPN_CLIENT_CHANGED\", \"41\": \"ADV_DISABLE_CHANGED\"}, \"bgp_conn_state_\": {\"0\": \"BGP_ST_DONTCARE\", \"1\": \"BGP_ST_IDLE\", \"2\": \"BGP_ST_CONNECT\", \"3\": \"BGP_ST_ACTIVE\", \"4\": \"BGP_ST_OPENSENT\", \"5\": \"BGP_ST_OPENCONFIRM\", \"6\": \"BGP_ST_ESTAB\", \"7\": \"BGP_ST_CLOSING\", \"8\": \"BGP_ST_CLOSINGSYNC\"}, \"bgp_peer_reset_reason_index_\": {\"1\": \"BGP_READ_REMOTE_CLOSED\", \"2\": \"BGP_READ_FAILED\", \"3\": \"BGP_WRITE_FAILED\", \"4\": \"BGP_SOCK_DISCONNECTED\", \"5\": \"BGP_SOCK_SELECT_FAILED\", \"6\": \"BGP_PEER_RESET_REASON_NONE\"}}, \"schema_path\": \"RootOper.BGP.Instance.InstanceActive.DefaultVRF.Neighbor\", \"v_min\": 7}";
