// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto2";

import "cisco.proto";

message im_cmd_info {
    option (cisco_msg).schema_path = "RootOper.Interfaces.Interface";

    optional string interface_name = 1 [(cisco_field).path_element="RootOper.Interfaces.Interface(InterfaceName)"];
    optional uint32 interface_handle = 50 [(cisco_field).name="InterfaceHandle"];
    optional uint32 interface_type = 51 [(cisco_field).name="InterfaceType"];
    optional string hardware_type_string = 52 [(cisco_field).name="HardwareTypeString"];
    optional string state = 53 [(cisco_field).name="State"];
    optional string line_state = 54 [(cisco_field).name="LineState"];
    optional uint32 encapsulation = 55 [(cisco_field).name="Encapsulation"];
    optional string encapsulation_type_string = 56 [(cisco_field).name="EncapsulationTypeString"];
    optional uint32 mtu = 57 [(cisco_field).name="MTU"];
    optional bool is_l2_transport_enabled = 58 [(cisco_field).name="IsL2TransportEnabled"];
    optional uint32 state_transition_count = 59 [(cisco_field).name="StateTransitionCount"];
    optional uint32 last_state_transition_time = 60 [(cisco_field).name="LastStateTransitionTime"];
    optional bool is_dampening_enabled = 61 [(cisco_field).name="IsDampeningEnabled"];
    optional im_cmd_damp_st dampening_information = 62 [(cisco_field).name="DampeningInformation"];
    optional uint32 speed = 63 [(cisco_field).name="Speed"];
    optional uint32 crc_length = 64 [(cisco_field).name="CRCLength"];
    optional bool is_scramble_enabled = 65 [(cisco_field).name="IsScrambleEnabled"];
    optional string duplexity = 66 [(cisco_field).name="Duplexity"];
    optional string media_type = 67 [(cisco_field).name="MediaType"];
    optional string link_type = 68 [(cisco_field).name="LinkType"];
    optional string in_flow_control = 69 [(cisco_field).name="InFlowControl"];
    optional string out_flow_control = 70 [(cisco_field).name="OutFlowControl"];
    optional im_cmd_mac_addr_st mac_address = 71 [(cisco_field).name="MACAddress"];
    optional im_cmd_mac_addr_st burned_in_address = 72 [(cisco_field).name="BurnedInAddress"];
    optional im_cmd_carrier_delay_st carrier_delay = 73 [(cisco_field).name="CarrierDelay"];
    optional uint32 bandwidth = 74 [(cisco_field).name="Bandwidth"];
    optional uint32 max_bandwidth = 75 [(cisco_field).name="MaxBandwidth"];
    optional uint32 keepalive = 76 [(cisco_field).name="Keepalive"];
    optional bool is_l2_looped = 77 [(cisco_field).name="IsL2Looped"];
    optional uint32 parent_interface_name = 78 [(cisco_field).name="ParentInterfaceName"];
    optional string loopback_configuration = 79 [(cisco_field).name="LoopbackConfiguration"];
    optional string description = 80 [(cisco_field).name="Description"];
    optional im_cmd_arp_info_st arp_information = 81 [(cisco_field).name="ARPInformation"];
    optional im_cmd_ip_info_st ip_information = 82 [(cisco_field).name="IPInformation"];
    optional bool is_maintenance_enabled = 83 [(cisco_field).name="IsMaintenanceEnabled"];
    optional bool is_data_inverted = 84 [(cisco_field).name="IsDataInverted"];
    optional string transport_mode = 85 [(cisco_field).name="TransportMode"];
    optional im_cmd_encaps_info encapsulation_information = 86 [(cisco_field).name="EncapsulationInformation"];
    optional im_cmd_intf_type_info interface_type_information = 87 [(cisco_field).name="InterfaceTypeInformation"];
    optional statsdbag_datarate data_rates = 88 [(cisco_field).name="DataRates"];
    optional im_cmd_if_stats interface_statistics = 89 [(cisco_field).name="InterfaceStatistics"];
    optional stats_data l2_interface_statistics = 90 [(cisco_field).name="L2InterfaceStatistics"];
    optional nv_optical_interface_info nv_optical = 91 [(cisco_field).name="NVOptical"];
}

message ifstatsbag_generic {
    optional uint64 packets_received = 1 [(cisco_field).name="PacketsReceived"];
    optional uint64 bytes_received = 2 [(cisco_field).name="BytesReceived"];
    optional uint64 packets_sent = 3 [(cisco_field).name="PacketsSent"];
    optional uint64 bytes_sent = 4 [(cisco_field).name="BytesSent"];
    optional uint64 multicast_packets_received = 5 [(cisco_field).name="MulticastPacketsReceived"];
    optional uint64 broadcast_packets_received = 6 [(cisco_field).name="BroadcastPacketsReceived"];
    optional uint64 multicast_packets_sent = 7 [(cisco_field).name="MulticastPacketsSent"];
    optional uint64 broadcast_packets_sent = 8 [(cisco_field).name="BroadcastPacketsSent"];
    optional uint32 output_drops = 9 [(cisco_field).name="OutputDrops"];
    optional uint32 output_queue_drops = 10 [(cisco_field).name="OutputQueueDrops"];
    optional uint32 input_drops = 11 [(cisco_field).name="InputDrops"];
    optional uint32 input_queue_drops = 12 [(cisco_field).name="InputQueueDrops"];
    optional uint32 runt_packets_received = 13 [(cisco_field).name="RuntPacketsReceived"];
    optional uint32 giant_packets_received = 14 [(cisco_field).name="GiantPacketsReceived"];
    optional uint32 throttled_packets_received = 15 [(cisco_field).name="ThrottledPacketsReceived"];
    optional uint32 parity_packets_received = 16 [(cisco_field).name="ParityPacketsReceived"];
    optional uint32 unknown_protocol_packets_received = 17 [(cisco_field).name="UnknownProtocolPacketsReceived"];
    optional uint32 input_errors = 18 [(cisco_field).name="InputErrors"];
    optional uint32 crc_errors = 19 [(cisco_field).name="CRCErrors"];
    optional uint32 input_overruns = 20 [(cisco_field).name="InputOverruns"];
    optional uint32 framing_errors_received = 21 [(cisco_field).name="FramingErrorsReceived"];
    optional uint32 input_ignored_packets = 22 [(cisco_field).name="InputIgnoredPackets"];
    optional uint32 input_aborts = 23 [(cisco_field).name="InputAborts"];
    optional uint32 output_errors = 24 [(cisco_field).name="OutputErrors"];
    optional uint32 output_underruns = 25 [(cisco_field).name="OutputUnderruns"];
    optional uint32 output_buffer_failures = 26 [(cisco_field).name="OutputBufferFailures"];
    optional uint32 output_buffers_swapped_out = 27 [(cisco_field).name="OutputBuffersSwappedOut"];
    optional uint32 applique = 28 [(cisco_field).name="Applique"];
    optional uint32 resets = 29 [(cisco_field).name="Resets"];
    optional uint32 carrier_transitions = 30 [(cisco_field).name="CarrierTransitions"];
    optional uint32 availability_flag = 31 [(cisco_field).name="AvailabilityFlag"];
    optional uint32 last_data_time = 32 [(cisco_field).name="LastDataTime"];
    optional uint32 seconds_since_last_clear_counters = 33 [(cisco_field).name="SecondsSinceLastClearCounters"];
    optional uint32 last_discontinuity_time = 34 [(cisco_field).name="LastDiscontinuityTime"];
    optional uint32 seconds_since_packet_received = 35 [(cisco_field).name="SecondsSincePacketReceived"];
    optional uint32 seconds_since_packet_sent = 36 [(cisco_field).name="SecondsSincePacketSent"];
}

message ifstatsbag_basic {
    optional uint64 packets_received = 1 [(cisco_field).name="PacketsReceived"];
    optional uint64 bytes_received = 2 [(cisco_field).name="BytesReceived"];
    optional uint64 packets_sent = 3 [(cisco_field).name="PacketsSent"];
    optional uint64 bytes_sent = 4 [(cisco_field).name="BytesSent"];
    optional uint32 input_drops = 5 [(cisco_field).name="InputDrops"];
    optional uint32 input_queue_drops = 6 [(cisco_field).name="InputQueueDrops"];
    optional uint32 input_errors = 7 [(cisco_field).name="InputErrors"];
    optional uint32 unknown_protocol_packets_received = 8 [(cisco_field).name="UnknownProtocolPacketsReceived"];
    optional uint32 output_drops = 9 [(cisco_field).name="OutputDrops"];
    optional uint32 output_queue_drops = 10 [(cisco_field).name="OutputQueueDrops"];
    optional uint32 output_errors = 11 [(cisco_field).name="OutputErrors"];
    optional uint32 last_data_time = 12 [(cisco_field).name="LastDataTime"];
    optional uint32 seconds_since_last_clear_counters = 13 [(cisco_field).name="SecondsSinceLastClearCounters"];
    optional uint32 last_discontinuity_time = 14 [(cisco_field).name="LastDiscontinuityTime"];
    optional uint32 seconds_since_packet_received = 15 [(cisco_field).name="SecondsSincePacketReceived"];
    optional uint32 seconds_since_packet_sent = 16 [(cisco_field).name="SecondsSincePacketSent"];
}

message statsdbag_datarate {
    optional uint64 input_data_rate = 1 [(cisco_field).name="InputDataRate"];
    optional uint64 input_packet_rate = 2 [(cisco_field).name="InputPacketRate"];
    optional uint64 output_data_rate = 3 [(cisco_field).name="OutputDataRate"];
    optional uint64 output_packet_rate = 4 [(cisco_field).name="OutputPacketRate"];
    optional uint64 peak_input_data_rate = 5 [(cisco_field).name="PeakInputDataRate"];
    optional uint64 peak_input_packet_rate = 6 [(cisco_field).name="PeakInputPacketRate"];
    optional uint64 peak_output_data_rate = 7 [(cisco_field).name="PeakOutputDataRate"];
    optional uint64 peak_output_packet_rate = 8 [(cisco_field).name="PeakOutputPacketRate"];
    optional uint32 bandwidth = 9 [(cisco_field).name="Bandwidth"];
    optional uint32 load_interval = 10 [(cisco_field).name="LoadInterval"];
    optional uint32 output_load = 11 [(cisco_field).name="OutputLoad"];
    optional uint32 input_load = 12 [(cisco_field).name="InputLoad"];
    optional uint32 reliability = 13 [(cisco_field).name="Reliability"];
}

message ifstats_srp_per_side_errors_st {
    optional uint32 error_packets_received = 1 [(cisco_field).name="ErrorPacketsReceived"];
    optional uint32 crc_errors = 2 [(cisco_field).name="CRCErrors"];
    optional uint32 input_insufficient_resource_events = 3 [(cisco_field).name="InputInsufficientResourceEvents"];
    optional uint32 mac_aborts_received = 4 [(cisco_field).name="MACAbortsReceived"];
    optional uint32 mac_runt_packets_received = 5 [(cisco_field).name="MACRuntPacketsReceived"];
    optional uint32 mac_giant_packets_received = 6 [(cisco_field).name="MACGiantPacketsReceived"];
    optional uint32 framer_runt_packets_received = 7 [(cisco_field).name="FramerRuntPacketsReceived"];
    optional uint32 framer_giant_packets_received = 8 [(cisco_field).name="FramerGiantPacketsReceived"];
    optional uint32 framer_aborts_received = 9 [(cisco_field).name="FramerAbortsReceived"];
}

message ifstats_srp_per_side_data_rate_st {
    optional uint32 bit_rate_sent = 1 [(cisco_field).name="BitRateSent"];
    optional uint32 packet_rate_sent = 2 [(cisco_field).name="PacketRateSent"];
    optional uint32 bit_rate_received = 3 [(cisco_field).name="BitRateReceived"];
    optional uint32 packet_rate_received = 4 [(cisco_field).name="PacketRateReceived"];
}

message ifstatsbag_srp {
    optional uint32 data_rate_interval = 1 [(cisco_field).name="DataRateInterval"];
    optional ifstats_srp_per_side_data_rate_st side_a_data_rate = 2 [(cisco_field).name="SideADataRate"];
    optional ifstats_srp_per_side_data_rate_st side_b_data_rate = 3 [(cisco_field).name="SideBDataRate"];
    optional ifstats_srp_per_side_errors_st side_a_errors = 4 [(cisco_field).name="SideAErrors"];
    optional ifstats_srp_per_side_errors_st side_b_errors = 5 [(cisco_field).name="SideBErrors"];
}

message stats_bag_id_td {
    optional string id_type = 1 [(cisco_field).name="id_type"];
    optional uint32 unused = 2 [(cisco_field).name="Unused"];
    optional uint32 interface_handle = 3 [(cisco_field).name="InterfaceHandle"];
    optional uint32 node_id = 4 [(cisco_field).name="NodeID"];
    optional uint32 feature_id = 5 [(cisco_field).name="Feature_ID"];
    optional uint32 id = 6 [(cisco_field).name="ID"];
}

message stats_bag_block_st {
    optional string type = 1 [(cisco_field).name="type"];
    optional uint32 count = 2 [(cisco_field).name="count"];
    optional bytes data = 3 [(cisco_field).name="data"];
}

message stats_bag_element_st {
    optional bytes key = 1 [(cisco_field).name="key"];
    repeated stats_bag_block_st block_array = 2 [(cisco_field).name="block_array"];
}

message stats_data {
    optional uint32 stats_type = 1 [(cisco_field).name="stats_type"];
    optional stats_bag_id_td stats_id = 2 [(cisco_field).name="stats_id"];
    optional string contents = 3 [(cisco_field).name="contents"];
    repeated stats_bag_block_st block_array = 4 [(cisco_field).name="block_array"];
    repeated stats_bag_element_st element_array = 5 [(cisco_field).name="element_array"];
}

message ppp_show_int_ncp_info {
    optional string ncp_state = 1 [(cisco_field).name="NCPState"];
    optional string ncp_identifier = 2 [(cisco_field).name="NCPIdentifier"];
}

message ppp_show_int_info {
    optional string lcp_state = 1 [(cisco_field).name="LCPState"];
    optional sint32 is_loopback_detected = 2 [(cisco_field).name="IsLoopbackDetected"];
    optional uint32 keepalive_period = 3 [(cisco_field).name="KeepalivePeriod"];
    optional sint32 is_mp_bundle_member = 4 [(cisco_field).name="IsMPBundleMember"];
    optional sint32 is_multilink_open = 5 [(cisco_field).name="IsMultilinkOpen"];
    repeated ppp_show_int_ncp_info ncp_info_array = 6 [(cisco_field).name="NCPInfoArray"];
}

message bm_mbr_state_reason_data_type {
    optional string reason_type = 1 [(cisco_field).name="ReasonType"];
    optional string severity = 2 [(cisco_field).name="Severity"];
}

message bm_mac_addr_st {
    optional bytes address = 1 [(cisco_field).name="Address"];
}

message bm_mux_data {
    optional string mux_state = 1 [(cisco_field).name="MuxState"];
    optional uint32 error = 2 [(cisco_field).name="Error"];
    optional string member_mux_state_reason = 3 [(cisco_field).name="MemberMuxStateReason"];
    optional bm_mbr_state_reason_data_type member_mux_state_reason_data = 4 [(cisco_field).name="MemberMuxStateReasonData"];
    optional string member_state = 5 [(cisco_field).name="MemberState"];
    optional string mux_state_reason = 6 [(cisco_field).name="MuxStateReason"];
}

message bm_member_data {
    optional uint32 bandwidth = 1 [(cisco_field).name="Bandwidth"];
    optional bm_mux_data member_mux_data = 2 [(cisco_field).name="MemberMuxData"];
    optional uint32 port_priority = 3 [(cisco_field).name="PortPriority"];
    optional uint32 port_number = 4 [(cisco_field).name="PortNumber"];
    optional uint32 underlying_link_id = 5 [(cisco_field).name="UnderlyingLinkID"];
    optional uint32 link_order_number = 6 [(cisco_field).name="LinkOrderNumber"];
    optional uint32 interface_name = 7 [(cisco_field).name="InterfaceName"];
    optional uint32 iccp_node = 8 [(cisco_field).name="ICCPNode"];
    optional string member_type = 9 [(cisco_field).name="MemberType"];
    optional string member_name = 10 [(cisco_field).name="MemberName"];
    optional bm_mac_addr_st mac_address = 11 [(cisco_field).name="MACAddress"];
}

message vlan_double_tag_stack {
    optional uint32 outer_tag = 1 [(cisco_field).name="OuterTag"];
    optional uint32 second_tag = 2 [(cisco_field).name="SecondTag"];
}

message efp_range {
    optional uint32 vlan_id_low = 1 [(cisco_field).name="VLAN_ID_Low"];
    optional uint32 vlan_id_high = 2 [(cisco_field).name="VLAN_ID_High"];
}

message efp_tag_match {
    optional string ethertype = 1 [(cisco_field).name="Ethertype"];
    repeated efp_range vlan_ranges = 2 [(cisco_field).name="VLANRanges"];
    optional string priority = 3 [(cisco_field).name="Priority"];
}

message efp_vlan_tag {
    optional string ethertype = 1 [(cisco_field).name="Ethertype"];
    optional uint32 vlan_id = 2 [(cisco_field).name="VLAN_ID"];
}

message efp_tag_local_traffic_stack {
    repeated efp_vlan_tag local_traffic_tags = 1 [(cisco_field).name="LocalTrafficTags"];
}

message MacAddressType {
    optional bytes value = 1 [(cisco_field).name="value"];
}

message efp_description {
    repeated efp_tag_match tags_to_match = 1 [(cisco_field).name="TagsToMatch"];
    optional string payload_ethertype = 2 [(cisco_field).name="PayloadEthertype"];
    optional uint32 tags_popped = 3 [(cisco_field).name="TagsPopped"];
    repeated efp_vlan_tag pushes = 4 [(cisco_field).name="Pushes"];
    optional efp_tag_local_traffic_stack local_traffic_stack = 5 [(cisco_field).name="LocalTrafficStack"];
    optional sint32 is_exact_match = 6 [(cisco_field).name="IsExactMatch"];
    optional sint32 is_native_vlan = 7 [(cisco_field).name="IsNativeVLAN"];
    optional sint32 is_native_preserving = 8 [(cisco_field).name="IsNativePreserving"];
    optional MacAddressType source_mac_match = 9 [(cisco_field).name="SourceMACMatch"];
    optional MacAddressType destination_mac_match = 10 [(cisco_field).name="DestinationMACMatch"];
}

message efp_description_p_type {
    optional efp_description value = 1 [(cisco_field).name="value"];
}

message vlan_tag_stack_type {
    optional string vlan_encapsulation = 1 [(cisco_field).name="VLANEncapsulation"];
    optional uint32 tag = 2 [(cisco_field).name="Tag"];
    optional vlan_double_tag_stack stack = 3 [(cisco_field).name="Stack"];
    optional uint32 outer_tag = 4 [(cisco_field).name="OuterTag"];
    optional uint32 native_tag = 5 [(cisco_field).name="NativeTag"];
    optional uint32 dot1ad_tag = 6 [(cisco_field).name="Dot1adTag"];
    optional uint32 dot1ad_native_tag = 7 [(cisco_field).name="Dot1adNativeTag"];
    optional efp_description_p_type service_instance_details = 8 [(cisco_field).name="ServiceInstanceDetails"];
    optional vlan_double_tag_stack dot1ad_dot1q_stack = 9 [(cisco_field).name="Dot1adDot1qStack"];
    optional uint32 dot1ad_outer_tag = 10 [(cisco_field).name="Dot1adOuterTag"];
}

message vlan_intf_generic {
    optional vlan_tag_stack_type encapsulation_details = 1 [(cisco_field).name="EncapsulationDetails"];
}

message srp_topology_node_data {
    optional uint32 hop_count = 1 [(cisco_field).name="HopCount"];
    optional string mac_address = 2 [(cisco_field).name="MACAddress"];
    optional bytes ipv4_address = 3 [(cisco_field).name="IPv4Address"];
    optional sint32 is_wrapped = 4 [(cisco_field).name="IsWrapped"];
    optional sint32 is_srr_supported = 5 [(cisco_field).name="IsSRRSupported"];
    optional string node_name = 6 [(cisco_field).name="NodeName"];
}

message srp_topology_map {
    optional uint32 topology_timer = 1 [(cisco_field).name="TopologyTimer"];
    optional uint32 next_topology_packet_delay = 2 [(cisco_field).name="NextTopologyPacketDelay"];
    optional uint32 time_since_last_topology_packet_received = 3 [(cisco_field).name="TimeSinceLastTopologyPacketReceived"];
    optional uint32 time_since_last_topology_change = 4 [(cisco_field).name="TimeSinceLastTopologyChange"];
    optional uint32 number_of_nodes_on_ring = 5 [(cisco_field).name="NumberOfNodesOnRing"];
    repeated srp_topology_node_data ring_node_list = 6 [(cisco_field).name="RingNodeList"];
}

message srp_topology_info {
    optional sint32 is_admin_down = 1 [(cisco_field).name="IsAdminDown"];
    repeated srp_topology_map local_information = 2 [(cisco_field).name="LocalInformation"];
}

message srp_failure_info {
    optional string type = 1 [(cisco_field).name="type"];
    optional string reported_state = 2 [(cisco_field).name="ReportedState"];
    optional string debounced_state = 3 [(cisco_field).name="DebouncedState"];
    optional string current_state = 4 [(cisco_field).name="CurrentState"];
    optional uint64 stable_time = 5 [(cisco_field).name="StableTime"];
    optional uint32 debounced_delay = 6 [(cisco_field).name="DebouncedDelay"];
}

message srp_ips_side_detail {
    optional string mac_address = 1 [(cisco_field).name="MACAddress"];
    optional string wrap_state = 2 [(cisco_field).name="WrapState"];
    optional uint32 packet_sent_timer = 3 [(cisco_field).name="PacketSentTimer"];
    optional uint32 send_timer_time_remaining = 4 [(cisco_field).name="SendTimerTimeRemaining"];
    optional uint32 wtr_timer_remaining = 5 [(cisco_field).name="WTRTimerRemaining"];
    optional string self_detected_request = 6 [(cisco_field).name="SelfDetectedRequest"];
    optional string remote_request = 7 [(cisco_field).name="RemoteRequest"];
    repeated srp_failure_info asserted_failures = 8 [(cisco_field).name="AssertedFailures"];
    optional string rx_neighbor_mac_address = 9 [(cisco_field).name="RXNeighborMACAddress"];
    optional string rx_message_type = 10 [(cisco_field).name="RXMessageType"];
    optional string rx_path_type = 11 [(cisco_field).name="RXPathType"];
    optional uint32 rx_ttl = 12 [(cisco_field).name="RX_TTL"];
    optional sint32 rx_packet_test = 13 [(cisco_field).name="RXPacketTest"];
    optional string tx_neighbor_mac_address = 14 [(cisco_field).name="TXNeighborMACAddress"];
    optional string tx_message_type = 15 [(cisco_field).name="TXMessageType"];
    optional string tx_path_type = 16 [(cisco_field).name="TXPathType"];
    optional uint32 tx_ttl = 17 [(cisco_field).name="TX_TTL"];
    optional sint32 tx_packet_test = 18 [(cisco_field).name="TXPacketTest"];
    optional uint32 delay_keep_alive_trigger = 19 [(cisco_field).name="DelayKeepAliveTrigger"];
}

message srp_ips_detail {
    optional string mac_address = 1 [(cisco_field).name="MACAddress"];
    optional sint32 is_inter_card_bus_enabled = 2 [(cisco_field).name="IsInterCardBusEnabled"];
    optional uint32 wtr_timer_period = 3 [(cisco_field).name="WTRTimerPeriod"];
    optional srp_ips_side_detail side_a = 4 [(cisco_field).name="SideA"];
    optional srp_ips_side_detail side_b = 5 [(cisco_field).name="SideB"];
}

message srp_ips_info {
    optional sint32 is_admin_down = 1 [(cisco_field).name="IsAdminDown"];
    repeated srp_ips_detail local_information = 2 [(cisco_field).name="LocalInformation"];
}

message srr_node_data {
    optional string node_name = 1 [(cisco_field).name="NodeName"];
    optional sint32 srr_entry_exits = 2 [(cisco_field).name="SRREntryExits"];
    optional string mac_address = 3 [(cisco_field).name="MACAddress"];
    optional string outer_failure = 4 [(cisco_field).name="OuterFailure"];
    optional string inner_failure = 5 [(cisco_field).name="InnerFailure"];
    optional sint32 is_last_announce_received = 6 [(cisco_field).name="IsLastAnnounceReceived"];
    optional uint32 last_announce_received_time = 7 [(cisco_field).name="LastAnnounceReceivedTime"];
}

message srp_srr_detail {
    optional uint32 version_number = 1 [(cisco_field).name="VersionNumber"];
    optional sint32 is_wrong_version_received = 2 [(cisco_field).name="IsWrongVersionReceived"];
    optional uint32 last_wrong_version_receive_time = 3 [(cisco_field).name="LastWrongVersionReceiveTime"];
    optional string mac_address = 4 [(cisco_field).name="MACAddress"];
    optional string node_state = 5 [(cisco_field).name="NodeState"];
    optional sint32 is_outer_ring_in_use = 6 [(cisco_field).name="IsOuterRingInUse"];
    optional sint32 is_inner_ring_in_use = 7 [(cisco_field).name="IsInnerRingInUse"];
    optional sint32 is_announce = 8 [(cisco_field).name="IsAnnounce"];
    optional string outer_fail_type = 9 [(cisco_field).name="OuterFailType"];
    optional string inner_fail_type = 10 [(cisco_field).name="InnerFailType"];
    optional uint32 packet_send_timer = 11 [(cisco_field).name="PacketSendTimer"];
    optional uint32 next_srr_packet_send_time = 12 [(cisco_field).name="NextSRRPacketSendTime"];
    optional uint32 single_ring_bw = 13 [(cisco_field).name="SingleRingBW"];
    optional uint32 wtr_time = 14 [(cisco_field).name="WTRTime"];
    optional uint32 wtr_timer_remaining_outer_ring = 15 [(cisco_field).name="WTRTimerRemainingOuterRing"];
    optional uint32 wtr_timer_remaining_inner_ring = 16 [(cisco_field).name="WTRTimerRemainingInnerRing"];
    repeated srr_node_data nodes_on_ring = 17 [(cisco_field).name="NodesOnRing"];
    repeated srr_node_data nodes_not_on_ring = 18 [(cisco_field).name="NodesNotOnRing"];
}

message srp_srr_info {
    optional sint32 is_admin_down = 1 [(cisco_field).name="IsAdminDown"];
    optional sint32 is_srr_enabled = 2 [(cisco_field).name="IsSRREnabled"];
    repeated srp_srr_detail srr_detailed_info = 3 [(cisco_field).name="SRRDetailedInfo"];
}

message srp_rate_limit_detail {
    optional uint32 min_priority_value = 1 [(cisco_field).name="MinPriorityValue"];
}

message srp_rate_limit_info {
    optional sint32 is_admin_down = 1 [(cisco_field).name="IsAdminDown"];
    repeated srp_rate_limit_detail rate_limit_detailed_info = 2 [(cisco_field).name="RateLimitDetailedInfo"];
}

message srp_all_info {
    optional srp_ips_info ips_info = 1 [(cisco_field).name="IPSInfo"];
    optional srp_topology_info topology_info = 2 [(cisco_field).name="TopologyInfo"];
    optional srp_srr_info srr_info = 3 [(cisco_field).name="SRRInfo"];
    optional srp_rate_limit_info rate_limit_info = 4 [(cisco_field).name="RateLimitInfo"];
}

message tunl_pfi_in6_addr_t {
    optional bytes value = 1 [(cisco_field).name="value"];
}

message pfi_ip_addr_union {
    optional string afi = 1 [(cisco_field).name="AFI"];
    optional bytes ipv4 = 2 [(cisco_field).name="IPV4"];
    optional tunl_pfi_in6_addr_t ipv6 = 3 [(cisco_field).name="IPV6"];
}

message im_cmd_tunl_gre_info {
    optional string source_name = 1 [(cisco_field).name="SourceName"];
    optional pfi_ip_addr_union source_ip_address = 2 [(cisco_field).name="SourceIPAddress"];
    optional pfi_ip_addr_union destination_ip_address = 3 [(cisco_field).name="DestinationIPAddress"];
    optional uint32 tunnel_tos = 4 [(cisco_field).name="TunnelTOS"];
    optional uint32 tunnel_ttl = 5 [(cisco_field).name="TunnelTTL"];
    optional uint32 key = 6 [(cisco_field).name="Key"];
    optional uint32 keepalive_period = 7 [(cisco_field).name="KeepalivePeriod"];
    optional uint32 keepalive_maximum_retry = 8 [(cisco_field).name="KeepaliveMaximumRetry"];
    optional string tunnel_mode = 9 [(cisco_field).name="TunnelMode"];
    optional string keepalive_state = 10 [(cisco_field).name="KeepaliveState"];
    optional string df_bit_state = 11 [(cisco_field).name="DFBitState"];
    optional string key_bit_state = 12 [(cisco_field).name="KeyBitState"];
}

message serial_interface {
    optional string timeslots = 1 [(cisco_field).name="Timeslots"];
}

message im_sonet_pos_info_interface {
    optional string aps_state = 1 [(cisco_field).name="APSState"];
}

message pwhe_ether_interface_info {
    optional string interface_list_name = 1 [(cisco_field).name="InterfaceListName"];
    optional uint32 l2_overhead = 2 [(cisco_field).name="L2Overhead"];
    optional uint32 internal_label = 3 [(cisco_field).name="InternalLabel"];
}

message cem_interface {
    optional string timeslots = 1 [(cisco_field).name="Timeslots"];
    optional uint32 payload = 2 [(cisco_field).name="Payload"];
    optional uint32 dejitter_buffer = 3 [(cisco_field).name="DejitterBuffer"];
    optional sint32 framing = 4 [(cisco_field).name="Framing"];
}

message nv_optical_interface_info {
    optional string controller = 1 [(cisco_field).name="Controller"];
}

message im_cmd_gcc_per_port_info {
    optional string derived_mode = 1 [(cisco_field).name="DerivedMode"];
    optional string sec_state = 2 [(cisco_field).name="SecState"];
}

message im_cmd_damp_st {
    optional uint32 penalty = 1 [(cisco_field).name="Penalty"];
    optional bool is_suppressed_enabled = 2 [(cisco_field).name="IsSuppressedEnabled"];
    optional uint32 seconds_remaining = 3 [(cisco_field).name="SecondsRemaining"];
    optional uint32 half_life = 4 [(cisco_field).name="HalfLife"];
    optional uint32 reuse_threshold = 5 [(cisco_field).name="ReuseThreshold"];
    optional uint32 suppress_threshold = 6 [(cisco_field).name="SuppressThreshold"];
    optional uint32 maximum_suppress_time = 7 [(cisco_field).name="MaximumSuppressTime"];
    optional uint32 restart_penalty = 8 [(cisco_field).name="RestartPenalty"];
}

message im_cmd_arp_info_st {
    optional uint32 arp_timeout = 1 [(cisco_field).name="ARPTimeout"];
    optional string arp_type_name = 2 [(cisco_field).name="ARPTypeName"];
    optional bool arp_is_learning_disabled = 3 [(cisco_field).name="ARPIsLearningDisabled"];
}

message im_cmd_ip_info_st {
    optional bytes ip_address = 1 [(cisco_field).name="IPAddress"];
    optional uint32 subnet_mask_length = 2 [(cisco_field).name="SubnetMaskLength"];
}

message im_cmd_mac_addr_st {
    optional bytes address = 1 [(cisco_field).name="Address"];
}

message im_cmd_if_stats {
    optional string stats_type = 1 [(cisco_field).name="StatsType"];
    optional ifstatsbag_generic full_interface_stats = 2 [(cisco_field).name="FullInterfaceStats"];
    optional ifstatsbag_basic basic_interface_stats = 3 [(cisco_field).name="BasicInterfaceStats"];
}

message im_cmd_carrier_delay_st {
    optional uint32 carrier_delay_up = 1 [(cisco_field).name="CarrierDelayUp"];
    optional uint32 carrier_delay_down = 2 [(cisco_field).name="CarrierDelayDown"];
}

message im_cmd_fr_info {
    optional string fr_encapsulation_type = 1 [(cisco_field).name="FREncapsulationType"];
    optional string lmi_type = 2 [(cisco_field).name="LMIType"];
    optional uint32 lmidlci = 3 [(cisco_field).name="LMIDLCI"];
    optional bool is_nni = 4 [(cisco_field).name="IsNNI"];
    optional bool is_dte = 5 [(cisco_field).name="IsDTE"];
    optional bool is_lmi_up = 6 [(cisco_field).name="IsLMIUp"];
    optional bool is_lmi_nni_dce_up = 7 [(cisco_field).name="IsLMI_NNI_DCEUp"];
    optional bool is_lmi_enabled = 8 [(cisco_field).name="IsLMIEnabled"];
    optional uint32 enquiries_received = 9 [(cisco_field).name="EnquiriesReceived"];
    optional uint32 enquiries_sent = 10 [(cisco_field).name="EnquiriesSent"];
    optional uint32 status_received = 11 [(cisco_field).name="StatusReceived"];
    optional uint32 status_sent = 12 [(cisco_field).name="StatusSent"];
    optional uint32 update_status_received = 13 [(cisco_field).name="UpdateStatusReceived"];
    optional uint32 update_status_sent = 14 [(cisco_field).name="UpdateStatusSent"];
}

message im_cmd_encaps_info {
    optional string encapsulation_type = 1 [(cisco_field).name="EncapsulationType"];
    optional im_cmd_fr_info frame_relay_information = 2 [(cisco_field).name="FrameRelayInformation"];
    optional vlan_intf_generic dot1_q_information = 3 [(cisco_field).name="DOT1QInformation"];
    optional ppp_show_int_info ppp_information = 4 [(cisco_field).name="PPPInformation"];
}

message im_cmd_srp_info {
    optional srp_all_info srp_information = 1 [(cisco_field).name="SRPInformation"];
    optional ifstatsbag_srp srp_statistics = 2 [(cisco_field).name="SRPStatistics"];
}

message im_cmd_tunnel_info {
    optional string source_name = 1 [(cisco_field).name="SourceName"];
    optional bytes source_ipv4_address = 2 [(cisco_field).name="SourceIPv4Address"];
    optional bytes destination_ipv4_address = 3 [(cisco_field).name="DestinationIPv4Address"];
    optional string tunnel_type = 4 [(cisco_field).name="TunnelType"];
    optional uint32 key = 5 [(cisco_field).name="Key"];
    optional uint32 ttl = 6 [(cisco_field).name="TTL"];
}

message im_cmd_bundle_info {
    repeated bm_member_data member_list = 1 [(cisco_field).name="MemberList"];
}

message im_cmd_intf_type_info {
    optional string interface_type_info = 1 [(cisco_field).name="InterfaceTypeInfo"];
    optional im_cmd_srp_info srp_information = 2 [(cisco_field).name="SRPInformation"];
    optional im_cmd_tunnel_info tunnel_information = 3 [(cisco_field).name="TunnelInformation"];
    optional im_cmd_bundle_info bundle_information = 4 [(cisco_field).name="BundleInformation"];
    optional serial_interface serial_information = 5 [(cisco_field).name="SerialInformation"];
    optional im_sonet_pos_info_interface sonet_pos_information = 6 [(cisco_field).name="SonetPOSInformation"];
    optional im_cmd_tunl_gre_info tunnel_gre_information = 7 [(cisco_field).name="TunnelGREInformation"];
    optional pwhe_ether_interface_info pseudowire_head_end_information = 8 [(cisco_field).name="PseudowireHeadEndInformation"];
    optional cem_interface cem_information = 9 [(cisco_field).name="CEMInformation"];
    optional im_cmd_gcc_per_port_info gcc_information = 10 [(cisco_field).name="GCCInformation"];
}

// The following metadata must not be deleted or modified:
option (cisco_file).metadata="{\"bag\": \"im_cmd_info\", \"v_maj\": 1, \"version\": 1.0, \"bytecode\": \"$268={InterfaceHandle}D%h{InterfaceType}I%i{HardwareTypeString}64s{State}[im_state_type_]e{LineState}[im_state_type_]e{Encapsulation}I%c{EncapsulationTypeString}32s{MTU}D{IsL2TransportEnabled}b{StateTransitionCount}D{LastStateTransitionTime}D{IsDampeningEnabled}b{DampeningInformation}p($256){Speed}p(D){CRCLength}p(D){IsScrambleEnabled}p(b){Duplexity}p([im_attr_duplex_enum]e){MediaType}p([im_attr_media_type_enum]e){LinkType}p([im_attr_link_type_enum]e){InFlowControl}p([im_attr_flow_control_enum]e){OutFlowControl}p([im_attr_flow_control_enum]e){MACAddress}p($259){BurnedInAddress}p($259){CarrierDelay}p($261){Bandwidth}D{MaxBandwidth}D{Keepalive}p(D){IsL2Looped}b{ParentInterfaceName}D%h{LoopbackConfiguration}p([im_cmd_loopback_enum]e){Description}s{ARPInformation}p($257){IPInformation}p($258){IsMaintenanceEnabled}p(b){IsDataInverted}p(b){TransportMode}p([im_attr_transport_mode_enum]e){EncapsulationInformation}p($263){InterfaceTypeInformation}p($267){DataRates}p($68){InterfaceStatistics}p($260){L2InterfaceStatistics}p($90){NVOptical}p($254);$66={PacketsReceived}H{BytesReceived}H{PacketsSent}H{BytesSent}H{MulticastPacketsReceived}H{BroadcastPacketsReceived}H{MulticastPacketsSent}H{BroadcastPacketsSent}H{OutputDrops}D{OutputQueueDrops}D{InputDrops}D{InputQueueDrops}D{RuntPacketsReceived}D{GiantPacketsReceived}D{ThrottledPacketsReceived}D{ParityPacketsReceived}D{UnknownProtocolPacketsReceived}D{InputErrors}D{CRCErrors}D{InputOverruns}D{FramingErrorsReceived}D{InputIgnoredPackets}D{InputAborts}D{OutputErrors}D{OutputUnderruns}D{OutputBufferFailures}D{OutputBuffersSwappedOut}D{Applique}D{Resets}D{CarrierTransitions}D{AvailabilityFlag}D{LastDataTime}D{SecondsSinceLastClearCounters}D{LastDiscontinuityTime}D{SecondsSincePacketReceived}D{SecondsSincePacketSent}D;$67={PacketsReceived}H{BytesReceived}H{PacketsSent}H{BytesSent}H{InputDrops}D{InputQueueDrops}D{InputErrors}D{UnknownProtocolPacketsReceived}D{OutputDrops}D{OutputQueueDrops}D{OutputErrors}D{LastDataTime}D{SecondsSinceLastClearCounters}D{LastDiscontinuityTime}D{SecondsSincePacketReceived}D{SecondsSincePacketSent}D;$68={InputDataRate}H{InputPacketRate}H{OutputDataRate}H{OutputPacketRate}H{PeakInputDataRate}H{PeakInputPacketRate}H{PeakOutputDataRate}H{PeakOutputPacketRate}H{Bandwidth}D{LoadInterval}D{OutputLoad}C{InputLoad}C{Reliability}C;$72={ErrorPacketsReceived}D{CRCErrors}D{InputInsufficientResourceEvents}D{MACAbortsReceived}D{MACRuntPacketsReceived}D{MACGiantPacketsReceived}D{FramerRuntPacketsReceived}D{FramerGiantPacketsReceived}D{FramerAbortsReceived}D;$74={valid}PD{tx_bit_rate_wrapped}PD{tx_pkt_rate_wrapped}PD{BitRateSent}D{PacketRateSent}D{BitRateReceived}D{PacketRateReceived}D;$76={DataRateInterval}D{SideADataRate}$74{SideBDataRate}$74{SideAErrors}$72{SideBErrors}$72;$83=?(<id_type,stats_id_type_enum>,0:{Unused}D,1:{InterfaceHandle}D%h,3:{NodeID}D%n,5:{Feature_ID}D,4:{ID}D);$86={type}[stats_counter_type_enum]e{count}D{data}y;$88={key}y{block_array}a($86);$90={stats_type}D{stats_id}$83{contents}[stats_type_contents_enum]e{block_array}a($86){element_array}a($88);$91={NCPState}[ppp_fsm_state_type]e{NCPIdentifier}[ncp_ident]e;$92={LCPState}[ppp_fsm_state_type]e{IsLoopbackDetected}d{KeepalivePeriod}D{IsMPBundleMember}d{IsMultilinkOpen}d{NCPInfoArray}a($91);$146={ReasonType}[bm_state_reason_target_type]e{Severity}[bm_severity_type]e;$147={Address}6x%m;$161={MuxState}[bm_muxstate]e{Error}D{MemberMuxStateReason}[bm_mbr_state_reason_type]e{MemberMuxStateReasonData}$146{MemberState}[bmd_member_state_enum]e{MuxStateReason}[bm_muxreason]e;$162={Bandwidth}D{MemberMuxData}$161{PortPriority}I{PortNumber}I{UnderlyingLinkID}I{LinkOrderNumber}I{InterfaceName}D%h{ICCPNode}D{MemberType}[bmd_member_type_enum]e{MemberName}s{MACAddress}p($147);$206={OuterTag}I{SecondTag}I;$207={VLAN_ID_Low}I{VLAN_ID_High}I;$209={Ethertype}[efp_tag_etype]e{VLANRanges}a($207){Priority}[efp_tag_priority]e;$211={Ethertype}[efp_tag_etype]e{VLAN_ID}I;$214={LocalTrafficTags}a($211);$216=6x%m;$217={TagsToMatch}a($209){PayloadEthertype}[efp_payload_etype]e{TagsPopped}I{Pushes}a($211){LocalTrafficStack}p($214){IsExactMatch}d{IsNativeVLAN}d{IsNativePreserving}d{SourceMACMatch}p($216){DestinationMACMatch}p($216);$219=p($217);$220=?(<VLANEncapsulation,vlan_encaps>,0:v,1:{Tag}I,2:{Stack}$206,3:{OuterTag}I,4:{NativeTag}I,5:{Dot1adTag}I,6:{Dot1adNativeTag}I,7:{ServiceInstanceDetails}$219,8:{Dot1adDot1qStack}$206,9:{Dot1adOuterTag}I);$221={EncapsulationDetails}$220;$222={HopCount}I{MACAddress}s{IPv4Address}N{IsWrapped}d{IsSRRSupported}d{NodeName}s;$223={TopologyTimer}D{NextTopologyPacketDelay}D{TimeSinceLastTopologyPacketReceived}D{TimeSinceLastTopologyChange}D{NumberOfNodesOnRing}I{RingNodeList}a($222);$224={IsAdminDown}d{LocalInformation}a($223);$225={type}[srp_mgmt_failure_et]e{ReportedState}[srp_mgmt_failure_state_et]e{DebouncedState}[srp_mgmt_failure_state_et]e{CurrentState}[srp_mgmt_failure_state_et]e{StableTime}H{DebouncedDelay}D;$226={MACAddress}s{WrapState}[srp_mgmt_ips_wrap_state]e{PacketSentTimer}D{SendTimerTimeRemaining}D{WTRTimerRemaining}D{SelfDetectedRequest}[srp_mgmt_ips_req_type]e{RemoteRequest}[srp_mgmt_ips_req_type]e{AssertedFailures}a($225){RXNeighborMACAddress}s{RXMessageType}[srp_mgmt_ips_req_type]e{RXPathType}[srp_mgmt_ips_path_ind]e{RX_TTL}D{RXPacketTest}d{TXNeighborMACAddress}s{TXMessageType}[srp_mgmt_ips_req_type]e{TXPathType}[srp_mgmt_ips_path_ind]e{TX_TTL}D{TXPacketTest}d{DelayKeepAliveTrigger}D;$227={MACAddress}s{IsInterCardBusEnabled}d{WTRTimerPeriod}D{SideA}$226{SideB}$226;$228={IsAdminDown}d{LocalInformation}a($227);$229={NodeName}s{SRREntryExits}d{MACAddress}s{OuterFailure}[srp_mgmt_srr_failure_type]e{InnerFailure}[srp_mgmt_srr_failure_type]e{IsLastAnnounceReceived}d{LastAnnounceReceivedTime}D;$230={VersionNumber}D{IsWrongVersionReceived}d{LastWrongVersionReceiveTime}D{MACAddress}s{NodeState}[srp_mgmt_srr_node_state]e{IsOuterRingInUse}d{IsInnerRingInUse}d{IsAnnounce}d{OuterFailType}[srp_mgmt_srr_failure_type]e{InnerFailType}[srp_mgmt_srr_failure_type]e{PacketSendTimer}D{NextSRRPacketSendTime}D{SingleRingBW}D{WTRTime}D{WTRTimerRemainingOuterRing}D{WTRTimerRemainingInnerRing}D{NodesOnRing}a($229){NodesNotOnRing}a($229);$231={IsAdminDown}d{IsSRREnabled}d{SRRDetailedInfo}a($230);$232={MinPriorityValue}I;$233={IsAdminDown}d{RateLimitDetailedInfo}a($232);$236={IPSInfo}$228{TopologyInfo}$224{SRRInfo}$231{RateLimitInfo}$233;$247=16x%s;$248=?(<AFI,tunl_pfi_af_id_type>,0:v,2:{IPV4}N,10:{IPV6}$247);$249={SourceName}s{SourceIPAddress}$248{DestinationIPAddress}$248{TunnelTOS}D{TunnelTTL}D{Key}D{KeepalivePeriod}I{KeepaliveMaximumRetry}C{TunnelMode}[TunnelGREMode]e{KeepaliveState}[TunnelKA_DFState]e{DFBitState}[TunnelKA_DFState]e{KeyBitState}[TunnelKeyState]e;$250={Timeslots}s;$251={APSState}[sonet_aps_et]e;$252={InterfaceListName}s{L2Overhead}D{InternalLabel}D;$253={Timeslots}s{Payload}I{DejitterBuffer}I{Framing}d;$254={Controller}s;$255={DerivedMode}[GCC_DER_STATE]e{SecState}[GCC_SEC_STATE]e;$256={Penalty}D{IsSuppressedEnabled}b{SecondsRemaining}D{HalfLife}D{ReuseThreshold}D{SuppressThreshold}D{MaximumSuppressTime}D{RestartPenalty}D;$257={ARPTimeout}D{ARPTypeName}s{ARPIsLearningDisabled}b;$258={IPAddress}N{SubnetMaskLength}D;$259={Address}6x%m;$260=?(<StatsType,im_cmd_stats_enum>,1:{FullInterfaceStats}$66,2:{BasicInterfaceStats}$67);$261={CarrierDelayUp}D{CarrierDelayDown}D;$262={FREncapsulationType}[im_cmd_fr_type_enum]e{LMIType}[im_cmd_lmi_type_enum]e{LMIDLCI}D{IsNNI}b{IsDTE}b{IsLMIUp}b{IsLMI_NNI_DCEUp}b{IsLMIEnabled}b{EnquiriesReceived}D{EnquiriesSent}D{StatusReceived}D{StatusSent}D{UpdateStatusReceived}D{UpdateStatusSent}D;$263=?(<EncapsulationType,im_cmd_encaps_enum>,0:{FrameRelayInformation}$262,1:{DOT1QInformation}$221,2:{PPPInformation}$92);$264={SRPInformation}p($236){SRPStatistics}p($76);$265={SourceName}s{SourceIPv4Address}N{DestinationIPv4Address}N{TunnelType}s{Key}p(D){TTL}p(D);$266={MemberList}a($162);$267=?(<InterfaceTypeInfo,im_cmd_intf_type_enum>,0:{SRPInformation}$264,1:{TunnelInformation}$265,2:{BundleInformation}$266,3:{SerialInformation}$250,4:{SonetPOSInformation}$251,5:{TunnelGREInformation}$249,6:{PseudowireHeadEndInformation}$252,7:{CEMInformation}$253,8:{GCCInformation}$255);\", \"schema_names\": [[\"RootOper.Interfaces.Interface(InterfaceName)\", \"\"]], \"subtypes\": {\"256\": \"im_cmd_damp_st\", \"257\": \"im_cmd_arp_info_st\", \"258\": \"im_cmd_ip_info_st\", \"259\": \"im_cmd_mac_addr_st\", \"260\": \"im_cmd_if_stats\", \"214\": \"efp_tag_local_traffic_stack\", \"262\": \"im_cmd_fr_info\", \"263\": \"im_cmd_encaps_info\", \"264\": \"im_cmd_srp_info\", \"265\": \"im_cmd_tunnel_info\", \"266\": \"im_cmd_bundle_info\", \"267\": \"im_cmd_intf_type_info\", \"88\": \"stats_bag_element_st\", \"146\": \"bm_mbr_state_reason_data_type\", \"147\": \"bm_mac_addr_st\", \"261\": \"im_cmd_carrier_delay_st\", \"161\": \"bm_mux_data\", \"162\": \"bm_member_data\", \"219\": \"efp_description_p_type\", \"220\": \"vlan_tag_stack_type\", \"66\": \"ifstatsbag_generic\", \"67\": \"ifstatsbag_basic\", \"68\": \"statsdbag_datarate\", \"72\": \"ifstats_srp_per_side_errors_st\", \"74\": \"ifstats_srp_per_side_data_rate_st\", \"76\": \"ifstatsbag_srp\", \"206\": \"vlan_double_tag_stack\", \"207\": \"efp_range\", \"209\": \"efp_tag_match\", \"211\": \"efp_vlan_tag\", \"86\": \"stats_bag_block_st\", \"216\": \"MacAddressType\", \"217\": \"efp_description\", \"90\": \"stats_data\", \"91\": \"ppp_show_int_ncp_info\", \"92\": \"ppp_show_int_info\", \"221\": \"vlan_intf_generic\", \"222\": \"srp_topology_node_data\", \"223\": \"srp_topology_map\", \"224\": \"srp_topology_info\", \"225\": \"srp_failure_info\", \"226\": \"srp_ips_side_detail\", \"227\": \"srp_ips_detail\", \"228\": \"srp_ips_info\", \"229\": \"srr_node_data\", \"230\": \"srp_srr_detail\", \"231\": \"srp_srr_info\", \"232\": \"srp_rate_limit_detail\", \"233\": \"srp_rate_limit_info\", \"236\": \"srp_all_info\", \"83\": \"stats_bag_id_td\", \"247\": \"tunl_pfi_in6_addr_t\", \"248\": \"pfi_ip_addr_union\", \"249\": \"im_cmd_tunl_gre_info\", \"250\": \"serial_interface\", \"251\": \"im_sonet_pos_info_interface\", \"252\": \"pwhe_ether_interface_info\", \"253\": \"cem_interface\", \"254\": \"nv_optical_interface_info\", \"255\": \"im_cmd_gcc_per_port_info\"}, \"enums\": {\"GCC_SEC_STATE\": {\"0\": \"Normal\", \"1\": \"Maintainance\", \"2\": \"AIS\"}, \"im_cmd_fr_type_enum\": {\"0\": \"FrameRelayCisco\", \"1\": \"FrameRelayIETF\"}, \"srp_mgmt_ips_wrap_state\": {\"0\": \"IdleWrapState\", \"1\": \"WrappedState\", \"2\": \"LockedOutWrapState\", \"3\": \"UnknownWrapState\"}, \"im_attr_media_type_enum\": {\"0\": \"IM_ATTR_MEDIA_OTHER\", \"1\": \"IM_ATTR_MEDIA_UNKNOWN\", \"2\": \"IM_ATTR_MEDIA_AUI\", \"3\": \"IM_ATTR_MEDIA_10BASE5\", \"4\": \"IM_ATTR_MEDIA_FOIRL\", \"5\": \"IM_ATTR_MEDIA_10BASE2\", \"6\": \"IM_ATTR_MEDIA_10BROAD36\", \"7\": \"IM_ATTR_MEDIA_10BASE_T\", \"8\": \"IM_ATTR_MEDIA_10BASE_THD\", \"9\": \"IM_ATTR_MEDIA_10BASE_TFD\", \"10\": \"IM_ATTR_MEDIA_10BASE_FP\", \"11\": \"IM_ATTR_MEDIA_10BASE_FB\", \"12\": \"IM_ATTR_MEDIA_10BASE_FL\", \"13\": \"IM_ATTR_MEDIA_10BASE_FLHD\", \"14\": \"IM_ATTR_MEDIA_10BASE_FLFD\", \"15\": \"IM_ATTR_MEDIA_100BASE_T4\", \"16\": \"IM_ATTR_MEDIA_100BASE_TX\", \"17\": \"IM_ATTR_MEDIA_100BASE_TXHD\", \"18\": \"IM_ATTR_MEDIA_100BASE_TXFD\", \"19\": \"IM_ATTR_MEDIA_100BASE_FX\", \"20\": \"IM_ATTR_MEDIA_100BASE_FXHD\", \"21\": \"IM_ATTR_MEDIA_100BASE_FXFD\", \"22\": \"IM_ATTR_MEDIA_100BASE_EX\", \"23\": \"IM_ATTR_MEDIA_100BASE_EXHD\", \"24\": \"IM_ATTR_MEDIA_100BASE_EXFD\", \"25\": \"IM_ATTR_MEDIA_100BASE_T2\", \"26\": \"IM_ATTR_MEDIA_100BASE_T2HD\", \"27\": \"IM_ATTR_MEDIA_100BASE_T2FD\", \"28\": \"IM_ATTR_MEDIA_1000BASE_X\", \"29\": \"IM_ATTR_MEDIA_1000BASE_XHDX\", \"30\": \"IM_ATTR_MEDIA_1000BASE_XFD\", \"31\": \"IM_ATTR_MEDIA_1000BASE_LX\", \"32\": \"IM_ATTR_MEDIA_1000BASE_LXHD\", \"33\": \"IM_ATTR_MEDIA_1000BASE_LXFDX\", \"34\": \"IM_ATTR_MEDIA_1000BASE_SX\", \"35\": \"IM_ATTR_MEDIA_1000BASE_SXHD\", \"36\": \"IM_ATTR_MEDIA_1000BASE_SXFD\", \"37\": \"IM_ATTR_MEDIA_1000BASE_CX\", \"38\": \"IM_ATTR_MEDIA_1000BASE_CXHDX\", \"39\": \"IM_ATTR_MEDIA_1000BASE_CXFD\", \"40\": \"IM_ATTR_MEDIA_1000BASE_T\", \"41\": \"IM_ATTR_MEDIA_1000BASE_THD\", \"42\": \"IM_ATTR_MEDIA_1000BASE_TFD\", \"43\": \"IM_ATTR_MEDIA_10GBASE_X\", \"44\": \"IM_ATTR_MEDIA_10GBASE_LX4\", \"45\": \"IM_ATTR_MEDIA_10GBASE_R\", \"46\": \"IM_ATTR_MEDIA_10GBASE_ER\", \"47\": \"IM_ATTR_MEDIA_10GBASE_LR\", \"48\": \"IM_ATTR_MEDIA_10GBASE_SR\", \"49\": \"IM_ATTR_MEDIA_10GBASE_W\", \"50\": \"IM_ATTR_MEDIA_10GBASE_EW\", \"51\": \"IM_ATTR_MEDIA_10GBASE_LW\", \"52\": \"IM_ATTR_MEDIA_10GBASE_SW\", \"53\": \"IM_ATTR_MEDIA_10GBASE_ZR\", \"54\": \"IM_ATTR_MEDIA_802_9A\", \"55\": \"IM_ATTR_MEDIA_RJ45\", \"56\": \"IM_ATTR_MEDIA_1000BASE_ZX\", \"57\": \"IM_ATTR_MEDIA_1000BASE_CWDM\", \"58\": \"IM_ATTR_MEDIA_1000BASE_CWDM_1470\", \"59\": \"IM_ATTR_MEDIA_1000BASE_CWDM_1490\", \"60\": \"IM_ATTR_MEDIA_1000BASE_CWDM_1510\", \"61\": \"IM_ATTR_MEDIA_1000BASE_CWDM_1530\", \"62\": \"IM_ATTR_MEDIA_1000BASE_CWDM_1550\", \"63\": \"IM_ATTR_MEDIA_1000BASE_CWDM_1570\", \"64\": \"IM_ATTR_MEDIA_1000BASE_CWDM_1590\", \"65\": \"IM_ATTR_MEDIA_1000BASE_CWDM_1610\", \"66\": \"IM_ATTR_MEDIA_10GBASE_DWDM\", \"67\": \"IM_ATTR_MEDIA_100GBASE_LR4\", \"68\": \"IM_ATTR_MEDIA_1000BASE_DWDM\", \"69\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1533\", \"70\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1537\", \"71\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1541\", \"72\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1545\", \"73\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1549\", \"74\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1553\", \"75\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1557\", \"76\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1561\", \"77\": \"IM_ATTR_MEDIA_40GBASE_LR4\", \"78\": \"IM_ATTR_MEDIA_40GBASE_ER4\", \"79\": \"IM_ATTR_MEDIA_100GBASE_ER4\", \"80\": \"IM_ATTR_MEDIA_1000BASE_EX\", \"81\": \"IM_ATTR_MEDIA_1000BASE_BX10_D\", \"82\": \"IM_ATTR_MEDIA_1000BASE_BX10_U\", \"83\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1561_42\", \"84\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1560_61\", \"85\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1559_79\", \"86\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1558_98\", \"87\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1558_17\", \"88\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1557_36\", \"89\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1556_55\", \"90\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1555_75\", \"91\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1554_94\", \"92\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1554_13\", \"93\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1553_33\", \"94\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1552_52\", \"95\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1551_72\", \"96\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1550_92\", \"97\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1550_12\", \"98\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1549_32\", \"99\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1548_51\", \"100\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1547_72\", \"101\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1546_92\", \"102\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1546_12\", \"103\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1545_32\", \"104\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1544_53\", \"105\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1543_73\", \"106\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1542_94\", \"107\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1542_14\", \"108\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1541_35\", \"109\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1540_56\", \"110\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1539_77\", \"111\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1538_98\", \"112\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1538_19\", \"113\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1537_40\", \"114\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1536_61\", \"115\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1535_82\", \"116\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1535_04\", \"117\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1534_25\", \"118\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1533_47\", \"119\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1532_68\", \"120\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1531_90\", \"121\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1531_12\", \"122\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1530_33\", \"123\": \"IM_ATTR_MEDIA_1000BASE_DWDM_TUNABLE\", \"124\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1561_42\", \"125\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1560_61\", \"126\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1559_79\", \"127\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1558_98\", \"128\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1558_17\", \"129\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1557_36\", \"130\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1556_55\", \"131\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1555_75\", \"132\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1554_94\", \"133\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1554_13\", \"134\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1553_33\", \"135\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1552_52\", \"136\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1551_72\", \"137\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1550_92\", \"138\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1550_12\", \"139\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1549_32\", \"140\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1548_51\", \"141\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1547_72\", \"142\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1546_92\", \"143\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1546_12\", \"144\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1545_32\", \"145\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1544_53\", \"146\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1543_73\", \"147\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1542_94\", \"148\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1542_14\", \"149\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1541_35\", \"150\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1540_56\", \"151\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1539_77\", \"152\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1538_98\", \"153\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1538_19\", \"154\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1537_40\", \"155\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1536_61\", \"156\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1535_82\", \"157\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1535_04\", \"158\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1534_25\", \"159\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1533_47\", \"160\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1532_68\", \"161\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1531_90\", \"162\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1531_12\", \"163\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1530_33\", \"164\": \"IM_ATTR_MEDIA_10GBASE_DWDM_TUNABLE\", \"165\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1561_42\", \"166\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1560_61\", \"167\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1559_79\", \"168\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1558_98\", \"169\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1558_17\", \"170\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1557_36\", \"171\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1556_55\", \"172\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1555_75\", \"173\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1554_94\", \"174\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1554_13\", \"175\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1553_33\", \"176\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1552_52\", \"177\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1551_72\", \"178\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1550_92\", \"179\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1550_12\", \"180\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1549_32\", \"181\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1548_51\", \"182\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1547_72\", \"183\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1546_92\", \"184\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1546_12\", \"185\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1545_32\", \"186\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1544_53\", \"187\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1543_73\", \"188\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1542_94\", \"189\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1542_14\", \"190\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1541_35\", \"191\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1540_56\", \"192\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1539_77\", \"193\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1538_98\", \"194\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1538_19\", \"195\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1537_40\", \"196\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1536_61\", \"197\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1535_82\", \"198\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1535_04\", \"199\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1534_25\", \"200\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1533_47\", \"201\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1532_68\", \"202\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1531_90\", \"203\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1531_12\", \"204\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1530_33\", \"205\": \"IM_ATTR_MEDIA_40GBASE_DWDM_TUNABLE\", \"206\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1561_42\", \"207\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1560_61\", \"208\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1559_79\", \"209\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1558_98\", \"210\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1558_17\", \"211\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1557_36\", \"212\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1556_55\", \"213\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1555_75\", \"214\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1554_94\", \"215\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1554_13\", \"216\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1553_33\", \"217\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1552_52\", \"218\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1551_72\", \"219\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1550_92\", \"220\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1550_12\", \"221\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1549_32\", \"222\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1548_51\", \"223\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1547_72\", \"224\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1546_92\", \"225\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1546_12\", \"226\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1545_32\", \"227\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1544_53\", \"228\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1543_73\", \"229\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1542_94\", \"230\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1542_14\", \"231\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1541_35\", \"232\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1540_56\", \"233\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1539_77\", \"234\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1538_98\", \"235\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1538_19\", \"236\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1537_40\", \"237\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1536_61\", \"238\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1535_82\", \"239\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1535_04\", \"240\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1534_25\", \"241\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1533_47\", \"242\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1532_68\", \"243\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1531_90\", \"244\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1531_12\", \"245\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1530_33\", \"246\": \"IM_ATTR_MEDIA_100GBASE_DWDM_TUNABLE\", \"247\": \"IM_ATTR_MEDIA_40GBASE_KR4\", \"248\": \"IM_ATTR_MEDIA_40GBASE_CR4\", \"249\": \"IM_ATTR_MEDIA_40GBASE_SR4\", \"250\": \"IM_ATTR_MEDIA_40GBASE_FR\", \"251\": \"IM_ATTR_MEDIA_100GBASE_CR10\", \"252\": \"IM_ATTR_MEDIA_100GBASE_SR10\", \"253\": \"IM_ATTR_MEDIA_40GBASE_CSR4\", \"254\": \"IM_ATTR_MEDIA_10GBASE_CWDM\", \"255\": \"IM_ATTR_MEDIA_10GBASE_CWDM_TUNABLE\", \"256\": \"IM_ATTR_MEDIA_10GBASE_CWDM_1470\", \"257\": \"IM_ATTR_MEDIA_10GBASE_CWDM_1490\", \"258\": \"IM_ATTR_MEDIA_10GBASE_CWDM_1510\", \"259\": \"IM_ATTR_MEDIA_10GBASE_CWDM_1530\", \"260\": \"IM_ATTR_MEDIA_10GBASE_CWDM_1550\", \"261\": \"IM_ATTR_MEDIA_10GBASE_CWDM_1570\", \"262\": \"IM_ATTR_MEDIA_10GBASE_CWDM_1590\", \"263\": \"IM_ATTR_MEDIA_10GBASE_CWDM_1610\", \"264\": \"IM_ATTR_MEDIA_40GBASE_CWDM\", \"265\": \"IM_ATTR_MEDIA_40GBASE_CWDM_TUNABLE\", \"266\": \"IM_ATTR_MEDIA_40GBASE_CWDM_1470\", \"267\": \"IM_ATTR_MEDIA_40GBASE_CWDM_1490\", \"268\": \"IM_ATTR_MEDIA_40GBASE_CWDM_1510\", \"269\": \"IM_ATTR_MEDIA_40GBASE_CWDM_1530\", \"270\": \"IM_ATTR_MEDIA_40GBASE_CWDM_1550\", \"271\": \"IM_ATTR_MEDIA_40GBASE_CWDM_1570\", \"272\": \"IM_ATTR_MEDIA_40GBASE_CWDM_1590\", \"273\": \"IM_ATTR_MEDIA_40GBASE_CWDM_1610\", \"274\": \"IM_ATTR_MEDIA_100GBASE_CWDM\", \"275\": \"IM_ATTR_MEDIA_100GBASE_CWDM_TUNABLE\", \"276\": \"IM_ATTR_MEDIA_100GBASE_CWDM_1470\", \"277\": \"IM_ATTR_MEDIA_100GBASE_CWDM_1490\", \"278\": \"IM_ATTR_MEDIA_100GBASE_CWDM_1510\", \"279\": \"IM_ATTR_MEDIA_100GBASE_CWDM_1530\", \"280\": \"IM_ATTR_MEDIA_100GBASE_CWDM_1550\", \"281\": \"IM_ATTR_MEDIA_100GBASE_CWDM_1570\", \"282\": \"IM_ATTR_MEDIA_100GBASE_CWDM_1590\", \"283\": \"IM_ATTR_MEDIA_100GBASE_CWDM_1610\", \"284\": \"IM_ATTR_MEDIA_40GBASE_ELPB\", \"285\": \"IM_ATTR_MEDIA_100GBASE_ELPB\", \"286\": \"IM_ATTR_MEDIA_100GBASE_LR10\", \"287\": \"IM_ATTR_MEDIA_40GBASE_T\", \"288\": \"IM_ATTR_MEDIA_100GBASE_KP4\", \"289\": \"IM_ATTR_MEDIA_100GBASE_KR4\", \"290\": \"IM_ATTR_MEDIA_10GBASE_LRM\", \"291\": \"IM_ATTR_MEDIA_10GBASE_CX4\", \"292\": \"IM_ATTR_MEDIA_10GBASE_T\", \"293\": \"IM_ATTR_MEDIA_10GBASE_KX4\", \"294\": \"IM_ATTR_MEDIA_10GBASE_KR\", \"295\": \"IM_ATTR_MEDIA_10GBASE_PR\", \"296\": \"IM_ATTR_MEDIA_100BASE_LX\", \"297\": \"IM_ATTR_MEDIA_100BASE_ZX\", \"298\": \"IM_ATTR_MEDIA_1000BASE_BX_D\", \"299\": \"IM_ATTR_MEDIA_1000BASE_BX_U\", \"300\": \"IM_ATTR_MEDIA_1000BASE_BX20_D\", \"301\": \"IM_ATTR_MEDIA_1000BASE_BX20_U\", \"302\": \"IM_ATTR_MEDIA_1000BASE_BX40_D\", \"303\": \"IM_ATTR_MEDIA_1000BASE_BX40_DA\", \"304\": \"IM_ATTR_MEDIA_1000BASE_BX40_U\", \"305\": \"IM_ATTR_MEDIA_1000BASE_BX80_D\", \"306\": \"IM_ATTR_MEDIA_1000BASE_BX80_U\", \"307\": \"IM_ATTR_MEDIA_1000BASE_BX120_D\", \"308\": \"IM_ATTR_MEDIA_1000BASE_BX120_U\", \"309\": \"IM_ATTR_MEDIA_10GBASE_BX_D\", \"310\": \"IM_ATTR_MEDIA_10GBASE_BX_U\", \"311\": \"IM_ATTR_MEDIA_10GBASE_BX10_D\", \"312\": \"IM_ATTR_MEDIA_10GBASE_BX10_U\", \"313\": \"IM_ATTR_MEDIA_10GBASE_BX20_D\", \"314\": \"IM_ATTR_MEDIA_10GBASE_BX20_U\", \"315\": \"IM_ATTR_MEDIA_10GBASE_BX40_D\", \"316\": \"IM_ATTR_MEDIA_10GBASE_BX40_U\", \"317\": \"IM_ATTR_MEDIA_10GBASE_BX80_D\", \"318\": \"IM_ATTR_MEDIA_10GBASE_BX80_U\", \"319\": \"IM_ATTR_MEDIA_10GBASE_BX120_D\", \"320\": \"IM_ATTR_MEDIA_10GBASE_BX120_U\", \"321\": \"IM_ATTR_MEDIA_1000BASE_DR_LX\", \"322\": \"IM_ATTR_MEDIA_100GBASE_ER4L\", \"323\": \"IM_ATTR_MEDIA_100GBASE_SR4\", \"324\": \"IM_ATTR_MEDIA_40GBASE_SR_BD\"}, \"efp_tag_priority\": {\"0\": \"PRIORITY0\", \"1\": \"PRIORITY1\", \"2\": \"PRIORITY2\", \"3\": \"PRIORITY3\", \"4\": \"PRIORITY4\", \"5\": \"PRIORITY5\", \"6\": \"PRIORITY6\", \"7\": \"PRIORITY7\", \"8\": \"PRIORITY_ANY\"}, \"im_cmd_intf_type_enum\": {\"0\": \"SRP\", \"1\": \"Tunnel\", \"2\": \"Bundle\", \"3\": \"Serial\", \"4\": \"SonetPOS\", \"5\": \"TunnelGRE\", \"6\": \"PseudowireHeadEnd\", \"7\": \"CEM\", \"8\": \"GCC\"}, \"TunnelKeyState\": {\"0\": \"Absent\", \"1\": \"Present\"}, \"sonet_aps_et\": {\"0\": \"NotConfigured\", \"1\": \"WorkingActive\", \"2\": \"ProtectActive\", \"3\": \"WorkingInactive\", \"4\": \"ProtectInactive\"}, \"bm_severity_type\": {\"0\": \"Ok\", \"1\": \"Information\", \"2\": \"Misconfiguration\", \"3\": \"Warning\", \"5\": \"Error\"}, \"stats_type_contents_enum\": {\"100\": \"STATS_TYPE_SINGLE\", \"101\": \"STATS_TYPE_VARIABLE\"}, \"im_state_type_\": {\"0\": \"IM_STATE_NOTREADY\", \"1\": \"IM_STATE_ADMINDOWN\", \"2\": \"IM_STATE_DOWN\", \"3\": \"IM_STATE_UP\", \"4\": \"IM_STATE_SHUTDOWN\", \"5\": \"IM_STATE_ERRDISABLE\", \"6\": \"IM_STATE_DOWN_IMMEDIATE\", \"7\": \"IM_STATE_DOWN_IMMEDIATE_ADMIN\", \"8\": \"IM_STATE_DOWN_GRACEFUL\", \"9\": \"IM_STATE_BEGIN_SHUTDOWN\", \"10\": \"IM_STATE_END_SHUTDOWN\", \"11\": \"IM_STATE_BEGIN_ERROR_DISABLE\", \"12\": \"IM_STATE_END_ERROR_DISABLE\", \"13\": \"IM_STATE_BEGIN_DOWN_GRACEFUL\", \"14\": \"IM_STATE_RESET\", \"15\": \"IM_STATE_OPERATIONAL\", \"16\": \"IM_STATE_NOT_OPERATIONAL\", \"17\": \"IM_STATE_UNKNOWN\", \"18\": \"IM_STATE_LAST\"}, \"bm_muxreason\": {\"0\": \"BM_MUXREASON_NO_REASON\", \"1\": \"BM_MUXREASON_LINK_DOWN\", \"2\": \"BM_MUXREASON_LINK_DELETED\", \"3\": \"BM_MUXREASON_DUPLEX\", \"4\": \"BM_MUXREASON_BANDWIDTH\", \"5\": \"BM_MUXREASON_LOOPBACK\", \"6\": \"BM_MUXREASON_ACTIVITY_TYPE\", \"7\": \"BM_MUXREASON_LINK_LIMIT\", \"8\": \"BM_MUXREASON_SHARED\", \"9\": \"BM_MUXREASON_LAGID\", \"10\": \"BM_MUXREASON_NO_BUNDLE\", \"11\": \"BM_MUXREASON_NO_PRIMARY\", \"12\": \"BM_MUXREASON_BUNDLE_DOWN\", \"13\": \"BM_MUXREASON_INDIVIDUAL\", \"14\": \"BM_MUXREASON_DEFAULTED\", \"15\": \"BM_MUXREASON_INSYNC\", \"16\": \"BM_MUXREASON_COLLECTING\", \"17\": \"BM_MUXREASON_ACTIVE_LINK_LIMIT\", \"18\": \"BM_MUXREASON_DISTRIBUTING\", \"19\": \"BM_MUXREASON_COUNT\"}, \"GCC_DER_STATE\": {\"0\": \"InService\", \"1\": \"OutOfService\", \"2\": \"Maintainance\", \"3\": \"AIS\"}, \"srp_mgmt_failure_state_et\": {\"0\": \"IdleFailureState\", \"1\": \"WaitToRestoreFailureState\", \"2\": \"ManualSwitchFailureState\", \"3\": \"SignalDegradeFailureState\", \"4\": \"SignalFailFailureState\", \"5\": \"ForcedSwitchFailureState\", \"6\": \"ShutdownFailureState\", \"7\": \"InvalidFailureState\", \"8\": \"UnknownFailureState\"}, \"ncp_ident\": {\"1\": \"CDPCP\", \"2\": \"IPCP\", \"3\": \"IPCPIW\", \"4\": \"IPV6CP\", \"5\": \"MPLSCP\", \"6\": \"OSICP\"}, \"TunnelKA_DFState\": {\"0\": \"Disable\", \"1\": \"Enable\"}, \"im_cmd_encaps_enum\": {\"0\": \"FrameRelay\", \"1\": \"VLAN\", \"2\": \"PPP\"}, \"bm_muxstate\": {\"1\": \"DETACHED\", \"2\": \"WAITING\", \"3\": \"ATTACHED\", \"4\": \"COLLECTING\", \"5\": \"DISTRIBUTING\", \"6\": \"COLLECTINGDISTRIBUTING\"}, \"ppp_fsm_state_type\": {\"0\": \"PPP_FSM_STATE_INITIAL_0\", \"1\": \"PPP_FSM_STATE_STARTING_1\", \"2\": \"PPP_FSM_STATE_CLOSED_2\", \"3\": \"PPP_FSM_STATE_STOPPED_3\", \"4\": \"PPP_FSM_STATE_CLOSING_4\", \"5\": \"PPP_FSM_STATE_STOPPING_5\", \"6\": \"PPP_FSM_STATE_REQ_SENT_6\", \"7\": \"PPP_FSM_STATE_ACK_RCVD_7\", \"8\": \"PPP_FSM_STATE_ACK_SENT_8\", \"9\": \"PPP_FSM_STATE_OPENED_9\"}, \"im_attr_transport_mode_enum\": {\"0\": \"IM_ATTR_TRANSPORT_MODE_UNKNOWN\", \"1\": \"IM_ATTR_TRANSPORT_MODE_LAN\", \"2\": \"IM_ATTR_TRANSPORT_MODE_WAN\", \"3\": \"IM_ATTR_TRANSPORT_MODE_OTN_BT_OPU1E\", \"4\": \"IM_ATTR_TRANSPORT_MODE_OTN_BT_OPU2E\", \"5\": \"IM_ATTR_TRANSPORT_MODE_OTN_OPU3\", \"6\": \"IM_ATTR_TRANSPORT_MODE_OTN_OPU4\"}, \"srp_mgmt_srr_failure_type\": {\"0\": \"IdleSRRFailure\", \"1\": \"WaitToRestoreSRRFailure\", \"2\": \"SignalFailSRRFailure\", \"3\": \"ForcedSwitchSRRFailure\", \"4\": \"UnknownSRRFailure\"}, \"srp_mgmt_ips_req_type\": {\"0\": \"IdleIPSRequest\", \"1\": \"WaitToRestoreIPSRequest\", \"2\": \"ManualSwitchIPSRequest\", \"3\": \"SignalDegradeIPSRequest\", \"4\": \"SignalFailIPSRequest\", \"5\": \"ForcedSwitchIPSRequest\", \"6\": \"UnknownIPSRequest\"}, \"bm_state_reason_target_type\": {\"0\": \"MemberReason\", \"1\": \"BundleReason\"}, \"srp_mgmt_failure_et\": {\"0\": \"HardwareMissingFailure\", \"1\": \"Layer1AdminStateFailure\", \"2\": \"Layer1ErrorFailure\", \"3\": \"KeepaliveMissedFailure\", \"4\": \"LinkQualityDegradedFailure\", \"5\": \"MateProblemFailure\", \"6\": \"SideMismatchFailure\", \"7\": \"UnknownFailure\"}, \"im_attr_link_type_enum\": {\"0\": \"IM_ATTR_LINK_TYPE_AUTO\", \"1\": \"IM_ATTR_LINK_TYPE_FORCE\"}, \"bmd_member_state_enum\": {\"1\": \"BMD_MBR_STATE_CONFIGURED\", \"2\": \"BMD_MBR_STATE_STANDBY\", \"3\": \"BMD_MBR_STATE_HOT_STANDBY\", \"4\": \"BMD_MBR_STATE_NEGOTIATING\", \"5\": \"BMD_MBR_STATE_BFD_RUNNING\", \"6\": \"BMD_MBR_STATE_ACTIVE\"}, \"bm_mbr_state_reason_type\": {\"0\": \"BM_MBR_STATE_REASON_UNKNOWN\", \"1\": \"BM_MBR_STATE_REASON_UNSELECTABLE_UNKNOWN\", \"2\": \"BM_MBR_STATE_REASON_LINK_DOWN\", \"3\": \"BM_MBR_STATE_REASON_LINK_DELETING\", \"4\": \"BM_MBR_STATE_REASON_CREATING\", \"5\": \"BM_MBR_STATE_REASON_BUNDLE_CREATING\", \"6\": \"BM_MBR_STATE_REASON_BUNDLE_DELETING\", \"7\": \"BM_MBR_STATE_REASON_BUNDLE_ADMIN_DOWN\", \"8\": \"BM_MBR_STATE_REASON_REPLICATING\", \"9\": \"BM_MBR_STATE_REASON_BANDWIDTH\", \"10\": \"BM_MBR_STATE_REASON_LOOPBACK\", \"11\": \"BM_MBR_STATE_REASON_ACTIVITY_TYPE\", \"12\": \"BM_MBR_STATE_REASON_BUNDLE_SHUTDOWN\", \"13\": \"BM_MBR_STATE_REASON_MIN_SELECTED\", \"14\": \"BM_MBR_STATE_REASON_MAX_SELECTED\", \"15\": \"BM_MBR_STATE_REASON_LINK_LIMIT\", \"16\": \"BM_MBR_STATE_REASON_ACTIVE_LIMIT\", \"17\": \"BM_MBR_STATE_REASON_STANDBY_UNKNOWN\", \"18\": \"BM_MBR_STATE_REASON_EXPIRED\", \"19\": \"BM_MBR_STATE_REASON_DEFAULTED\", \"20\": \"BM_MBR_STATE_REASON_ACTOR_NOTAGG\", \"21\": \"BM_MBR_STATE_REASON_PARTNER_NOTAGG\", \"22\": \"BM_MBR_STATE_REASON_LAGID\", \"23\": \"BM_MBR_STATE_REASON_BUNDLE_NOT_CFGD\", \"24\": \"BM_MBR_STATE_REASON_BUNDLE_NOT_READY\", \"25\": \"BM_MBR_STATE_REASON_PARTNER_OOD\", \"26\": \"BM_MBR_STATE_REASON_PARTNER_NOT_INSYNC\", \"27\": \"BM_MBR_STATE_REASON_FOREIGN_PARTNER_OOS\", \"28\": \"BM_MBR_STATE_REASON_ATTACH_UNKNOWN\", \"29\": \"BM_MBR_STATE_REASON_PARTNER_NOT_COLLECTING\", \"30\": \"BM_MBR_STATE_REASON_COLLECT_UNKNOWN\", \"31\": \"BM_MBR_STATE_REASON_STANDBY_FOREIGN\", \"32\": \"BM_MBR_STATE_REASON_BFD_STARTING\", \"33\": \"BM_MBR_STATE_REASON_BFD_DOWN\", \"34\": \"BM_MBR_STATE_REASON_BFD_NBR_UNCONFIG\", \"35\": \"BM_MBR_STATE_REASON_MLACP\", \"36\": \"BM_MBR_STATE_REASON_PE_ISOLATED\", \"37\": \"BM_MBR_STATE_REASON_FORCED_SWITCHOVER\", \"38\": \"BM_MBR_STATE_REASON_ERRDIS_UNKNOWN\", \"39\": \"BM_MBR_STATE_REASON_MLACP_NO_MBR_STATE_INFO\", \"40\": \"BM_MBR_STATE_REASON_ACTIVE\", \"41\": \"BM_MBR_STATE_REASON_MLACP_NO_BDL_STATE_INFO\", \"42\": \"BM_MBR_STATE_REASON_MLACP_NO_BDL_CONFIG_INFO\", \"43\": \"BM_MBR_STATE_REASON_MLACP_NO_BDL_SYNC\", \"44\": \"BM_MBR_STATE_REASON_MLACP_BDL_HAS_NO_PEER\", \"45\": \"BM_MBR_STATE_REASON_MLACP_NAK\", \"46\": \"BM_MBR_STATE_REASON_MLACP_TRANSPORT_UNAVAILABLE\", \"47\": \"BM_MBR_STATE_REASON_MLACP_NOT_CONFIGURED\", \"48\": \"BM_MBR_STATE_REASON_RECOVERY_TIMER\", \"49\": \"BM_MBR_STATE_REASON_MLACP_STANDBY\", \"50\": \"BM_MBR_STATE_REASON_MAXIMIZED_OUT\", \"51\": \"BM_MBR_STATE_REASON_MLACP_PEER_SELECTED\", \"52\": \"BM_MBR_STATE_REASON_MLACP_CONNECT_TIMER_RUNNING\", \"53\": \"BM_MBR_STATE_REASON_BUNDLE_NOT_MLACP\", \"54\": \"BM_MBR_STATE_REASON_NO_LON\", \"55\": \"BM_MBR_STATE_REASON_CUMUL_REL_BW_LIMIT\", \"56\": \"BM_MBR_STATE_REASON_NO_MAC\", \"57\": \"BM_MBR_STATE_REASON_NO_SYSTEM_ID\", \"58\": \"BM_MBR_STATE_REASON_LINK_SHUTDOWN\", \"59\": \"BM_MBR_STATE_REASON_ACTIVITY_MLACP\", \"60\": \"BM_MBR_STATE_REASON_ACTIVITY_ICCP\", \"61\": \"BM_MBR_STATE_REASON_BUNDLE_ICPE_MLACP\", \"62\": \"BM_MBR_STATE_REASON_NO_LINK_NUM\", \"63\": \"BM_MBR_STATE_REASON_STANDBY_PEER_HIGHER_PRIO\", \"64\": \"BM_MBR_STATE_REASON_RED_STATE_STANDBY\", \"65\": \"BM_MBR_STATE_REASON_OTHER_RED_STATE_STANDBY\", \"66\": \"BM_MBR_STATE_REASON_HOLDING\", \"67\": \"BM_MBR_STATE_REASON_BUNDLE_ERROR_DISABLED\", \"68\": \"BM_MBR_STATE_REASON_BUNDLE_EFD_DISABLED\", \"69\": \"BM_MBR_STATE_REASON_SINGLETON_PE_ISOLATED\", \"70\": \"BM_MBR_STATE_REASON_COUNT\"}, \"im_attr_duplex_enum\": {\"0\": \"IM_ATTR_DUPLEX_UNKNOWN\", \"1\": \"IM_ATTR_DUPLEX_HALF\", \"2\": \"IM_ATTR_DUPLEX_FULL\"}, \"srp_mgmt_srr_node_state\": {\"0\": \"IdleSRRState\", \"1\": \"DiscoverySRRState\", \"2\": \"UnknownSRRState\"}, \"stats_counter_type_enum\": {\"0\": \"STATS_COUNTER_RATE\", \"1\": \"STATS_COUNTER_UINT32\", \"2\": \"STATS_COUNTER_UINT64\", \"3\": \"STATS_COUNTER_GENERIC\", \"4\": \"STATS_COUNTER_PROTO\", \"5\": \"STATS_COUNTER_SRP\", \"6\": \"STATS_COUNTER_IPV4_PREC\", \"7\": \"STATS_COUNTER_IPV4_DSCP\", \"8\": \"STATS_COUNTER_MPLS_EXP\", \"9\": \"STATS_COUNTER_IPV4_BGPPA\", \"10\": \"STATS_COUNTER_SRC_BGPPA\", \"11\": \"STATS_COUNTER_BASIC\", \"12\": \"STATS_COUNTER_COMP_GENERIC\", \"13\": \"STATS_COUNTER_COMP_PROTO\", \"14\": \"STATS_COUNTER_COMP_BASIC\", \"15\": \"STATS_COUNTER_ACCOUNTING\", \"16\": \"STATS_COUNTER_COMP_ACCOUNTING\", \"17\": \"STATS_COUNTER_FLOW\", \"18\": \"STATS_COUNTER_COMP_FLOW\"}, \"im_cmd_loopback_enum\": {\"0\": \"NoLoopback\", \"1\": \"InternalLoopback\", \"2\": \"ExternalLoopback\", \"3\": \"LineLoopback\"}, \"tunl_pfi_af_id_type\": {\"0\": \"TUNL_PFI_AF_ID_NONE\", \"2\": \"TUNL_PFI_AF_ID_IPV4\", \"10\": \"TUNL_PFI_AF_ID_IPV6\"}, \"efp_payload_etype\": {\"0\": \"PayloadEthertypeAny\", \"1\": \"PayloadEthertypeIP\", \"2\": \"PayloadEthertypePPPoE\"}, \"stats_id_type_enum\": {\"0\": \"STATS_ID_TYPE_UNKNOWN\", \"1\": \"STATS_ID_TYPE_IFHANDLE\", \"2\": \"STATS_ID_TYPE_SPARE\", \"3\": \"STATS_ID_TYPE_NODE\", \"4\": \"STATS_ID_TYPE_OTHER\", \"5\": \"STATS_ID_TYPE_FEATURE\", \"6\": \"STATS_ID_TYPE_MAX\"}, \"im_cmd_stats_enum\": {\"1\": \"Full\", \"2\": \"Basic\"}, \"TunnelGREMode\": {\"0\": \"Unknown\", \"1\": \"GREoIPv4\", \"2\": \"GREoIPv6\", \"3\": \"MGREoIPv4\", \"4\": \"MGREoIPv6\", \"5\": \"IPv4\", \"6\": \"IPv6\"}, \"vlan_encaps\": {\"0\": \"NoEncapsulation\", \"1\": \"Dot1Q\", \"2\": \"QinQ\", \"3\": \"QinAny\", \"4\": \"Dot1QNative\", \"5\": \"Dot1ad\", \"6\": \"Dot1adNative\", \"7\": \"ServiceInstance\", \"8\": \"Dot1adDot1Q\", \"9\": \"Dot1adAny\"}, \"im_cmd_lmi_type_enum\": {\"0\": \"LMITypeAuto\", \"1\": \"LMITypeANSI\", \"2\": \"LMITypeCCITT\", \"3\": \"LMITypeCisco\"}, \"im_attr_flow_control_enum\": {\"0\": \"IM_ATTR_FLOW_CONTROL_OFF\", \"1\": \"IM_ATTR_FLOW_CONTROL_ON\", \"2\": \"IM_ATTR_FLOW_CONTROL_NOTSUP\"}, \"bmd_member_type_enum\": {\"0\": \"BMD_MBR_LOCAL\", \"1\": \"BMD_MBR_FOREIGN\", \"2\": \"BMD_MBR_UNKNOWN\"}, \"srp_mgmt_ips_path_ind\": {\"0\": \"ShortPath\", \"1\": \"LongPath\", \"2\": \"UnknownPath\"}, \"efp_tag_etype\": {\"33024\": \"DOT1Q\", \"34984\": \"DOT1AD\", \"0\": \"UNTAGGED\"}}, \"schema_path\": \"RootOper.Interfaces.Interface\", \"v_min\": 6}";
